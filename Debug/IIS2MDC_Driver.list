
IIS2MDC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008950  08008950  00018950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08008960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000189c  20000084  080089e4  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001920  080089e4  00021920  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d8a  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003041  00000000  00000000  00036e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001090  00000000  00000000  00039e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f38  00000000  00000000  0003af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000346cd  00000000  00000000  0003be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000172ba  00000000  00000000  0007051d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013dbca  00000000  00000000  000877d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c53a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b78  00000000  00000000  001c53f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000084 	.word	0x20000084
 8000250:	00000000 	.word	0x00000000
 8000254:	08008460 	.word	0x08008460

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000088 	.word	0x20000088
 8000270:	08008460 	.word	0x08008460

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <IIS2MDC_Init>:
 *@Params: IIS2MDC Init Settings, Dev Handle pointer, Low level driver structure
 *@Return: None
 *@Precondition: LowLevelDrivers and Settings params should already be initialized.
 *@Postcondition: Dev Handle members and IIS2MDC Hardware registers will be initialized.
 **************************************//**************************************/
void IIS2MDC_Init(IIS2MDC_InitStruct_t Settings, IIS2MDC_Handle_t *Dev, IIS2MDC_IO_Drv_t LowLevelDrivers){
 8000594:	b084      	sub	sp, #16
 8000596:	b580      	push	{r7, lr}
 8000598:	b084      	sub	sp, #16
 800059a:	af00      	add	r7, sp, #0
 800059c:	f107 0c18 	add.w	ip, r7, #24
 80005a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Dev->IIS2MDC_IO.Init = LowLevelDrivers.Init;
 80005a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	601a      	str	r2, [r3, #0]
	Dev->IIS2MDC_IO.DeInit = LowLevelDrivers.DeInit;
 80005aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ae:	605a      	str	r2, [r3, #4]
	Dev->IIS2MDC_IO.WriteReg = LowLevelDrivers.WriteReg;
 80005b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	60da      	str	r2, [r3, #12]
	Dev->IIS2MDC_IO.ReadReg = LowLevelDrivers.ReadReg;
 80005b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ba:	609a      	str	r2, [r3, #8]
	Dev->IIS2MDC_IO.ioctl = LowLevelDrivers.ioctl;
 80005bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80005be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c0:	611a      	str	r2, [r3, #16]
	Dev->IIS2MDC_IO.Init();
 80005c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4798      	blx	r3

	if(Settings.IntPinMode != IIS2MDC_IntSignalDisabled){
 80005c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <IIS2MDC_Init+0x44>
		Dev->IIS2MDC_IO.ioctl(IIS2MDC_IRQDisable);
 80005d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	2001      	movs	r0, #1
 80005d6:	4798      	blx	r3

	uint8_t buffer8;
	uint16_t buffer16;

	/*WHO AM I*/
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_WHO_AM_I, &buffer8,1) != IIS2MDC_Ok){
 80005d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f107 010f 	add.w	r1, r7, #15
 80005e0:	2201      	movs	r2, #1
 80005e2:	204f      	movs	r0, #79	; 0x4f
 80005e4:	4798      	blx	r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d004      	beq.n	80005f6 <IIS2MDC_Init+0x62>
		_log(log_iis2mdc, "Initialization: Read Device ID Reg Failed.");
 80005ec:	497c      	ldr	r1, [pc, #496]	; (80007e0 <IIS2MDC_Init+0x24c>)
 80005ee:	2002      	movs	r0, #2
 80005f0:	f000 fc06 	bl	8000e00 <_log>
 80005f4:	e007      	b.n	8000606 <IIS2MDC_Init+0x72>
	} else if(buffer8 != IIS2MDC_DEVICE_ID){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2240      	movs	r2, #64	; 0x40
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d003      	beq.n	8000606 <IIS2MDC_Init+0x72>
		_log(log_iis2mdc, "Initialization: Device ID Mismatch");
 80005fe:	4979      	ldr	r1, [pc, #484]	; (80007e4 <IIS2MDC_Init+0x250>)
 8000600:	2002      	movs	r0, #2
 8000602:	f000 fbfd 	bl	8000e00 <_log>
	}

	/*Offset X Regs*/
	buffer16 = Settings.Offset_X;
 8000606:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800060a:	b29b      	uxth	r3, r3
 800060c:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_OFFSET_X_REG_L, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	f107 010c 	add.w	r1, r7, #12
 8000616:	2202      	movs	r2, #2
 8000618:	2045      	movs	r0, #69	; 0x45
 800061a:	4798      	blx	r3
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <IIS2MDC_Init+0x96>
		_log(log_iis2mdc, "Initialization: Offset X Write Failed");
 8000622:	4971      	ldr	r1, [pc, #452]	; (80007e8 <IIS2MDC_Init+0x254>)
 8000624:	2002      	movs	r0, #2
 8000626:	f000 fbeb 	bl	8000e00 <_log>
	}

	/*Offset Y Regs*/
	buffer16 = Settings.Offset_Y;
 800062a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800062e:	b29b      	uxth	r3, r3
 8000630:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_OFFSET_Y_REG_L, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 8000632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	f107 010c 	add.w	r1, r7, #12
 800063a:	2202      	movs	r2, #2
 800063c:	2047      	movs	r0, #71	; 0x47
 800063e:	4798      	blx	r3
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d003      	beq.n	800064e <IIS2MDC_Init+0xba>
		_log(log_iis2mdc, "Initialization: Offset Y Write Failed");
 8000646:	4969      	ldr	r1, [pc, #420]	; (80007ec <IIS2MDC_Init+0x258>)
 8000648:	2002      	movs	r0, #2
 800064a:	f000 fbd9 	bl	8000e00 <_log>
	}

	/*Offset Z Regs*/
	buffer16 = Settings.Offset_Z;
 800064e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000652:	b29b      	uxth	r3, r3
 8000654:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_OFFSET_Z_REG_L, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f107 010c 	add.w	r1, r7, #12
 800065e:	2202      	movs	r2, #2
 8000660:	2049      	movs	r0, #73	; 0x49
 8000662:	4798      	blx	r3
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d003      	beq.n	8000672 <IIS2MDC_Init+0xde>
		_log(log_iis2mdc, "Initialization: Offset Z Write Failed");
 800066a:	4961      	ldr	r1, [pc, #388]	; (80007f0 <IIS2MDC_Init+0x25c>)
 800066c:	2002      	movs	r0, #2
 800066e:	f000 fbc7 	bl	8000e00 <_log>
	}

	/*IRQ Threshold*/
	buffer16 = Settings.IntThreshold;
 8000672:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000676:	b29b      	uxth	r3, r3
 8000678:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_INT_THS_L_REG, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f107 010c 	add.w	r1, r7, #12
 8000682:	2202      	movs	r2, #2
 8000684:	2065      	movs	r0, #101	; 0x65
 8000686:	4798      	blx	r3
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <IIS2MDC_Init+0x102>
		_log(log_iis2mdc, "Initialization: Int Threshold Write Failed");
 800068e:	4959      	ldr	r1, [pc, #356]	; (80007f4 <IIS2MDC_Init+0x260>)
 8000690:	2002      	movs	r0, #2
 8000692:	f000 fbb5 	bl	8000e00 <_log>
	}

	/*CFG A*/
	buffer8 = (Settings.TempComp << 7) | (Settings.PowerMode << 4) | (Settings.DataRate << 2) | (Settings.OperatingMode << 0);
 8000696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800069a:	01db      	lsls	r3, r3, #7
 800069c:	b25a      	sxtb	r2, r3
 800069e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	b25b      	sxtb	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b25a      	sxtb	r2, r3
 80006b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_CFG_REG_A,&buffer8,1) != IIS2MDC_Ok){
 80006c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	f107 010f 	add.w	r1, r7, #15
 80006cc:	2201      	movs	r2, #1
 80006ce:	2060      	movs	r0, #96	; 0x60
 80006d0:	4798      	blx	r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <IIS2MDC_Init+0x14c>
		_log(log_iis2mdc, "Initialization: Write CFG Reg A Failed.");
 80006d8:	4947      	ldr	r1, [pc, #284]	; (80007f8 <IIS2MDC_Init+0x264>)
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 fb90 	bl	8000e00 <_log>
	}

	/*CFG B*/
	buffer8 = (Settings.IRQOffsetMode << 3) | (Settings.OffsetCancellationPulse << 2) | (Settings.LPF << 0);
 80006e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	b25a      	sxtb	r2, r3
 80006e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25a      	sxtb	r2, r3
 80006f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	73fb      	strb	r3, [r7, #15]
	if(Settings.OperatingMode == IIS2MDC_OneShotMode){
 8000702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000706:	2b01      	cmp	r3, #1
 8000708:	d10a      	bne.n	8000720 <IIS2MDC_Init+0x18c>
		buffer8 |= Settings.OffsetCancellation << 4;
 800070a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	b25a      	sxtb	r2, r3
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e009      	b.n	8000734 <IIS2MDC_Init+0x1a0>
	} else {
		buffer8 |= Settings.OffsetCancellation << 1;
 8000720:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b25a      	sxtb	r2, r3
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	b25b      	sxtb	r3, r3
 800072c:	4313      	orrs	r3, r2
 800072e:	b25b      	sxtb	r3, r3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	73fb      	strb	r3, [r7, #15]
	}

	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_CFG_REG_B,&buffer8,1) != IIS2MDC_Ok){
 8000734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f107 010f 	add.w	r1, r7, #15
 800073c:	2201      	movs	r2, #1
 800073e:	2061      	movs	r0, #97	; 0x61
 8000740:	4798      	blx	r3
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <IIS2MDC_Init+0x1bc>
		_log(log_iis2mdc, "Initialization: Write CFG Reg B Failed.");
 8000748:	492c      	ldr	r1, [pc, #176]	; (80007fc <IIS2MDC_Init+0x268>)
 800074a:	2002      	movs	r0, #2
 800074c:	f000 fb58 	bl	8000e00 <_log>
	}

	/*CFG C*/
	buffer8 = (Settings.IntPinMode << 6) | (1 << 4) | (Settings.DrdyPinMode);
 8000750:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	b2da      	uxtb	r2, r3
 8000758:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800075c:	4313      	orrs	r3, r2
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	b2db      	uxtb	r3, r3
 8000766:	73fb      	strb	r3, [r7, #15]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_CFG_REG_C,&buffer8,1) != IIS2MDC_Ok){
 8000768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	f107 010f 	add.w	r1, r7, #15
 8000770:	2201      	movs	r2, #1
 8000772:	2062      	movs	r0, #98	; 0x62
 8000774:	4798      	blx	r3
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <IIS2MDC_Init+0x1f0>
		_log(log_iis2mdc, "Initialization: Write CFG Reg C Failed.");
 800077c:	4920      	ldr	r1, [pc, #128]	; (8000800 <IIS2MDC_Init+0x26c>)
 800077e:	2002      	movs	r0, #2
 8000780:	f000 fb3e 	bl	8000e00 <_log>
	}

	/*Int Source Reg*/
	buffer8 = Settings.IRQConfig;
 8000784:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000788:	73fb      	strb	r3, [r7, #15]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_INT_CTRL_REG,&buffer8,1) != IIS2MDC_Ok){
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f107 010f 	add.w	r1, r7, #15
 8000792:	2201      	movs	r2, #1
 8000794:	2063      	movs	r0, #99	; 0x63
 8000796:	4798      	blx	r3
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <IIS2MDC_Init+0x212>
		_log(log_iis2mdc, "Initialization: Write Int Ctrl Reg Failed.");
 800079e:	4919      	ldr	r1, [pc, #100]	; (8000804 <IIS2MDC_Init+0x270>)
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 fb2d 	bl	8000e00 <_log>
	}

	/*Clear Data acquired while initializing*/
	uint8_t buffer6bytes[6];
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_OUTX_L_REG,buffer6bytes,6) != IIS2MDC_Ok){
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	1d39      	adds	r1, r7, #4
 80007ac:	2206      	movs	r2, #6
 80007ae:	2068      	movs	r0, #104	; 0x68
 80007b0:	4798      	blx	r3
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d003      	beq.n	80007c0 <IIS2MDC_Init+0x22c>
		_log(log_iis2mdc, "Initialization: Reading Data Reg Failed.");
 80007b8:	4913      	ldr	r1, [pc, #76]	; (8000808 <IIS2MDC_Init+0x274>)
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 fb20 	bl	8000e00 <_log>
	}

	if(Settings.IntPinMode != IIS2MDC_IntSignalDisabled){
 80007c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <IIS2MDC_Init+0x23c>
		Dev->IIS2MDC_IO.ioctl(IIS2MDC_IRQEnable);
 80007c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	2000      	movs	r0, #0
 80007ce:	4798      	blx	r3
	}


}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007da:	b004      	add	sp, #16
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	08008478 	.word	0x08008478
 80007e4:	080084a4 	.word	0x080084a4
 80007e8:	080084c8 	.word	0x080084c8
 80007ec:	080084f0 	.word	0x080084f0
 80007f0:	08008518 	.word	0x08008518
 80007f4:	08008540 	.word	0x08008540
 80007f8:	0800856c 	.word	0x0800856c
 80007fc:	08008594 	.word	0x08008594
 8000800:	080085bc 	.word	0x080085bc
 8000804:	080085e4 	.word	0x080085e4
 8000808:	08008610 	.word	0x08008610

0800080c <IIS2MDC_ReadMagnetic>:
 *@Params: IIS2MDC Device Handle
 *@Return: Status of read attempt: IIS2MDC_DataNotReady if new data is not available, IIS2MDC_DataReady if data was read successfully
 *@Precondition: Device handle is initialized, StartConversion should be called prior to this in OneShot mode (otherwise the read wont be successful)
 *@Postcondition: Dev Handle will contain new data in Milligause. If data was read successfully, DataReadyFlag will be set to IIS2MDC_DataNotReady.
 **************************************//**************************************/
IIS2MDC_DataReadyStatus_t IIS2MDC_ReadMagnetic(IIS2MDC_Handle_t *Dev){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_STATUS_REG, buffer,1) != IIS2MDC_Ok){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f107 0108 	add.w	r1, r7, #8
 800081c:	2201      	movs	r2, #1
 800081e:	2067      	movs	r0, #103	; 0x67
 8000820:	4798      	blx	r3
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d005      	beq.n	8000834 <IIS2MDC_ReadMagnetic+0x28>
		_log(log_iis2mdc, "Reading Status Reg Failed.");
 8000828:	4917      	ldr	r1, [pc, #92]	; (8000888 <IIS2MDC_ReadMagnetic+0x7c>)
 800082a:	2002      	movs	r0, #2
 800082c:	f000 fae8 	bl	8000e00 <_log>
		return IIS2MDC_DataNotReady;
 8000830:	2301      	movs	r3, #1
 8000832:	e024      	b.n	800087e <IIS2MDC_ReadMagnetic+0x72>
	} else if ((buffer[0] & 0x07) != 0x07){
 8000834:	7a3b      	ldrb	r3, [r7, #8]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2b07      	cmp	r3, #7
 800083c:	d004      	beq.n	8000848 <IIS2MDC_ReadMagnetic+0x3c>
		Dev->DataReadyFlag = IIS2MDC_DataNotReady;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2201      	movs	r2, #1
 8000842:	751a      	strb	r2, [r3, #20]
		return IIS2MDC_DataNotReady;
 8000844:	2301      	movs	r3, #1
 8000846:	e01a      	b.n	800087e <IIS2MDC_ReadMagnetic+0x72>
	}

	Dev->DataReadyFlag = IIS2MDC_DataReady;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	751a      	strb	r2, [r3, #20]
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_OUTX_L_REG, buffer,6) != IIS2MDC_Ok){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f107 0108 	add.w	r1, r7, #8
 8000856:	2206      	movs	r2, #6
 8000858:	2068      	movs	r0, #104	; 0x68
 800085a:	4798      	blx	r3
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <IIS2MDC_ReadMagnetic+0x5e>
		_log(log_iis2mdc, "Reading Data Regs Failed.");
 8000862:	490a      	ldr	r1, [pc, #40]	; (800088c <IIS2MDC_ReadMagnetic+0x80>)
 8000864:	2002      	movs	r0, #2
 8000866:	f000 facb 	bl	8000e00 <_log>
	}
	Dev->DataReadyFlag = IIS2MDC_DataNotReady; //Data has been read, so reset data ready flag
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	751a      	strb	r2, [r3, #20]
	ConvertMagnetic(Dev, buffer);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4619      	mov	r1, r3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f80a 	bl	8000890 <ConvertMagnetic>

	return IIS2MDC_DataReady;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	08008680 	.word	0x08008680
 800088c:	0800869c 	.word	0x0800869c

08000890 <ConvertMagnetic>:
 *@Params: Device handle to store data in, buffer of raw sensor output data
 *@Return: None
 *@Precondition: Device handle is initialzed, pdata contains valid data
 *@Postcondition: Device Handle will contain new magnetism measurements in Milligause.
 **************************************//**************************************/
static void ConvertMagnetic(IIS2MDC_Handle_t *Dev, uint8_t *pdata){
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	int16_t MagX = ((int8_t)pdata[1] << 8) |  ((int8_t)pdata[0] << 0);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	81fb      	strh	r3, [r7, #14]
	int16_t MagY = ((int8_t)pdata[3] << 8) |  ((int8_t)pdata[2] << 0);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	3303      	adds	r3, #3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21a      	sxth	r2, r3
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3302      	adds	r3, #2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	81bb      	strh	r3, [r7, #12]
	int16_t MagZ = ((int8_t)pdata[5] << 8) |  ((int8_t)pdata[4] << 0);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3305      	adds	r3, #5
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3304      	adds	r3, #4
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	817b      	strh	r3, [r7, #10]
	Dev->MagX = (MagX * CALIBRATION_MATRIX_A11 + MagY * CALIBRATION_MATRIX_A12 + MagZ * CALIBRATION_MATRIX_A13);
 80008e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ea:	ee07 3a90 	vmov	s15, r3
 80008ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80009e8 <ConvertMagnetic+0x158>
 80008f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000906:	eddf 6a39 	vldr	s13, [pc, #228]	; 80009ec <ConvertMagnetic+0x15c>
 800090a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800090e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000912:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091e:	eddf 6a34 	vldr	s13, [pc, #208]	; 80009f0 <ConvertMagnetic+0x160>
 8000922:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800092e:	ee17 3a90 	vmov	r3, s15
 8000932:	b21a      	sxth	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	82da      	strh	r2, [r3, #22]
	Dev->MagY = (MagX * CALIBRATION_MATRIX_A21 + MagY * CALIBRATION_MATRIX_A22 + MagZ * CALIBRATION_MATRIX_A23);
 8000938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000944:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80009ec <ConvertMagnetic+0x15c>
 8000948:	ee27 7a87 	vmul.f32	s14, s15, s14
 800094c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000958:	eddf 6a26 	vldr	s13, [pc, #152]	; 80009f4 <ConvertMagnetic+0x164>
 800095c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000964:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000970:	eddf 6a21 	vldr	s13, [pc, #132]	; 80009f8 <ConvertMagnetic+0x168>
 8000974:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000980:	ee17 3a90 	vmov	r3, s15
 8000984:	b21a      	sxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	831a      	strh	r2, [r3, #24]
	Dev->MagZ = (MagX * CALIBRATION_MATRIX_A31 + MagY * CALIBRATION_MATRIX_A32 + MagZ * CALIBRATION_MATRIX_A33);
 800098a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80009f0 <ConvertMagnetic+0x160>
 800099a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009aa:	eddf 6a13 	vldr	s13, [pc, #76]	; 80009f8 <ConvertMagnetic+0x168>
 80009ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ba:	ee07 3a90 	vmov	s15, r3
 80009be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80009fc <ConvertMagnetic+0x16c>
 80009c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d2:	ee17 3a90 	vmov	r3, s15
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	835a      	strh	r2, [r3, #26]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	3f9a615b 	.word	0x3f9a615b
 80009ec:	3cdb24ea 	.word	0x3cdb24ea
 80009f0:	3abbf50e 	.word	0x3abbf50e
 80009f4:	3fa285fd 	.word	0x3fa285fd
 80009f8:	3c7f4ba5 	.word	0x3c7f4ba5
 80009fc:	3fbd34bd 	.word	0x3fbd34bd

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db12      	blt.n	8000a74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	490a      	ldr	r1, [pc, #40]	; (8000a80 <__NVIC_DisableIRQ+0x44>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	3320      	adds	r3, #32
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a68:	f3bf 8f4f 	dsb	sy
}
 8000a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6e:	f3bf 8f6f 	isb	sy
}
 8000a72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <IIS2MDC_Init>:
/**************************************//**************************************//**************************************
 * Private Function Definitions
 **************************************//**************************************//**************************************/

/*Initializes low level IO*/
static void IIS2MDC_Init(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_Delay(20); //Device takes 20 ms to boot.
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f000 fd7d 	bl	8001588 <HAL_Delay>
	IIS2MDC_GPIO_Init();
 8000a8e:	f000 f89d 	bl	8000bcc <IIS2MDC_GPIO_Init>
	MX_I2C2_Init();
 8000a92:	f000 f8e3 	bl	8000c5c <MX_I2C2_Init>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <IIS2MDC_DeInit>:

/*DeInitializes low level IO.*/
static void IIS2MDC_DeInit(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	//Do Not De-Init I2C Peripheral as other devices may be using it.
	HAL_GPIO_DeInit(IIS2MDC_IRQ_GPIO_Port, IIS2MDC_IRQ_Pin);
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <IIS2MDC_DeInit+0x14>)
 8000aa6:	f001 f87b 	bl	8001ba0 <HAL_GPIO_DeInit>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	42020c00 	.word	0x42020c00

08000ab4 <IIS2MDC_WriteReg>:

/*Sends data to register over I2C2 Bus*/
static IIS2MDC_Status_t IIS2MDC_WriteReg(uint8_t reg, uint8_t *pdata, uint8_t length){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, pdata , length, IIS2MDC_TIMEOUT_MS) != HAL_OK){
 8000ac4:	233c      	movs	r3, #60	; 0x3c
 8000ac6:	b299      	uxth	r1, r3
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad4:	9002      	str	r0, [sp, #8]
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <IIS2MDC_WriteReg+0x50>)
 8000ae0:	f001 fa14 	bl	8001f0c <HAL_I2C_Mem_Write>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <IIS2MDC_WriteReg+0x46>
		_log(log_i2c,"Write to IIS2MDC Reg address %x failed.",reg);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4906      	ldr	r1, [pc, #24]	; (8000b08 <IIS2MDC_WriteReg+0x54>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 f985 	bl	8000e00 <_log>
		return IIS2MDC_Error;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <IIS2MDC_WriteReg+0x48>
	}
	return IIS2MDC_Ok;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	080086f8 	.word	0x080086f8

08000b0c <IIS2MDC_ReadReg>:

/*Reads data from register over I2C2 Bus*/
static IIS2MDC_Status_t IIS2MDC_ReadReg(uint8_t reg, uint8_t *pdata, uint8_t length){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_DEVICE_ADDRESS | 0x01, reg, I2C_MEMADD_SIZE_8BIT, pdata , length, IIS2MDC_TIMEOUT_MS) != HAL_OK){
 8000b1c:	233c      	movs	r3, #60	; 0x3c
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b299      	uxth	r1, r3
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	9002      	str	r0, [sp, #8]
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <IIS2MDC_ReadReg+0x58>)
 8000b3e:	f001 faf9 	bl	8002134 <HAL_I2C_Mem_Read>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d007      	beq.n	8000b58 <IIS2MDC_ReadReg+0x4c>
		_log(log_i2c,"Read from IIS2MDC Reg address %x failed.",reg);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <IIS2MDC_ReadReg+0x5c>)
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 f956 	bl	8000e00 <_log>
		return IIS2MDC_Error;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <IIS2MDC_ReadReg+0x4e>
	}
	return IIS2MDC_Ok;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	08008720 	.word	0x08008720

08000b6c <IIS2MDC_ioctl>:

/*Performs any other needed functions for the driver.*/
static uint8_t IIS2MDC_ioctl(IIS2MDC_Cmd_t command){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	uint8_t PinStatus;
	switch(command){
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d010      	beq.n	8000b9e <IIS2MDC_ioctl+0x32>
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	dc1c      	bgt.n	8000bba <IIS2MDC_ioctl+0x4e>
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <IIS2MDC_ioctl+0x1e>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d005      	beq.n	8000b94 <IIS2MDC_ioctl+0x28>
			return 1;
		} else {
			return 0;
		}
	default:
		break;
 8000b88:	e017      	b.n	8000bba <IIS2MDC_ioctl+0x4e>
		NVIC_EnableIRQ(IIS2MDC_IRQ_EXTI_IRQn);
 8000b8a:	2015      	movs	r0, #21
 8000b8c:	f7ff ff38 	bl	8000a00 <__NVIC_EnableIRQ>
		return IIS2MDC_Ok;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e014      	b.n	8000bbe <IIS2MDC_ioctl+0x52>
		NVIC_DisableIRQ(IIS2MDC_IRQ_EXTI_IRQn);
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff ff51 	bl	8000a3c <__NVIC_DisableIRQ>
		return IIS2MDC_Ok;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e00f      	b.n	8000bbe <IIS2MDC_ioctl+0x52>
		PinStatus = HAL_GPIO_ReadPin(IIS2MDC_IRQ_GPIO_Port, IIS2MDC_IRQ_Pin);
 8000b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <IIS2MDC_ioctl+0x5c>)
 8000ba4:	f001 f8da 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
		if(PinStatus == GPIO_PIN_SET){
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <IIS2MDC_ioctl+0x4a>
			return 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e003      	b.n	8000bbe <IIS2MDC_ioctl+0x52>
			return 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e001      	b.n	8000bbe <IIS2MDC_ioctl+0x52>
		break;
 8000bba:	bf00      	nop

	}
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	42020c00 	.word	0x42020c00

08000bcc <IIS2MDC_GPIO_Init>:
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);

}

/* USER CODE BEGIN 2 */
void IIS2MDC_GPIO_Init(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <IIS2MDC_GPIO_Init+0x84>)
 8000be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <IIS2MDC_GPIO_Init+0x84>)
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <IIS2MDC_GPIO_Init+0x84>)
 8000bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <IIS2MDC_GPIO_Init+0x84>)
 8000c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <IIS2MDC_GPIO_Init+0x84>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <IIS2MDC_GPIO_Init+0x84>)
 8000c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = IIS2MDC_IRQ_Pin;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <IIS2MDC_GPIO_Init+0x88>)
 8000c26:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(IIS2MDC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <IIS2MDC_GPIO_Init+0x8c>)
 8000c34:	f000 fddc 	bl	80017f0 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2015      	movs	r0, #21
 8000c3e:	f000 fda2 	bl	8001786 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000c42:	2015      	movs	r0, #21
 8000c44:	f000 fdb9 	bl	80017ba <HAL_NVIC_EnableIRQ>
}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	46020c00 	.word	0x46020c00
 8000c54:	10110000 	.word	0x10110000
 8000c58:	42020c00 	.word	0x42020c00

08000c5c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <MX_I2C2_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <MX_I2C2_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c98:	f001 f8a9 	bl	8001dee <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 f9d1 	bl	8001048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000caa:	f001 fe03 	bl	80028b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 f9c8 	bl	8001048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000cbc:	f001 fe45 	bl	800294a <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 f9bf 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000a0 	.word	0x200000a0
 8000cd4:	40005800 	.word	0x40005800
 8000cd8:	30909dec 	.word	0x30909dec

08000cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0bc      	sub	sp, #240	; 0xf0
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	22c8      	movs	r2, #200	; 0xc8
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f006 fba3 	bl	8007448 <memset>
  if(i2cHandle->Instance==I2C2)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_I2C_MspInit+0xc4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d144      	bne.n	8000d96 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d0c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 f9cd 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000d2c:	f000 f98c 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_I2C_MspInit+0xc8>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d36:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_I2C_MspInit+0xc8>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_I2C_MspInit+0xc8>)
 8000d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 8000d4e:	2330      	movs	r3, #48	; 0x30
 8000d50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d66:	2304      	movs	r3, #4
 8000d68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d70:	4619      	mov	r1, r3
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <HAL_I2C_MspInit+0xcc>)
 8000d74:	f000 fd3c 	bl	80017f0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_I2C_MspInit+0xc8>)
 8000d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <HAL_I2C_MspInit+0xc8>)
 8000d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d84:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_I2C_MspInit+0xc8>)
 8000d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	37f0      	adds	r7, #240	; 0xf0
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005800 	.word	0x40005800
 8000da4:	46020c00 	.word	0x46020c00
 8000da8:	42021c00 	.word	0x42021c00

08000dac <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000db0:	2000      	movs	r0, #0
 8000db2:	f001 fe17 	bl	80029e4 <HAL_ICACHE_ConfigAssociativityMode>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000dbc:	f000 f944 	bl	8001048 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000dc0:	f001 fe30 	bl	8002a24 <HAL_ICACHE_Enable>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000dca:	f000 f93d 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <__io_putchar>:
#include "stm32u5xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8000de2:	f107 010f 	add.w	r1, r7, #15
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	2201      	movs	r2, #1
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <__io_putchar+0x28>)
 8000dee:	f005 fe01 	bl	80069f4 <HAL_UART_Transmit>
	return ch;
 8000df2:	687b      	ldr	r3, [r7, #4]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000187c 	.word	0x2000187c

08000e00 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8000e00:	b40e      	push	{r1, r2, r3}
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d00e      	beq.n	8000e36 <_log+0x36>
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	dc10      	bgt.n	8000e3e <_log+0x3e>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <_log+0x26>
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d004      	beq.n	8000e2e <_log+0x2e>
 8000e24:	e00b      	b.n	8000e3e <_log+0x3e>
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 8000e26:	4810      	ldr	r0, [pc, #64]	; (8000e68 <_log+0x68>)
 8000e28:	f006 fe10 	bl	8007a4c <iprintf>
				break;
 8000e2c:	e00a      	b.n	8000e44 <_log+0x44>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <_log+0x6c>)
 8000e30:	f006 fe0c 	bl	8007a4c <iprintf>
				break;
 8000e34:	e006      	b.n	8000e44 <_log+0x44>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <_log+0x70>)
 8000e38:	f006 fe08 	bl	8007a4c <iprintf>
				break;
 8000e3c:	e002      	b.n	8000e44 <_log+0x44>
		default:
			printf("Unknown Debug Subsystem: ");
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <_log+0x74>)
 8000e40:	f006 fe04 	bl	8007a4c <iprintf>
	}
	vfprintf(stdout, msg, args);
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <_log+0x78>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	69f9      	ldr	r1, [r7, #28]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 fc5c 	bl	800770c <vfiprintf>
	printf("\n");
 8000e54:	200a      	movs	r0, #10
 8000e56:	f006 fe11 	bl	8007a7c <putchar>
	va_end(args);
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e64:	b003      	add	sp, #12
 8000e66:	4770      	bx	lr
 8000e68:	0800874c 	.word	0x0800874c
 8000e6c:	08008764 	.word	0x08008764
 8000e70:	08008780 	.word	0x08008780
 8000e74:	0800879c 	.word	0x0800879c
 8000e78:	20000020 	.word	0x20000020

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fafd 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f857 	bl	8000f38 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000e8a:	f000 f8af 	bl	8000fec <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 8000e8e:	f7ff ff8d 	bl	8000dac <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 8000e92:	f000 fa17 	bl	80012c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SensorInit();
 8000e96:	f000 f8af 	bl	8000ff8 <SensorInit>
  uint32_t stop_time = HAL_GetTick() + 5000;
 8000e9a:	f000 fb69 	bl	8001570 <HAL_GetTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	607b      	str	r3, [r7, #4]
  uint16_t samples = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	81fb      	strh	r3, [r7, #14]
  uint32_t profiler = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(HAL_GetTick() < stop_time){
 8000eb0:	e030      	b.n	8000f14 <main+0x98>
		  if(Sensor.DataReadyFlag == IIS2MDC_DataReady){
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <main+0xac>)
 8000eb4:	7d1b      	ldrb	r3, [r3, #20]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d12c      	bne.n	8000f14 <main+0x98>
			  IIS2MDC_ReadMagnetic(&Sensor);
 8000eba:	481b      	ldr	r0, [pc, #108]	; (8000f28 <main+0xac>)
 8000ebc:	f7ff fca6 	bl	800080c <IIS2MDC_ReadMagnetic>
			  MagXLog[samples] = Sensor.MagX;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0xac>)
 8000ec2:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	ee07 2a90 	vmov	s15, r2
 8000ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed0:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <main+0xb0>)
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	edc3 7a00 	vstr	s15, [r3]
			  MagYLog[samples] = Sensor.MagY;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <main+0xac>)
 8000edc:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	ee07 2a90 	vmov	s15, r2
 8000ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <main+0xb4>)
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	edc3 7a00 	vstr	s15, [r3]
			  MagZLog[samples] = Sensor.MagZ;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <main+0xac>)
 8000ef6:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	ee07 2a90 	vmov	s15, r2
 8000f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <main+0xb8>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	edc3 7a00 	vstr	s15, [r3]
			  samples++;
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	3301      	adds	r3, #1
 8000f12:	81fb      	strh	r3, [r7, #14]
	  while(HAL_GetTick() < stop_time){
 8000f14:	f000 fb2c 	bl	8001570 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d8c8      	bhi.n	8000eb2 <main+0x36>
		  }
	  }
	  profiler++;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
	  while(HAL_GetTick() < stop_time){
 8000f26:	e7f5      	b.n	8000f14 <main+0x98>
 8000f28:	200000ec 	.word	0x200000ec
 8000f2c:	20000108 	.word	0x20000108
 8000f30:	200008d8 	.word	0x200008d8
 8000f34:	200010a8 	.word	0x200010a8

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09e      	sub	sp, #120	; 0x78
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2260      	movs	r2, #96	; 0x60
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fa7e 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000f60:	f001 fd70 	bl	8002a44 <HAL_PWREx_ControlVoltageScaling>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000f6a:	f000 f86d 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fddd 	bl	8002b68 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fb4:	f000 f848 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	231f      	movs	r3, #31
 8000fba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fc9d 	bl	8003914 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fe0:	f000 f832 	bl	8001048 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3778      	adds	r7, #120	; 0x78
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ff0:	f001 fdaa 	bl	8002b48 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <SensorInit>:

/* USER CODE BEGIN 4 */
void SensorInit(){
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af08      	add	r7, sp, #32
	IIS2MDC_InitStruct_t InitSettings = {
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	2301      	movs	r3, #1
 800100e:	73bb      	strb	r3, [r7, #14]
 8001010:	2301      	movs	r3, #1
 8001012:	74fb      	strb	r3, [r7, #19]
 8001014:	2301      	movs	r3, #1
 8001016:	753b      	strb	r3, [r7, #20]
			.Offset_X = 0,
			.Offset_Y = 0,
			.Offset_Z = 0
	};

	IIS2MDC_Init(InitSettings, &Sensor, IIS2MDC_Hardware_Drv);
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <SensorInit+0x48>)
 800101a:	ac02      	add	r4, sp, #8
 800101c:	461d      	mov	r5, r3
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	682b      	ldr	r3, [r5, #0]
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <SensorInit+0x4c>)
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001032:	f7ff faaf 	bl	8000594 <IIS2MDC_Init>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000
 8001044:	200000ec 	.word	0x200000ec

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_MspInit+0x30>)
 800105c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001060:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x30>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x30>)
 800106c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	46020c00 	.word	0x46020c00

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 fa38 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IIS2MDC_IRQ_Pin);
 80010e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010e4:	f000 fe52 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	Sensor.DataReadyFlag = IIS2MDC_DataReady;
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	200000ec 	.word	0x200000ec

0800110c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e00a      	b.n	8001134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800111e:	e000      	b.n	8001122 <_read+0x16>
 8001120:	bf00      	nop
 8001122:	4601      	mov	r1, r0
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	b2ca      	uxtb	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf0      	blt.n	800111e <_read+0x12>
	}

return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e009      	b.n	800116c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe37 	bl	8000dd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf1      	blt.n	8001158 <_write+0x12>
	}
	return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_close>:

int _close(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
	return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_isatty>:

int _isatty(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f006 f8ec 	bl	80073f4 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200c0000 	.word	0x200c0000
 8001248:	00000400 	.word	0x00000400
 800124c:	20001878 	.word	0x20001878
 8001250:	20001920 	.word	0x20001920

08001254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <SystemInit+0x68>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <SystemInit+0x68>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <SystemInit+0x6c>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <SystemInit+0x6c>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <SystemInit+0x6c>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <SystemInit+0x6c>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <SystemInit+0x6c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <SystemInit+0x6c>)
 8001286:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800128a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <SystemInit+0x6c>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <SystemInit+0x6c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <SystemInit+0x6c>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <SystemInit+0x6c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SystemInit+0x68>)
 80012aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ae:	609a      	str	r2, [r3, #8]
  #endif
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	46020c00 	.word	0x46020c00

080012c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <MX_USART1_UART_Init+0x94>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_USART1_UART_Init+0x90>)
 800130e:	f005 fb21 	bl	8006954 <HAL_UART_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001318:	f7ff fe96 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001320:	f005 ff9e 	bl	8007260 <HAL_UARTEx_SetTxFifoThreshold>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800132a:	f7ff fe8d 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001332:	f005 ffd3 	bl	80072dc <HAL_UARTEx_SetRxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800133c:	f7ff fe84 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001342:	f005 ff54 	bl	80071ee <HAL_UARTEx_DisableFifoMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800134c:	f7ff fe7c 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000187c 	.word	0x2000187c
 8001358:	40013800 	.word	0x40013800

0800135c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0bc      	sub	sp, #240	; 0xf0
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	22c8      	movs	r2, #200	; 0xc8
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f006 f863 	bl	8007448 <memset>
  if(uartHandle->Instance==USART1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <HAL_UART_MspInit+0xc4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d145      	bne.n	8001418 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800138c:	f04f 0201 	mov.w	r2, #1
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001398:	2300      	movs	r3, #0
 800139a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fe8d 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80013ac:	f7ff fe4c 	bl	8001048 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_UART_MspInit+0xc8>)
 80013b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013b6:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_UART_MspInit+0xc8>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_UART_MspInit+0xc8>)
 80013c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_UART_MspInit+0xc8>)
 80013d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_UART_MspInit+0xc8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_UART_MspInit+0xc8>)
 80013e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_RX_Pin|DEBUG_USART_TX_Pin;
 80013ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001406:	2307      	movs	r3, #7
 8001408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_UART_MspInit+0xcc>)
 8001414:	f000 f9ec 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	37f0      	adds	r7, #240	; 0xf0
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013800 	.word	0x40013800
 8001424:	46020c00 	.word	0x46020c00
 8001428:	42020000 	.word	0x42020000

0800142c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001430:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001432:	e003      	b.n	800143c <LoopCopyDataInit>

08001434 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001436:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001438:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800143a:	3104      	adds	r1, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <LoopForever+0xa>)
	ldr	r3, =_edata
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001440:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001442:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001444:	d3f6      	bcc.n	8001434 <CopyDataInit>
	ldr	r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001448:	e002      	b.n	8001450 <LoopFillZerobss>

0800144a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800144a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800144c:	f842 3b04 	str.w	r3, [r2], #4

08001450 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <LoopForever+0x16>)
	cmp	r2, r3
 8001452:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001454:	d3f9      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001456:	f7ff fefd 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f005 ffd1 	bl	8007400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145e:	f7ff fd0d 	bl	8000e7c <main>

08001462 <LoopForever>:

LoopForever:
    b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001464:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001468:	08008960 	.word	0x08008960
	ldr	r0, =_sdata
 800146c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001470:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001474:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001478:	20001920 	.word	0x20001920

0800147c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_IRQHandler>
	...

08001480 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_Init+0x4c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_Init+0x4c>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f96d 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001496:	f002 fc2f 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 800149a:	4602      	mov	r2, r0
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_Init+0x50>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	490b      	ldr	r1, [pc, #44]	; (80014d4 <HAL_Init+0x54>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_Init+0x58>)
 80014ae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b0:	200f      	movs	r0, #15
 80014b2:	f000 f813 	bl	80014dc <HAL_InitTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e002      	b.n	80014c6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fdc8 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000
 80014d0:	46020c00 	.word	0x46020c00
 80014d4:	080087b8 	.word	0x080087b8
 80014d8:	20000014 	.word	0x20000014

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e021      	b.n	8001534 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_InitTick+0x64>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_InitTick+0x60>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f965 	bl	80017d6 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f92f 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x68>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000001c 	.word	0x2000001c
 8001540:	20000014 	.word	0x20000014
 8001544:	20000018 	.word	0x20000018

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000001c 	.word	0x2000001c
 800156c:	2000190c 	.word	0x2000190c

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2000190c 	.word	0x2000190c

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000001c 	.word	0x2000001c

080015d0 <__NVIC_SetPriorityGrouping>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff29 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff40 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff33 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa4 	bl	800172c <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001802:	e1ba      	b.n	8001b7a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 81aa 	beq.w	8001b74 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a55      	ldr	r2, [pc, #340]	; (8001978 <HAL_GPIO_Init+0x188>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d15d      	bne.n	80018e4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800182e:	2201      	movs	r2, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	4013      	ands	r3, r2
 800183c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0201 	and.w	r2, r3, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	4313      	orrs	r3, r2
 8001850:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x18c>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001860:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001862:	4a46      	ldr	r2, [pc, #280]	; (800197c <HAL_GPIO_Init+0x18c>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	3208      	adds	r2, #8
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	4013      	ands	r3, r2
 8001890:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220b      	movs	r2, #11
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	3208      	adds	r2, #8
 80018ae:	69f9      	ldr	r1, [r7, #28]
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2202      	movs	r2, #2
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e067      	b.n	80019b4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x104>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d145      	bne.n	8001980 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	4313      	orrs	r3, r2
 8001930:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69f9      	ldr	r1, [r7, #28]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	4313      	orrs	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e01e      	b.n	80019b4 <HAL_GPIO_Init+0x1c4>
 8001976:	bf00      	nop
 8001978:	46020000 	.word	0x46020000
 800197c:	08008810 	.word	0x08008810
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4013      	ands	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d00b      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c8:	2b11      	cmp	r3, #17
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b12      	cmp	r3, #18
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d017      	beq.n	8001a6e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d07c      	beq.n	8001b74 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001a7a:	4a47      	ldr	r2, [pc, #284]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3318      	adds	r3, #24
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0a9a      	lsrs	r2, r3, #10
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <HAL_GPIO_Init+0x3ac>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	00d2      	lsls	r2, r2, #3
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ab6:	4938      	ldr	r1, [pc, #224]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3318      	adds	r3, #24
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001b12:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_GPIO_Init+0x3a8>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f47f ae3d 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3724      	adds	r7, #36	; 0x24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	46022000 	.word	0x46022000
 8001b9c:	002f7f7f 	.word	0x002f7f7f

08001ba0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001bb2:	e0bc      	b.n	8001d2e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80ad 	beq.w	8001d28 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a5e      	ldr	r2, [pc, #376]	; (8001d4c <HAL_GPIO_DeInit+0x1ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d115      	bne.n	8001c02 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8001bd6:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <HAL_GPIO_DeInit+0x1b0>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bde:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001be0:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_GPIO_DeInit+0x1b0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_GPIO_DeInit+0x1ac>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4954      	ldr	r1, [pc, #336]	; (8001d4c <HAL_GPIO_DeInit+0x1ac>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e053      	b.n	8001caa <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8001c02:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3318      	adds	r3, #24
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0a9a      	lsrs	r2, r3, #10
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_GPIO_DeInit+0x1b8>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	4093      	lsls	r3, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d136      	bne.n	8001caa <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4943      	ldr	r1, [pc, #268]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c50:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	493e      	ldr	r1, [pc, #248]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8001c60:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	493a      	ldr	r1, [pc, #232]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3318      	adds	r3, #24
 8001c94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	482d      	ldr	r0, [pc, #180]	; (8001d54 <HAL_GPIO_DeInit+0x1b4>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	08d2      	lsrs	r2, r2, #3
 8001cde:	4019      	ands	r1, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	2101      	movs	r1, #1
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f47f af3c 	bne.w	8001bb4 <HAL_GPIO_DeInit+0x14>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	46020000 	.word	0x46020000
 8001d50:	08008810 	.word	0x08008810
 8001d54:	46022000 	.word	0x46022000
 8001d58:	002f7f7f 	.word	0x002f7f7f

08001d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f99e 	bl	80010ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001dbc:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f807 	bl	8001dd8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	46022000 	.word	0x46022000

08001dd8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e081      	b.n	8001f04 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7fe ff61 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2224      	movs	r2, #36	; 0x24
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	e006      	b.n	8001e76 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d104      	bne.n	8001e88 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69d9      	ldr	r1, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	817b      	strh	r3, [r7, #10]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	813b      	strh	r3, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	f040 80f9 	bne.w	8002126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x34>
 8001f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0ed      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Mem_Write+0x4e>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e0e6      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f62:	f7ff fb05 	bl	8001570 <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2319      	movs	r3, #25
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fac3 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d1      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2221      	movs	r2, #33	; 0x21
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a3a      	ldr	r2, [r7, #32]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fac:	88f8      	ldrh	r0, [r7, #6]
 8001fae:	893a      	ldrh	r2, [r7, #8]
 8001fb0:	8979      	ldrh	r1, [r7, #10]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4603      	mov	r3, r0
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f9d3 	bl	8002368 <I2C_RequestMemoryWrite>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0a9      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2bff      	cmp	r3, #255	; 0xff
 8001fdc:	d90e      	bls.n	8001ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	22ff      	movs	r2, #255	; 0xff
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	8979      	ldrh	r1, [r7, #10]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fc2b 	bl	8002850 <I2C_TransferConfig>
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	2300      	movs	r3, #0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fc1a 	bl	8002850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 faad 	bl	8002580 <I2C_WaitOnTXISFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e07b      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d034      	beq.n	80020d4 <HAL_I2C_Mem_Write+0x1c8>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d130      	bne.n	80020d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	2200      	movs	r2, #0
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fa3f 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e04d      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d90e      	bls.n	80020b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	22ff      	movs	r2, #255	; 0xff
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	8979      	ldrh	r1, [r7, #10]
 80020a4:	2300      	movs	r3, #0
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fbcf 	bl	8002850 <I2C_TransferConfig>
 80020b2:	e00f      	b.n	80020d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	2300      	movs	r3, #0
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fbbe 	bl	8002850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d19e      	bne.n	800201c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fa8c 	bl	8002600 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e01a      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2220      	movs	r2, #32
 80020f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_I2C_Mem_Write+0x224>)
 8002106:	400b      	ands	r3, r1
 8002108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	fe00e800 	.word	0xfe00e800

08002134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4603      	mov	r3, r0
 8002144:	817b      	strh	r3, [r7, #10]
 8002146:	460b      	mov	r3, r1
 8002148:	813b      	strh	r3, [r7, #8]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	f040 80fd 	bne.w	8002356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_I2C_Mem_Read+0x34>
 8002162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0f1      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_I2C_Mem_Read+0x4e>
 800217e:	2302      	movs	r3, #2
 8002180:	e0ea      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800218a:	f7ff f9f1 	bl	8001570 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2319      	movs	r3, #25
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f9af 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d5      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2222      	movs	r2, #34	; 0x22
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d4:	88f8      	ldrh	r0, [r7, #6]
 80021d6:	893a      	ldrh	r2, [r7, #8]
 80021d8:	8979      	ldrh	r1, [r7, #10]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4603      	mov	r3, r0
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f913 	bl	8002410 <I2C_RequestMemoryRead>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0ad      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d90e      	bls.n	8002224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	b2da      	uxtb	r2, r3
 8002212:	8979      	ldrh	r1, [r7, #10]
 8002214:	4b52      	ldr	r3, [pc, #328]	; (8002360 <HAL_I2C_Mem_Read+0x22c>)
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fb17 	bl	8002850 <I2C_TransferConfig>
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	b2da      	uxtb	r2, r3
 8002234:	8979      	ldrh	r1, [r7, #10]
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_I2C_Mem_Read+0x22c>)
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fb06 	bl	8002850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	2200      	movs	r2, #0
 800224c:	2104      	movs	r1, #4
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f956 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e07c      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d034      	beq.n	8002304 <HAL_I2C_Mem_Read+0x1d0>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d130      	bne.n	8002304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f927 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e04d      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d90e      	bls.n	80022e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	8979      	ldrh	r1, [r7, #10]
 80022d4:	2300      	movs	r3, #0
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fab7 	bl	8002850 <I2C_TransferConfig>
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	8979      	ldrh	r1, [r7, #10]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 faa6 	bl	8002850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d19a      	bne.n	8002244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f974 	bl	8002600 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e01a      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2220      	movs	r2, #32
 8002328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_I2C_Mem_Read+0x230>)
 8002336:	400b      	ands	r3, r1
 8002338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	80002400 	.word	0x80002400
 8002364:	fe00e800 	.word	0xfe00e800

08002368 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <I2C_RequestMemoryWrite+0xa4>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fa5d 	bl	8002850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8f0 	bl	8002580 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02c      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
 80023ba:	e015      	b.n	80023e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	69b9      	ldr	r1, [r7, #24]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8d6 	bl	8002580 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e012      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2200      	movs	r2, #0
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f884 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	80002000 	.word	0x80002000

08002410 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <I2C_RequestMemoryRead+0xa4>)
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fa0a 	bl	8002850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f89d 	bl	8002580 <I2C_WaitOnTXISFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e02c      	b.n	80024aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
 8002460:	e015      	b.n	800248e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002462:	893b      	ldrh	r3, [r7, #8]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b29b      	uxth	r3, r3
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f883 	bl	8002580 <I2C_WaitOnTXISFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e012      	b.n	80024aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002484:	893b      	ldrh	r3, [r7, #8]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2200      	movs	r2, #0
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f831 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	80002000 	.word	0x80002000

080024b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d103      	bne.n	80024d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d007      	beq.n	80024f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	619a      	str	r2, [r3, #24]
  }
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002510:	e022      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d01e      	beq.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7ff f829 	bl	8001570 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e00f      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d0cd      	beq.n	8002512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800258c:	e02c      	b.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f870 	bl	8002678 <I2C_IsErrorOccurred>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e02a      	b.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d01e      	beq.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7fe ffe1 	bl	8001570 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d113      	bne.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e007      	b.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d1cb      	bne.n	800258e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260c:	e028      	b.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f830 	bl	8002678 <I2C_IsErrorOccurred>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e026      	b.n	8002670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7fe ffa5 	bl	8001570 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d113      	bne.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b20      	cmp	r3, #32
 800266c:	d1cf      	bne.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d075      	beq.n	8002790 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2210      	movs	r2, #16
 80026aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ac:	e056      	b.n	800275c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d052      	beq.n	800275c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7fe ff5b 	bl	8001570 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_IsErrorOccurred+0x54>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d147      	bne.n	800275c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	d12e      	bne.n	800274e <I2C_IsErrorOccurred+0xd6>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f6:	d02a      	beq.n	800274e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d027      	beq.n	800274e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800270e:	f7fe ff2f 	bl	8001570 <HAL_GetTick>
 8002712:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002714:	e01b      	b.n	800274e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002716:	f7fe ff2b 	bl	8001570 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b19      	cmp	r3, #25
 8002722:	d914      	bls.n	800274e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d1dc      	bne.n	8002716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b20      	cmp	r3, #32
 8002768:	d003      	beq.n	8002772 <I2C_IsErrorOccurred+0xfa>
 800276a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276e:	2b00      	cmp	r3, #0
 8002770:	d09d      	beq.n	80026ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2220      	movs	r2, #32
 8002780:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01c      	beq.n	8002840 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fe56 	bl	80024b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <I2C_IsErrorOccurred+0x1d4>)
 8002818:	400b      	ands	r3, r1
 800281a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002844:	4618      	mov	r0, r3
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	4613      	mov	r3, r2
 8002860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002868:	7a7b      	ldrb	r3, [r7, #9]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <I2C_TransferConfig+0x60>)
 8002890:	430b      	orrs	r3, r1
 8002892:	43db      	mvns	r3, r3
 8002894:	ea02 0103 	and.w	r1, r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	03ff63ff 	.word	0x03ff63ff

080028b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d138      	bne.n	800293c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e032      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d139      	bne.n	80029d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800296a:	2302      	movs	r3, #2
 800296c:	e033      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	; 0x24
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800299c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e007      	b.n	8002a12 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0204 	bic.w	r2, r3, #4
 8002a0a:	4905      	ldr	r1, [pc, #20]	; (8002a20 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40030400 	.word	0x40030400

08002a24 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_ICACHE_Enable+0x1c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_ICACHE_Enable+0x1c>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40030400 	.word	0x40030400

08002a44 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a54:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d101      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e057      	b.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d90a      	bls.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	60d3      	str	r3, [r2, #12]
 8002a7e:	e007      	b.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a88:	4925      	ldr	r1, [pc, #148]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	2232      	movs	r2, #50	; 0x32
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002aae:	e002      	b.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x84>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f3      	bne.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01b      	beq.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	2232      	movs	r2, #50	; 0x32
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002aec:	e002      	b.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f3      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e000      	b.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	46020800 	.word	0x46020800
 8002b24:	20000014 	.word	0x20000014
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	46020800 	.word	0x46020800

08002b48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	46020800 	.word	0x46020800

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08e      	sub	sp, #56	; 0x38
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f000 bec3 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b9c      	ldr	r3, [pc, #624]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8c:	4b99      	ldr	r3, [pc, #612]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8172 	beq.w	8002e88 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_RCC_OscConfig+0x52>
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	f040 80e4 	bne.w	8002d7a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 80e0 	bne.w	8002d7a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bba:	4b8e      	ldr	r3, [pc, #568]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x6c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f000 be9a 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	4b86      	ldr	r3, [pc, #536]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_RCC_OscConfig+0x86>
 8002be4:	4b83      	ldr	r3, [pc, #524]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002bec:	e005      	b.n	8002bfa <HAL_RCC_OscConfig+0x92>
 8002bee:	4b81      	ldr	r3, [pc, #516]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d255      	bcs.n	8002caa <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 f9d3 	bl	8003fb4 <RCC_SetFlashLatencyFromMSIRange>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f000 be77 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c24:	6093      	str	r3, [r2, #8]
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	4970      	ldr	r1, [pc, #448]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002c40:	d309      	bcc.n	8002c56 <HAL_RCC_OscConfig+0xee>
 8002c42:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f023 021f 	bic.w	r2, r3, #31
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4969      	ldr	r1, [pc, #420]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60cb      	str	r3, [r1, #12]
 8002c54:	e07e      	b.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da0a      	bge.n	8002c74 <HAL_RCC_OscConfig+0x10c>
 8002c5e:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	015b      	lsls	r3, r3, #5
 8002c6c:	4961      	ldr	r1, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
 8002c72:	e06f      	b.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d30a      	bcc.n	8002c94 <HAL_RCC_OscConfig+0x12c>
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	4959      	ldr	r1, [pc, #356]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
 8002c92:	e05f      	b.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
 8002c94:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	03db      	lsls	r3, r3, #15
 8002ca2:	4954      	ldr	r1, [pc, #336]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002caa:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb4:	6093      	str	r3, [r2, #8]
 8002cb6:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	494c      	ldr	r1, [pc, #304]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002cd0:	d309      	bcc.n	8002ce6 <HAL_RCC_OscConfig+0x17e>
 8002cd2:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f023 021f 	bic.w	r2, r3, #31
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4945      	ldr	r1, [pc, #276]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
 8002ce4:	e028      	b.n	8002d38 <HAL_RCC_OscConfig+0x1d0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0a      	bge.n	8002d04 <HAL_RCC_OscConfig+0x19c>
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	015b      	lsls	r3, r3, #5
 8002cfc:	493d      	ldr	r1, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60cb      	str	r3, [r1, #12]
 8002d02:	e019      	b.n	8002d38 <HAL_RCC_OscConfig+0x1d0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0c:	d30a      	bcc.n	8002d24 <HAL_RCC_OscConfig+0x1bc>
 8002d0e:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4935      	ldr	r1, [pc, #212]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
 8002d22:	e009      	b.n	8002d38 <HAL_RCC_OscConfig+0x1d0>
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	03db      	lsls	r3, r3, #15
 8002d32:	4930      	ldr	r1, [pc, #192]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 f936 	bl	8003fb4 <RCC_SetFlashLatencyFromMSIRange>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f000 bdda 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002d54:	f001 f8d8 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x290>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fbbd 	bl	80014dc <HAL_InitTick>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 808a 	beq.w	8002e86 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8002d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d76:	f000 bdc7 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d066      	beq.n	8002e50 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d8e:	f7fe fbef 	bl	8001570 <HAL_GetTick>
 8002d92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002d94:	e009      	b.n	8002daa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d96:	f7fe fbeb 	bl	8001570 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d902      	bls.n	8002daa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f000 bdaf 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ef      	beq.n	8002d96 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dc0:	6093      	str	r3, [r2, #8]
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	4909      	ldr	r1, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002ddc:	d30e      	bcc.n	8002dfc <HAL_RCC_OscConfig+0x294>
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f023 021f 	bic.w	r2, r3, #31
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4902      	ldr	r1, [pc, #8]	; (8002df4 <HAL_RCC_OscConfig+0x28c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
 8002df0:	e04a      	b.n	8002e88 <HAL_RCC_OscConfig+0x320>
 8002df2:	bf00      	nop
 8002df4:	46020c00 	.word	0x46020c00
 8002df8:	20000018 	.word	0x20000018
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da0a      	bge.n	8002e1a <HAL_RCC_OscConfig+0x2b2>
 8002e04:	4b9b      	ldr	r3, [pc, #620]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	4998      	ldr	r1, [pc, #608]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
 8002e18:	e036      	b.n	8002e88 <HAL_RCC_OscConfig+0x320>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d30a      	bcc.n	8002e3a <HAL_RCC_OscConfig+0x2d2>
 8002e24:	4b93      	ldr	r3, [pc, #588]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	029b      	lsls	r3, r3, #10
 8002e32:	4990      	ldr	r1, [pc, #576]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e026      	b.n	8002e88 <HAL_RCC_OscConfig+0x320>
 8002e3a:	4b8e      	ldr	r3, [pc, #568]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	03db      	lsls	r3, r3, #15
 8002e48:	498a      	ldr	r1, [pc, #552]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]
 8002e4e:	e01b      	b.n	8002e88 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a87      	ldr	r2, [pc, #540]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb88 	bl	8001570 <HAL_GetTick>
 8002e60:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002e62:	e009      	b.n	8002e78 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e64:	f7fe fb84 	bl	8001570 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	f000 bd48 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ef      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2fc>
 8002e84:	e000      	b.n	8002e88 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8094 	beq.w	8002fbe <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x340>
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d110      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8083 	beq.w	8002fbc <HAL_RCC_OscConfig+0x454>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d17e      	bne.n	8002fbc <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f000 bd22 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x374>
 8002ece:	4b69      	ldr	r3, [pc, #420]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a68      	ldr	r2, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e041      	b.n	8002f60 <HAL_RCC_OscConfig+0x3f8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee4:	d112      	bne.n	8002f0c <HAL_RCC_OscConfig+0x3a4>
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a62      	ldr	r2, [pc, #392]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b60      	ldr	r3, [pc, #384]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a5f      	ldr	r2, [pc, #380]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002ef8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5c      	ldr	r2, [pc, #368]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e029      	b.n	8002f60 <HAL_RCC_OscConfig+0x3f8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x3d4>
 8002f16:	4b57      	ldr	r3, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b54      	ldr	r3, [pc, #336]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a53      	ldr	r2, [pc, #332]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b51      	ldr	r3, [pc, #324]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a50      	ldr	r2, [pc, #320]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e011      	b.n	8002f60 <HAL_RCC_OscConfig+0x3f8>
 8002f3c:	4b4d      	ldr	r3, [pc, #308]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4c      	ldr	r2, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a49      	ldr	r2, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a46      	ldr	r2, [pc, #280]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d014      	beq.n	8002f92 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8002f68:	f7fe fb02 	bl	8001570 <HAL_GetTick>
 8002f6c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6e:	e009      	b.n	8002f84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fafe 	bl	8001570 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d902      	bls.n	8002f84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	f000 bcc2 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ef      	beq.n	8002f70 <HAL_RCC_OscConfig+0x408>
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002f92:	f7fe faed 	bl	8001570 <HAL_GetTick>
 8002f96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f98:	e009      	b.n	8002fae <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fae9 	bl	8001570 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d902      	bls.n	8002fae <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	f000 bcad 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ef      	bne.n	8002f9a <HAL_RCC_OscConfig+0x432>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d066      	beq.n	8003098 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x474>
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d117      	bne.n	800300c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x48e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f000 bc89 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	491b      	ldr	r1, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300a:	e045      	b.n	8003098 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 800301a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003020:	f7fe faa6 	bl	8001570 <HAL_GetTick>
 8003024:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	e009      	b.n	800303c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe faa2 	bl	8001570 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	f000 bc66 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ef      	beq.n	8003028 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4907      	ldr	r1, [pc, #28]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	610b      	str	r3, [r1, #16]
 800305c:	e01c      	b.n	8003098 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_RCC_OscConfig+0x50c>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800306a:	f7fe fa81 	bl	8001570 <HAL_GetTick>
 800306e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	e00c      	b.n	800308c <HAL_RCC_OscConfig+0x524>
 8003072:	bf00      	nop
 8003074:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe fa7a 	bl	8001570 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	f000 bc3e 	b.w	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308c:	4baf      	ldr	r3, [pc, #700]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80c7 	beq.w	8003234 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ac:	4ba7      	ldr	r3, [pc, #668]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d111      	bne.n	80030de <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4ba4      	ldr	r3, [pc, #656]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	4aa2      	ldr	r2, [pc, #648]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030ca:	4ba0      	ldr	r3, [pc, #640]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030de:	4b9c      	ldr	r3, [pc, #624]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d118      	bne.n	800311c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80030ea:	4b99      	ldr	r3, [pc, #612]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	4a98      	ldr	r2, [pc, #608]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fa3b 	bl	8001570 <HAL_GetTick>
 80030fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fe fa37 	bl	8001570 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e3fb      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003110:	4b8f      	ldr	r3, [pc, #572]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05f      	beq.n	80031e4 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003124:	4b89      	ldr	r3, [pc, #548]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800312a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	429a      	cmp	r2, r3
 8003138:	d037      	beq.n	80031aa <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e3da      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800315e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003162:	4a7a      	ldr	r2, [pc, #488]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003164:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003168:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800316c:	f7fe fa00 	bl	8001570 <HAL_GetTick>
 8003170:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003174:	f7fe f9fc 	bl	8001570 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e3c0      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003186:	4b71      	ldr	r3, [pc, #452]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800318c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ef      	bne.n	8003174 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003194:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800319a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	496a      	ldr	r1, [pc, #424]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	4b68      	ldr	r3, [pc, #416]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80031ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031b0:	4a66      	ldr	r2, [pc, #408]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80031b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80031ba:	f7fe f9d9 	bl	8001570 <HAL_GetTick>
 80031be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe f9d5 	bl	8001570 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e399      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80031d4:	4b5d      	ldr	r3, [pc, #372]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80031d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCC_OscConfig+0x65a>
 80031e2:	e01b      	b.n	800321c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80031e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ea:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80031ec:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80031f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80031f4:	f7fe f9bc 	bl	8001570 <HAL_GetTick>
 80031f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fe f9b8 	bl	8001570 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e37c      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800320e:	4b4f      	ldr	r3, [pc, #316]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ef      	bne.n	80031fc <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800321c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b49      	ldr	r3, [pc, #292]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322a:	4a48      	ldr	r2, [pc, #288]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8112 	beq.w	8003466 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003248:	4b40      	ldr	r3, [pc, #256]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d111      	bne.n	800327a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325c:	4a3b      	ldr	r2, [pc, #236]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003286:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4a31      	ldr	r2, [pc, #196]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fe f96d 	bl	8001570 <HAL_GetTick>
 8003296:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fe f969 	bl	8001570 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e32d      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_OscConfig+0x7e8>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d010      	beq.n	80032f2 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032d0:	4b1e      	ldr	r3, [pc, #120]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80032d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80032e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032e6:	4a19      	ldr	r2, [pc, #100]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032f0:	e018      	b.n	8003324 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80032f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 8003316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <HAL_RCC_OscConfig+0x7e4>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d058      	beq.n	80033de <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800332c:	f7fe f920 	bl	8001570 <HAL_GetTick>
 8003330:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	e00f      	b.n	8003354 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe f91c 	bl	8001570 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d906      	bls.n	8003354 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e2de      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
 800334a:	bf00      	nop
 800334c:	46020c00 	.word	0x46020c00
 8003350:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003354:	4b9c      	ldr	r3, [pc, #624]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0e8      	beq.n	8003334 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01b      	beq.n	80033a6 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800336e:	4b96      	ldr	r3, [pc, #600]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003374:	4a94      	ldr	r2, [pc, #592]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe f8f6 	bl	8001570 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e2b8      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003396:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800339c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ed      	beq.n	8003380 <HAL_RCC_OscConfig+0x818>
 80033a4:	e053      	b.n	800344e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033a6:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80033a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ac:	4a86      	ldr	r2, [pc, #536]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f8da 	bl	8001570 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e29c      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033ce:	4b7e      	ldr	r3, [pc, #504]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80033d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ed      	bne.n	80033b8 <HAL_RCC_OscConfig+0x850>
 80033dc:	e037      	b.n	800344e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80033de:	f7fe f8c7 	bl	8001570 <HAL_GetTick>
 80033e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe f8c3 	bl	8001570 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e285      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fc:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80033fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ed      	bne.n	80033e6 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800340a:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800340c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01a      	beq.n	800344e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800341a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800341e:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003424:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe f8a1 	bl	8001570 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e263      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003440:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ed      	bne.n	800342a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345c:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d036      	beq.n	80034e0 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d019      	beq.n	80034ae <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800347a:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a52      	ldr	r2, [pc, #328]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003484:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003486:	f7fe f873 	bl	8001570 <HAL_GetTick>
 800348a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800348e:	f7fe f86f 	bl	8001570 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e233      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x926>
 80034ac:	e018      	b.n	80034e0 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a45      	ldr	r2, [pc, #276]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80034b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80034ba:	f7fe f859 	bl	8001570 <HAL_GetTick>
 80034be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034c2:	f7fe f855 	bl	8001570 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e219      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034d4:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f0      	bne.n	80034c2 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d036      	beq.n	800355a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d019      	beq.n	8003528 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80034f4:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a33      	ldr	r2, [pc, #204]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80034fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003500:	f7fe f836 	bl	8001570 <HAL_GetTick>
 8003504:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003508:	f7fe f832 	bl	8001570 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1f6      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800351a:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x9a0>
 8003526:	e018      	b.n	800355a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800352e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003532:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003534:	f7fe f81c 	bl	8001570 <HAL_GetTick>
 8003538:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800353c:	f7fe f818 	bl	8001570 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e1dc      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07f      	beq.n	8003666 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d062      	beq.n	8003634 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800356e:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003578:	6093      	str	r3, [r2, #8]
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	4910      	ldr	r1, [pc, #64]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003594:	d309      	bcc.n	80035aa <HAL_RCC_OscConfig+0xa42>
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 021f 	bic.w	r2, r3, #31
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4909      	ldr	r1, [pc, #36]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
 80035a8:	e02a      	b.n	8003600 <HAL_RCC_OscConfig+0xa98>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da0c      	bge.n	80035cc <HAL_RCC_OscConfig+0xa64>
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	4901      	ldr	r1, [pc, #4]	; (80035c8 <HAL_RCC_OscConfig+0xa60>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60cb      	str	r3, [r1, #12]
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0xa98>
 80035c8:	46020c00 	.word	0x46020c00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d30a      	bcc.n	80035ec <HAL_RCC_OscConfig+0xa84>
 80035d6:	4ba5      	ldr	r3, [pc, #660]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	49a1      	ldr	r1, [pc, #644]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60cb      	str	r3, [r1, #12]
 80035ea:	e009      	b.n	8003600 <HAL_RCC_OscConfig+0xa98>
 80035ec:	4b9f      	ldr	r3, [pc, #636]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	03db      	lsls	r3, r3, #15
 80035fa:	499c      	ldr	r1, [pc, #624]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003600:	4b9a      	ldr	r3, [pc, #616]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a99      	ldr	r2, [pc, #612]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003606:	f043 0310 	orr.w	r3, r3, #16
 800360a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800360c:	f7fd ffb0 	bl	8001570 <HAL_GetTick>
 8003610:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003614:	f7fd ffac 	bl	8001570 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e170      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003626:	4b91      	ldr	r3, [pc, #580]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xaac>
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003634:	4b8d      	ldr	r3, [pc, #564]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a8c      	ldr	r2, [pc, #560]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800363a:	f023 0310 	bic.w	r3, r3, #16
 800363e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003640:	f7fd ff96 	bl	8001570 <HAL_GetTick>
 8003644:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003648:	f7fd ff92 	bl	8001570 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e156      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800365a:	4b84      	ldr	r3, [pc, #528]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 814b 	beq.w	8003906 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b0c      	cmp	r3, #12
 8003680:	f000 80fa 	beq.w	8003878 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	2b02      	cmp	r3, #2
 800368a:	f040 80cc 	bne.w	8003826 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b77      	ldr	r3, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a76      	ldr	r2, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003698:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800369a:	f7fd ff69 	bl	8001570 <HAL_GetTick>
 800369e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fd ff65 	bl	8001570 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e129      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f0      	bne.n	80036a2 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d111      	bne.n	80036f2 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d4:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80036f2:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <HAL_RCC_OscConfig+0xd08>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003706:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCC_OscConfig+0xd08>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a59      	ldr	r2, [pc, #356]	; (8003870 <HAL_RCC_OscConfig+0xd08>)
 800370c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003710:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003712:	4b56      	ldr	r3, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003726:	3a01      	subs	r2, #1
 8003728:	0212      	lsls	r2, r2, #8
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003730:	430a      	orrs	r2, r1
 8003732:	494e      	ldr	r1, [pc, #312]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003734:	4313      	orrs	r3, r2
 8003736:	628b      	str	r3, [r1, #40]	; 0x28
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800373a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800373c:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCC_OscConfig+0xd0c>)
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003744:	3a01      	subs	r2, #1
 8003746:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800374e:	3a01      	subs	r2, #1
 8003750:	0252      	lsls	r2, r2, #9
 8003752:	b292      	uxth	r2, r2
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800375a:	3a01      	subs	r2, #1
 800375c:	0412      	lsls	r2, r2, #16
 800375e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003768:	3a01      	subs	r2, #1
 800376a:	0612      	lsls	r2, r2, #24
 800376c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003770:	430a      	orrs	r2, r1
 8003772:	493e      	ldr	r1, [pc, #248]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003774:	4313      	orrs	r3, r2
 8003776:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003778:	4b3c      	ldr	r3, [pc, #240]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	4a3b      	ldr	r2, [pc, #236]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800377e:	f023 0310 	bic.w	r3, r3, #16
 8003782:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003784:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003794:	00d2      	lsls	r2, r2, #3
 8003796:	4935      	ldr	r1, [pc, #212]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003798:	4313      	orrs	r3, r2
 800379a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800379c:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	4a32      	ldr	r2, [pc, #200]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037a2:	f043 0310 	orr.w	r3, r3, #16
 80037a6:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	f023 020c 	bic.w	r2, r3, #12
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	492d      	ldr	r1, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80037ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0xd08>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <HAL_RCC_OscConfig+0xd08>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037cc:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80037ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	4a23      	ldr	r2, [pc, #140]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	4a20      	ldr	r2, [pc, #128]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 80037f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037fe:	f7fd feb7 	bl	8001570 <HAL_GetTick>
 8003802:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fd feb3 	bl	8001570 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e077      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0xc9e>
 8003824:	e06f      	b.n	8003906 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003832:	f7fd fe9d 	bl	8001570 <HAL_GetTick>
 8003836:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fd fe99 	bl	8001570 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e05d      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	4a03      	ldr	r2, [pc, #12]	; (800386c <HAL_RCC_OscConfig+0xd04>)
 800385e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	6293      	str	r3, [r2, #40]	; 0x28
 8003868:	e04d      	b.n	8003906 <HAL_RCC_OscConfig+0xd9e>
 800386a:	bf00      	nop
 800386c:	46020c00 	.word	0x46020c00
 8003870:	46020800 	.word	0x46020800
 8003874:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0xda8>)
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_OscConfig+0xda8>)
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	2b01      	cmp	r3, #1
 800388a:	d03a      	beq.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0203 	and.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d133      	bne.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d12a      	bne.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	0b1b      	lsrs	r3, r3, #12
 80038b0:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d122      	bne.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d11a      	bne.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	0a5b      	lsrs	r3, r3, #9
 80038d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d111      	bne.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d108      	bne.n	8003902 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	0e1b      	lsrs	r3, r3, #24
 80038f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3738      	adds	r7, #56	; 0x38
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	46020c00 	.word	0x46020c00

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e1d9      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b9b      	ldr	r3, [pc, #620]	; (8003b98 <HAL_RCC_ClockConfig+0x284>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b98      	ldr	r3, [pc, #608]	; (8003b98 <HAL_RCC_ClockConfig+0x284>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 020f 	bic.w	r2, r3, #15
 800393e:	4996      	ldr	r1, [pc, #600]	; (8003b98 <HAL_RCC_ClockConfig+0x284>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b94      	ldr	r3, [pc, #592]	; (8003b98 <HAL_RCC_ClockConfig+0x284>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e1c1      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	4b8c      	ldr	r3, [pc, #560]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003970:	429a      	cmp	r2, r3
 8003972:	d908      	bls.n	8003986 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003974:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	4986      	ldr	r1, [pc, #536]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003982:	4313      	orrs	r3, r2
 8003984:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d012      	beq.n	80039b8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	4b81      	ldr	r3, [pc, #516]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d909      	bls.n	80039b8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80039a4:	4b7d      	ldr	r3, [pc, #500]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	497a      	ldr	r1, [pc, #488]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4b74      	ldr	r3, [pc, #464]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d908      	bls.n	80039e6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b71      	ldr	r3, [pc, #452]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	496e      	ldr	r1, [pc, #440]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d908      	bls.n	8003a14 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003a02:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 020f 	bic.w	r2, r3, #15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4963      	ldr	r1, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80d2 	beq.w	8003bc6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d143      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d110      	bne.n	8003a5e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b57      	ldr	r3, [pc, #348]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a42:	4a56      	ldr	r2, [pc, #344]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fd87 	bl	8001570 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003a64:	4b4e      	ldr	r3, [pc, #312]	; (8003ba0 <HAL_RCC_ClockConfig+0x28c>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00f      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003a72:	f7fd fd7d 	bl	8001570 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e12b      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_RCC_ClockConfig+0x28c>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9c:	4a3f      	ldr	r2, [pc, #252]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d121      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e112      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d115      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e106      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0fa      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0f2      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4926      	ldr	r1, [pc, #152]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003b08:	f7fd fd32 	bl	8001570 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d112      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fd fd2a 	bl	8001570 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0d6      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d1ee      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x204>
 8003b3a:	e044      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b46:	f7fd fd13 	bl	8001570 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0bf      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d1ee      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x232>
 8003b68:	e02d      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d123      	bne.n	8003bba <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fd fcfc 	bl	8001570 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0a8      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <HAL_RCC_ClockConfig+0x288>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x260>
 8003b96:	e016      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x2b2>
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	46020c00 	.word	0x46020c00
 8003ba0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fd fce4 	bl	8001570 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e090      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d208      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003be2:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 020f 	bic.w	r2, r3, #15
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	493d      	ldr	r1, [pc, #244]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b3c      	ldr	r3, [pc, #240]	; (8003ce8 <HAL_RCC_ClockConfig+0x3d4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d210      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 020f 	bic.w	r2, r3, #15
 8003c0a:	4937      	ldr	r1, [pc, #220]	; (8003ce8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <HAL_RCC_ClockConfig+0x3d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e05b      	b.n	8003cdc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d010      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d208      	bcs.n	8003c52 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4925      	ldr	r1, [pc, #148]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d012      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d209      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4919      	ldr	r1, [pc, #100]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d208      	bcs.n	8003cb2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	490d      	ldr	r1, [pc, #52]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cb2:	f000 f821 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <HAL_RCC_ClockConfig+0x3d0>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	490a      	ldr	r1, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x3d8>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc8:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x3dc>)
 8003cca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x3e0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd fc03 	bl	80014dc <HAL_InitTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	46020c00 	.word	0x46020c00
 8003ce8:	40022000 	.word	0x40022000
 8003cec:	080087b8 	.word	0x080087b8
 8003cf0:	20000014 	.word	0x20000014
 8003cf4:	20000018 	.word	0x20000018

08003cf8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b08b      	sub	sp, #44	; 0x2c
 8003cfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d06:	4b7b      	ldr	r3, [pc, #492]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d10:	4b78      	ldr	r3, [pc, #480]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x34>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b0c      	cmp	r3, #12
 8003d24:	d121      	bne.n	8003d6a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d11e      	bne.n	8003d6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003d2c:	4b71      	ldr	r3, [pc, #452]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003d38:	4b6e      	ldr	r3, [pc, #440]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d3e:	0b1b      	lsrs	r3, r3, #12
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e005      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	0f1b      	lsrs	r3, r3, #28
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d54:	4a68      	ldr	r2, [pc, #416]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d110      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d68:	e00d      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6a:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d102      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d76:	4b61      	ldr	r3, [pc, #388]	; (8003efc <HAL_RCC_GetSysClockFreq+0x204>)
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	e004      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d82:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_RCC_GetSysClockFreq+0x204>)
 8003d84:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	f040 80ac 	bne.w	8003ee6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003d8e:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003d98:	4b56      	ldr	r3, [pc, #344]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003da6:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003db2:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	08db      	lsrs	r3, r3, #3
 8003db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8086 	beq.w	8003ee2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d003      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0xec>
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d022      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x130>
 8003de2:	e043      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x208>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e06:	ed97 6a01 	vldr	s12, [r7, #4]
 8003e0a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003f04 <HAL_RCC_GetSysClockFreq+0x20c>
 8003e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003e26:	e046      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x208>
 8003e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e4a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003e4e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003f04 <HAL_RCC_GetSysClockFreq+0x20c>
 8003e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e66:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003e6a:	e024      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003e94:	ed97 6a01 	vldr	s12, [r7, #4]
 8003e98:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003f04 <HAL_RCC_GetSysClockFreq+0x20c>
 8003e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003eb4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	0e1b      	lsrs	r3, r3, #24
 8003ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eda:	ee17 3a90 	vmov	r3, s15
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	e001      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	372c      	adds	r7, #44	; 0x2c
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	46020c00 	.word	0x46020c00
 8003ef8:	080087d0 	.word	0x080087d0
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	4b742400 	.word	0x4b742400
 8003f04:	46000000 	.word	0x46000000

08003f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f0c:	f7ff fef4 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x28>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	4906      	ldr	r1, [pc, #24]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003f1c:	5ccb      	ldrb	r3, [r1, r3]
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x30>)
 8003f24:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003f26:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x30>)
 8003f28:	681b      	ldr	r3, [r3, #0]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	46020c00 	.word	0x46020c00
 8003f34:	080087b8 	.word	0x080087b8
 8003f38:	20000014 	.word	0x20000014

08003f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003f40:	f7ff ffe2 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	46020c00 	.word	0x46020c00
 8003f60:	080087c8 	.word	0x080087c8

08003f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003f68:	f7ff ffce 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	46020c00 	.word	0x46020c00
 8003f88:	080087c8 	.word	0x080087c8

08003f8c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003f90:	f7ff ffba 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK3Freq+0x20>)
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	46020c00 	.word	0x46020c00
 8003fb0:	080087c8 	.word	0x080087c8

08003fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fca:	f7fe fdaf 	bl	8002b2c <HAL_PWREx_GetVoltageRange>
 8003fce:	6178      	str	r0, [r7, #20]
 8003fd0:	e019      	b.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd8:	4a37      	ldr	r2, [pc, #220]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003fda:	f043 0304 	orr.w	r3, r3, #4
 8003fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fe2:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff0:	f7fe fd9c 	bl	8002b2c <HAL_PWREx_GetVoltageRange>
 8003ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	4a2e      	ldr	r2, [pc, #184]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ffe:	f023 0304 	bic.w	r3, r3, #4
 8004002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800400c:	d003      	beq.n	8004016 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004014:	d109      	bne.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800401c:	d202      	bcs.n	8004024 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800401e:	2301      	movs	r3, #1
 8004020:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004022:	e033      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004028:	e030      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004030:	d208      	bcs.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d102      	bne.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800403a:	2303      	movs	r3, #3
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	e025      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e035      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404a:	d90f      	bls.n	800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004058:	d902      	bls.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e015      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004060:	2301      	movs	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	e012      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	e00f      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004072:	d109      	bne.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d102      	bne.n	8004082 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800407c:	2301      	movs	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e004      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004082:	2302      	movs	r3, #2
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e001      	b.n	800408c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004088:	2301      	movs	r3, #1
 800408a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 020f 	bic.w	r2, r3, #15
 8004094:	4909      	ldr	r1, [pc, #36]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	46020c00 	.word	0x46020c00
 80040bc:	40022000 	.word	0x40022000

080040c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b0ba      	sub	sp, #232	; 0xe8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040d2:	2300      	movs	r3, #0
 80040d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f002 0401 	and.w	r4, r2, #1
 80040e4:	2500      	movs	r5, #0
 80040e6:	ea54 0305 	orrs.w	r3, r4, r5
 80040ea:	d00b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80040ec:	4bcb      	ldr	r3, [pc, #812]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f2:	f023 0103 	bic.w	r1, r3, #3
 80040f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	4ac7      	ldr	r2, [pc, #796]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f002 0802 	and.w	r8, r2, #2
 8004110:	f04f 0900 	mov.w	r9, #0
 8004114:	ea58 0309 	orrs.w	r3, r8, r9
 8004118:	d00b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800411a:	4bc0      	ldr	r3, [pc, #768]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004120:	f023 010c 	bic.w	r1, r3, #12
 8004124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	4abc      	ldr	r2, [pc, #752]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412c:	430b      	orrs	r3, r1
 800412e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f002 0a04 	and.w	sl, r2, #4
 800413e:	f04f 0b00 	mov.w	fp, #0
 8004142:	ea5a 030b 	orrs.w	r3, sl, fp
 8004146:	d00b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004148:	4bb4      	ldr	r3, [pc, #720]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800414e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	4ab0      	ldr	r2, [pc, #704]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415a:	430b      	orrs	r3, r1
 800415c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004160:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f002 0308 	and.w	r3, r2, #8
 800416c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004176:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800417a:	460b      	mov	r3, r1
 800417c:	4313      	orrs	r3, r2
 800417e:	d00b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004180:	4ba6      	ldr	r3, [pc, #664]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800418a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	4aa2      	ldr	r2, [pc, #648]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004192:	430b      	orrs	r3, r1
 8004194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f002 0310 	and.w	r3, r2, #16
 80041a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80041b8:	4b98      	ldr	r3, [pc, #608]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	4a94      	ldr	r2, [pc, #592]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ca:	430b      	orrs	r3, r1
 80041cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f002 0320 	and.w	r3, r2, #32
 80041dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d00b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80041f0:	4b8a      	ldr	r3, [pc, #552]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041f6:	f023 0107 	bic.w	r1, r3, #7
 80041fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004200:	4a86      	ldr	r2, [pc, #536]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004202:	430b      	orrs	r3, r1
 8004204:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800421e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d00b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004228:	4b7c      	ldr	r3, [pc, #496]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004238:	4a78      	ldr	r2, [pc, #480]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423a:	430b      	orrs	r3, r1
 800423c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800424c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004256:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d00b      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004260:	4b6e      	ldr	r3, [pc, #440]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004270:	4a6a      	ldr	r2, [pc, #424]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004272:	430b      	orrs	r3, r1
 8004274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800428e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d00b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004298:	4b60      	ldr	r3, [pc, #384]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800429e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4a5c      	ldr	r2, [pc, #368]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80042bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80042d0:	4b52      	ldr	r3, [pc, #328]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80042da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e0:	4a4e      	ldr	r2, [pc, #312]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80042f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d00b      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004308:	4b44      	ldr	r3, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800430e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004318:	4a40      	ldr	r2, [pc, #256]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431a:	430b      	orrs	r3, r1
 800431c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800432c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004336:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800433a:	460b      	mov	r3, r1
 800433c:	4313      	orrs	r3, r2
 800433e:	d00b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004340:	4b36      	ldr	r3, [pc, #216]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004346:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800434a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800434e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004350:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004352:	430b      	orrs	r3, r1
 8004354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800436e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d00c      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800437e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438a:	4a24      	ldr	r2, [pc, #144]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800438c:	430b      	orrs	r3, r1
 800438e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800439e:	67bb      	str	r3, [r7, #120]	; 0x78
 80043a0:	2300      	movs	r3, #0
 80043a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d04f      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d02d      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d827      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043be:	2b60      	cmp	r3, #96	; 0x60
 80043c0:	d02e      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80043c2:	2b60      	cmp	r3, #96	; 0x60
 80043c4:	d823      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d006      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d81f      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80043d6:	e01a      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	4a0f      	ldr	r2, [pc, #60]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043e4:	e01d      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ea:	3308      	adds	r3, #8
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 f981 	bl	80066f4 <RCCEx_PLL2_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043f8:	e013      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043fe:	332c      	adds	r3, #44	; 0x2c
 8004400:	4618      	mov	r0, r3
 8004402:	f002 fa0f 	bl	8006824 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800440c:	e009      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004414:	e005      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004416:	bf00      	nop
 8004418:	e003      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800441a:	bf00      	nop
 800441c:	46020c00 	.word	0x46020c00
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800442a:	4bb6      	ldr	r3, [pc, #728]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800442c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004430:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	4ab1      	ldr	r2, [pc, #708]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800443e:	430b      	orrs	r3, r1
 8004440:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004446:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800444a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800444e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800445a:	673b      	str	r3, [r7, #112]	; 0x70
 800445c:	2300      	movs	r3, #0
 800445e:	677b      	str	r3, [r7, #116]	; 0x74
 8004460:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d053      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004476:	d033      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d82c      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800447e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004482:	d02f      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004488:	d826      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448e:	d008      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d820      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449e:	d011      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80044a0:	e01a      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044a2:	4b98      	ldr	r3, [pc, #608]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	4a97      	ldr	r2, [pc, #604]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044ae:	e01a      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044b4:	3308      	adds	r3, #8
 80044b6:	4618      	mov	r0, r3
 80044b8:	f002 f91c 	bl	80066f4 <RCCEx_PLL2_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044c2:	e010      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c8:	332c      	adds	r3, #44	; 0x2c
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 f9aa 	bl	8006824 <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044d6:	e006      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80044de:	e002      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80044ee:	4b85      	ldr	r3, [pc, #532]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044f4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80044f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004500:	4a80      	ldr	r2, [pc, #512]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004502:	430b      	orrs	r3, r1
 8004504:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004508:	e003      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800450e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800451e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004520:	2300      	movs	r3, #0
 8004522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004524:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d046      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800452e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004536:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800453a:	d028      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800453c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004540:	d821      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004546:	d022      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454c:	d81b      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800454e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004552:	d01c      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004554:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004558:	d815      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	d008      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004564:	d80f      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d011      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d00e      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004570:	e009      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004576:	3308      	adds	r3, #8
 8004578:	4618      	mov	r0, r3
 800457a:	f002 f8bb 	bl	80066f4 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004584:	e004      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800458e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004590:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800459a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800459e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80045a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045aa:	4a56      	ldr	r2, [pc, #344]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80045b8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80045bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045c8:	663b      	str	r3, [r7, #96]	; 0x60
 80045ca:	2300      	movs	r3, #0
 80045cc:	667b      	str	r3, [r7, #100]	; 0x64
 80045ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d03f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80045d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d81e      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	08004601 	.word	0x08004601
 80045f4:	0800460f 	.word	0x0800460f
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	0800462b 	.word	0x0800462b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004600:	4b40      	ldr	r3, [pc, #256]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800460c:	e00e      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800460e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004612:	332c      	adds	r3, #44	; 0x2c
 8004614:	4618      	mov	r0, r3
 8004616:	f002 f905 	bl	8006824 <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004620:	e004      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800462a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800462c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004636:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800463a:	f023 0107 	bic.w	r1, r3, #7
 800463e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004648:	430b      	orrs	r3, r1
 800464a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800464e:	e003      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004654:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004664:	65bb      	str	r3, [r7, #88]	; 0x58
 8004666:	2300      	movs	r3, #0
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800466a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d04d      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004682:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004686:	d821      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004688:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800468c:	d024      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800468e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004692:	d81b      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004698:	d00e      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800469a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800469e:	d815      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d110      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80046b6:	e012      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046bc:	332c      	adds	r3, #44	; 0x2c
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 f8b0 	bl	8006824 <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80046ca:	e008      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80046d4:	bf00      	nop
 80046d6:	e002      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80046dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80046de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d110      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80046f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f8:	4a02      	ldr	r2, [pc, #8]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046fa:	430b      	orrs	r3, r1
 80046fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004702:	bf00      	nop
 8004704:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800470c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800471c:	653b      	str	r3, [r7, #80]	; 0x50
 800471e:	2300      	movs	r3, #0
 8004720:	657b      	str	r3, [r7, #84]	; 0x54
 8004722:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	f000 80b5 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004734:	4b9d      	ldr	r3, [pc, #628]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	4b9a      	ldr	r3, [pc, #616]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004748:	4a98      	ldr	r2, [pc, #608]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004752:	4b96      	ldr	r3, [pc, #600]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800476a:	4b91      	ldr	r3, [pc, #580]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	4a90      	ldr	r2, [pc, #576]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004776:	f7fc fefb 	bl	8001570 <HAL_GetTick>
 800477a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800477e:	e00b      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fc fef6 	bl	8001570 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d903      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004796:	e005      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004798:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ed      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80047a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d165      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ac:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d023      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80047c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01b      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b72      	ldr	r3, [pc, #456]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e6:	4a71      	ldr	r2, [pc, #452]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047f6:	4a6d      	ldr	r2, [pc, #436]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004800:	4a6a      	ldr	r2, [pc, #424]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fc feab 	bl	8001570 <HAL_GetTick>
 800481a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	e00d      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fc fea6 	bl	8001570 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004830:	429a      	cmp	r2, r3
 8004832:	d903      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800483a:	e006      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	4b5b      	ldr	r3, [pc, #364]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800483e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ea      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800484a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004858:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800485c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004864:	4a51      	ldr	r2, [pc, #324]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004866:	430b      	orrs	r3, r1
 8004868:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800486c:	e008      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800486e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004872:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004876:	e003      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800487c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004880:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004888:	4b48      	ldr	r3, [pc, #288]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	4a47      	ldr	r2, [pc, #284]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80048a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a6:	2300      	movs	r3, #0
 80048a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80048ae:	460b      	mov	r3, r1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	d042      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80048b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048c0:	d022      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80048c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048c6:	d81b      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80048c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048cc:	d011      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80048ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d2:	d815      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d019      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80048d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048dc:	d110      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e2:	3308      	adds	r3, #8
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 ff05 	bl	80066f4 <RCCEx_PLL2_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80048f0:	e00d      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f2:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800490c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800490e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004916:	4b25      	ldr	r3, [pc, #148]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800491c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800492a:	430b      	orrs	r3, r1
 800492c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004930:	e003      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004936:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800493a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
 8004948:	2300      	movs	r3, #0
 800494a:	647b      	str	r3, [r7, #68]	; 0x44
 800494c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d032      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004962:	d00b      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004968:	d804      	bhi.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	d007      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800497a:	e004      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004984:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004986:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d112      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800499c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a0:	4a02      	ldr	r2, [pc, #8]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80049a2:	430b      	orrs	r3, r1
 80049a4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80049a8:	e008      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80049aa:	bf00      	nop
 80049ac:	46020c00 	.word	0x46020c00
 80049b0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049b8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80049bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ca:	2300      	movs	r3, #0
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d00c      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80049d8:	4b98      	ldr	r3, [pc, #608]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80049da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049de:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80049e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ea:	4a94      	ldr	r2, [pc, #592]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80049ec:	430b      	orrs	r3, r1
 80049ee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80049f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004a00:	2300      	movs	r3, #0
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
 8004a04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	d019      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a1c:	4b87      	ldr	r3, [pc, #540]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	4a86      	ldr	r2, [pc, #536]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a26:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004a28:	4b84      	ldr	r3, [pc, #528]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a2e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a3a:	4a80      	ldr	r2, [pc, #512]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a50:	2300      	movs	r3, #0
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d00c      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004a5e:	4b77      	ldr	r3, [pc, #476]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a70:	4972      	ldr	r1, [pc, #456]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004a84:	623b      	str	r3, [r7, #32]
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d00c      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004a94:	4b69      	ldr	r3, [pc, #420]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004aa6:	4965      	ldr	r1, [pc, #404]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004aca:	4b5c      	ldr	r3, [pc, #368]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ad0:	f023 0218 	bic.w	r2, r3, #24
 8004ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ad8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004adc:	4957      	ldr	r1, [pc, #348]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004afa:	460b      	mov	r3, r1
 8004afc:	4313      	orrs	r3, r2
 8004afe:	d032      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b0c:	d105      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	4a4a      	ldr	r2, [pc, #296]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b18:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b26:	d108      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fde0 	bl	80066f4 <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8004b3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004b42:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b54:	4939      	ldr	r1, [pc, #228]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b62:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d03a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8e:	d00e      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b94:	d815      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d017      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004b9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b9e:	d110      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba0:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004baa:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004bac:	e00e      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fd9d 	bl	80066f4 <RCCEx_PLL2_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004bca:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004bcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be6:	4915      	ldr	r1, [pc, #84]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004bee:	e003      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004bf4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c26:	4905      	ldr	r1, [pc, #20]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004c2e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	37e8      	adds	r7, #232	; 0xe8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3c:	46020c00 	.word	0x46020c00

08004c40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	; 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004c48:	4bac      	ldr	r3, [pc, #688]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004c52:	4baa      	ldr	r3, [pc, #680]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004c5c:	4ba7      	ldr	r3, [pc, #668]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3301      	adds	r3, #1
 8004c68:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004c6a:	4ba4      	ldr	r3, [pc, #656]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c74:	4ba1      	ldr	r3, [pc, #644]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8123 	beq.w	8004ede <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d062      	beq.n	8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	f200 8081 	bhi.w	8004da8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d024      	beq.n	8004cf6 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d17a      	bne.n	8004da8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc4:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf4:	e08f      	b.n	8004e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004cf6:	4b81      	ldr	r3, [pc, #516]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8004d02:	4b7e      	ldr	r3, [pc, #504]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	0f1b      	lsrs	r3, r3, #28
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	e006      	b.n	8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8004d0e:	4b7b      	ldr	r3, [pc, #492]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	0f1b      	lsrs	r3, r3, #28
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	4a7a      	ldr	r2, [pc, #488]	; (8004f08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d46:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d62:	e058      	b.n	8004e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b61      	ldr	r3, [pc, #388]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d8a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	e036      	b.n	8004e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004da8:	4b54      	ldr	r3, [pc, #336]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8004db4:	4b51      	ldr	r3, [pc, #324]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	0f1b      	lsrs	r3, r3, #28
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	e006      	b.n	8004dce <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8004dc0:	4b4e      	ldr	r3, [pc, #312]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	0f1b      	lsrs	r3, r3, #28
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	4a4e      	ldr	r2, [pc, #312]	; (8004f08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004df8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e14:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e22:	4b36      	ldr	r3, [pc, #216]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	0a5b      	lsrs	r3, r3, #9
 8004e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e38:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e48:	ee17 2a90 	vmov	r2, s15
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004e58:	4b28      	ldr	r3, [pc, #160]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d017      	beq.n	8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e64:	4b25      	ldr	r3, [pc, #148]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8a:	ee17 2a90 	vmov	r2, s15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e002      	b.n	8004e9a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004e9a:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d017      	beq.n	8004ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ecc:	ee17 2a90 	vmov	r2, s15
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004ed4:	e00c      	b.n	8004ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	609a      	str	r2, [r3, #8]
}
 8004edc:	e008      	b.n	8004ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3724      	adds	r7, #36	; 0x24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	46020c00 	.word	0x46020c00
 8004f00:	4b742400 	.word	0x4b742400
 8004f04:	46000000 	.word	0x46000000
 8004f08:	080087d0 	.word	0x080087d0

08004f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004f14:	4bac      	ldr	r3, [pc, #688]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004f1e:	4baa      	ldr	r3, [pc, #680]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004f28:	4ba7      	ldr	r3, [pc, #668]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	3301      	adds	r3, #1
 8004f34:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004f36:	4ba4      	ldr	r3, [pc, #656]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004f40:	4ba1      	ldr	r3, [pc, #644]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	08db      	lsrs	r3, r3, #3
 8004f46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f58:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8123 	beq.w	80051aa <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d062      	beq.n	8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	f200 8081 	bhi.w	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d024      	beq.n	8004fc2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d17a      	bne.n	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f88:	eddf 6a90 	vldr	s13, [pc, #576]	; 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f90:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fa4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc0:	e08f      	b.n	80050e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004fc2:	4b81      	ldr	r3, [pc, #516]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8004fce:	4b7e      	ldr	r3, [pc, #504]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0f1b      	lsrs	r3, r3, #28
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8004fda:	4b7b      	ldr	r3, [pc, #492]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	0f1b      	lsrs	r3, r3, #28
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	4a7a      	ldr	r2, [pc, #488]	; (80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005012:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800502e:	e058      	b.n	80050e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b61      	ldr	r3, [pc, #388]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005052:	ed97 6a02 	vldr	s12, [r7, #8]
 8005056:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005072:	e036      	b.n	80050e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005074:	4b54      	ldr	r3, [pc, #336]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005080:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	e006      	b.n	800509a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800508c:	4b4e      	ldr	r3, [pc, #312]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800508e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	0f1b      	lsrs	r3, r3, #28
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	4a4e      	ldr	r2, [pc, #312]	; (80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80050c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80050c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80050d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050e0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d017      	beq.n	800511e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80050ee:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	0a5b      	lsrs	r3, r3, #9
 80050f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005104:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005108:	edd7 6a07 	vldr	s13, [r7, #28]
 800510c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005114:	ee17 2a90 	vmov	r2, s15
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005124:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d017      	beq.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005146:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800514a:	edd7 6a07 	vldr	s13, [r7, #28]
 800514e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005156:	ee17 2a90 	vmov	r2, s15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	e002      	b.n	8005166 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d017      	beq.n	80051a2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	0e1b      	lsrs	r3, r3, #24
 8005178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800517c:	ee07 3a90 	vmov	s15, r3
 8005180:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005188:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800518c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005198:	ee17 2a90 	vmov	r2, s15
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051a0:	e00c      	b.n	80051bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	e008      	b.n	80051bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	3724      	adds	r7, #36	; 0x24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	46020c00 	.word	0x46020c00
 80051cc:	4b742400 	.word	0x4b742400
 80051d0:	46000000 	.word	0x46000000
 80051d4:	080087d0 	.word	0x080087d0

080051d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80051d8:	b480      	push	{r7}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80051e0:	4bac      	ldr	r3, [pc, #688]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80051ea:	4baa      	ldr	r3, [pc, #680]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80051f4:	4ba7      	ldr	r3, [pc, #668]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	3301      	adds	r3, #1
 8005200:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005202:	4ba4      	ldr	r3, [pc, #656]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800520c:	4ba1      	ldr	r3, [pc, #644]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800520e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	fb02 f303 	mul.w	r3, r2, r3
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005224:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8123 	beq.w	8005476 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d062      	beq.n	80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b03      	cmp	r3, #3
 800523a:	f200 8081 	bhi.w	8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d024      	beq.n	800528e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d17a      	bne.n	8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005254:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525c:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800526c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005270:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800549c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005274:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005278:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800527c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005280:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005288:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800528c:	e08f      	b.n	80053ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800528e:	4b81      	ldr	r3, [pc, #516]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800529a:	4b7e      	ldr	r3, [pc, #504]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	0f1b      	lsrs	r3, r3, #28
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80052a6:	4b7b      	ldr	r3, [pc, #492]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80052a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	0f1b      	lsrs	r3, r3, #28
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4a7a      	ldr	r2, [pc, #488]	; (80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80052b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052da:	ed97 6a02 	vldr	s12, [r7, #8]
 80052de:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800549c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80052e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80052f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fa:	e058      	b.n	80053ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800530a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530e:	4b61      	ldr	r3, [pc, #388]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800531e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005322:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800549c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005326:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800532a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800532e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005332:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533e:	e036      	b.n	80053ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005340:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800534c:	4b51      	ldr	r3, [pc, #324]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	0f1b      	lsrs	r3, r3, #28
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	e006      	b.n	8005366 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005358:	4b4e      	ldr	r3, [pc, #312]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800535a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	0f1b      	lsrs	r3, r3, #28
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	4a4e      	ldr	r2, [pc, #312]	; (80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005390:	eddf 5a42 	vldr	s11, [pc, #264]	; 800549c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80053a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ac:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80053ae:	4b39      	ldr	r3, [pc, #228]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d017      	beq.n	80053ea <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80053ba:	4b36      	ldr	r3, [pc, #216]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	0a5b      	lsrs	r3, r3, #9
 80053c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80053cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053d0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80053d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e0:	ee17 2a90 	vmov	r2, s15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e002      	b.n	80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800540e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005412:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005416:	edd7 6a07 	vldr	s13, [r7, #28]
 800541a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800541e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005422:	ee17 2a90 	vmov	r2, s15
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	e002      	b.n	8005432 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800543e:	4b15      	ldr	r3, [pc, #84]	; (8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	0e1b      	lsrs	r3, r3, #24
 8005444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005450:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005454:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005458:	edd7 6a07 	vldr	s13, [r7, #28]
 800545c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005464:	ee17 2a90 	vmov	r2, s15
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800546c:	e00c      	b.n	8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	e008      	b.n	8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
}
 8005488:	bf00      	nop
 800548a:	3724      	adds	r7, #36	; 0x24
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	46020c00 	.word	0x46020c00
 8005498:	4b742400 	.word	0x4b742400
 800549c:	46000000 	.word	0x46000000
 80054a0:	080087d0 	.word	0x080087d0

080054a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	; 0x38
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80054ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80054b6:	430b      	orrs	r3, r1
 80054b8:	d145      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054ba:	4ba7      	ldr	r3, [pc, #668]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80054c6:	4ba4      	ldr	r3, [pc, #656]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d108      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054da:	d104      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80054dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
 80054e2:	f001 b8fc 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80054e6:	4b9c      	ldr	r3, [pc, #624]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f4:	d114      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fc:	d110      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054fe:	4b96      	ldr	r3, [pc, #600]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550c:	d103      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800550e:	23fa      	movs	r3, #250	; 0xfa
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005512:	f001 b8e4 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005516:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800551c:	f001 b8df 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005520:	4b8d      	ldr	r3, [pc, #564]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800552c:	d107      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005534:	d103      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005536:	4b89      	ldr	r3, [pc, #548]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
 800553a:	f001 b8d0 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
 8005542:	f001 b8cc 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800554e:	430b      	orrs	r3, r1
 8005550:	d151      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005552:	4b81      	ldr	r3, [pc, #516]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005558:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800555c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d035      	beq.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d841      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d02a      	beq.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2b60      	cmp	r3, #96	; 0x60
 8005574:	d83b      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d009      	beq.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d835      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	2b20      	cmp	r3, #32
 800558c:	d012      	beq.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800558e:	e02e      	b.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fb53 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800559e:	f001 b89e 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055a2:	f107 0318 	add.w	r3, r7, #24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fcb0 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055b0:	f001 b895 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055b4:	f107 030c 	add.w	r3, r7, #12
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fe0d 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055c2:	f001 b88c 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055cc:	f001 b887 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d0:	4b61      	ldr	r3, [pc, #388]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d103      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80055de:	4b60      	ldr	r3, [pc, #384]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055e2:	f001 b87c 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ea:	f001 b878 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f2:	f001 b874 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80055f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055fa:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80055fe:	430b      	orrs	r3, r1
 8005600:	d158      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005602:	4b55      	ldr	r3, [pc, #340]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005604:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800560c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005614:	d03b      	beq.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d846      	bhi.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005624:	d02e      	beq.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562c:	d83e      	bhi.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d00b      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563c:	d836      	bhi.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564a:	d012      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800564c:	e02e      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800564e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff faf4 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800565c:	f001 b83f 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005660:	f107 0318 	add.w	r3, r7, #24
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff fc51 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800566e:	f001 b836 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff fdae 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005680:	f001 b82d 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005684:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800568a:	f001 b828 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800568e:	4b32      	ldr	r3, [pc, #200]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	d103      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800569c:	4b30      	ldr	r3, [pc, #192]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056a0:	f001 b81d 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056a8:	f001 b819 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056b0:	f001 b815 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80056b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80056bc:	430b      	orrs	r3, r1
 80056be:	d126      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80056c0:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80056cc:	4b22      	ldr	r3, [pc, #136]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d8:	d106      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
 80056e4:	f000 bffb 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f4:	d107      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fc:	d103      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80056fe:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
 8005702:	f000 bfec 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	f000 bfe8 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800570e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005712:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005716:	430b      	orrs	r3, r1
 8005718:	d164      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800571c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005720:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005724:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800572c:	d03d      	beq.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005734:	d852      	bhi.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800573c:	d014      	beq.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005744:	d84a      	bhi.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01f      	beq.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005752:	d012      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005754:	e042      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005756:	bf00      	nop
 8005758:	46020c00 	.word	0x46020c00
 800575c:	0007a120 	.word	0x0007a120
 8005760:	00f42400 	.word	0x00f42400
 8005764:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff fa67 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005776:	f000 bfb2 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800577a:	f107 0318 	add.w	r3, r7, #24
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fbc4 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005788:	f000 bfa9 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800578c:	4bab      	ldr	r3, [pc, #684]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005798:	d103      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800579a:	4ba9      	ldr	r3, [pc, #676]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800579e:	f000 bf9e 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057a6:	f000 bf9a 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057aa:	4ba4      	ldr	r3, [pc, #656]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80057b6:	4ba1      	ldr	r3, [pc, #644]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	0e1b      	lsrs	r3, r3, #24
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	e006      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80057c2:	4b9e      	ldr	r3, [pc, #632]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	0e1b      	lsrs	r3, r3, #24
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	4a9c      	ldr	r2, [pc, #624]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80057d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057d8:	f000 bf81 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057e0:	f000 bf7d 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80057e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80057ec:	430b      	orrs	r3, r1
 80057ee:	d175      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80057f0:	4b92      	ldr	r3, [pc, #584]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fa:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d15b      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005802:	4b8e      	ldr	r3, [pc, #568]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005808:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800580c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005814:	d034      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800581c:	d849      	bhi.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005824:	d00b      	beq.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800582c:	d841      	bhi.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800583a:	d009      	beq.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800583c:	e039      	b.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800583e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff f9fc 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800584c:	f000 bf47 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005850:	f107 0318 	add.w	r3, r7, #24
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fb59 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800585e:	f000 bf3e 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005862:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d103      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005874:	f000 bf33 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800587c:	f000 bf2f 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005880:	4b6e      	ldr	r3, [pc, #440]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800588c:	4b6b      	ldr	r3, [pc, #428]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	e006      	b.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005898:	4b68      	ldr	r3, [pc, #416]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800589a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	0e1b      	lsrs	r3, r3, #24
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	4a67      	ldr	r2, [pc, #412]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80058ae:	f000 bf16 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80058b6:	f000 bf12 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c0:	d108      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff f9ba 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	637b      	str	r3, [r7, #52]	; 0x34
 80058d0:	f000 bf05 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
 80058d8:	f000 bf01 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80058dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e0:	1e51      	subs	r1, r2, #1
 80058e2:	430b      	orrs	r3, r1
 80058e4:	d136      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80058e6:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80058e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80058f8:	f7fe fb34 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 80058fc:	6378      	str	r0, [r7, #52]	; 0x34
 80058fe:	f000 beee 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2b01      	cmp	r3, #1
 8005906:	d104      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005908:	f7fe f9f6 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 800590c:	6378      	str	r0, [r7, #52]	; 0x34
 800590e:	f000 bee6 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005912:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591e:	d106      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2b02      	cmp	r3, #2
 8005924:	d103      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8005926:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	f000 bed8 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800592e:	4b43      	ldr	r3, [pc, #268]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d107      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2b03      	cmp	r3, #3
 8005940:	d104      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	f000 bec9 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
 8005950:	f000 bec5 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005958:	1e91      	subs	r1, r2, #2
 800595a:	430b      	orrs	r3, r1
 800595c:	d136      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800595e:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe fae4 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005974:	6378      	str	r0, [r7, #52]	; 0x34
 8005976:	f000 beb2 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2b04      	cmp	r3, #4
 800597e:	d104      	bne.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005980:	f7fe f9ba 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005984:	6378      	str	r0, [r7, #52]	; 0x34
 8005986:	f000 beaa 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d106      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	2b08      	cmp	r3, #8
 800599c:	d103      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	f000 be9c 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80059a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d107      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d104      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
 80059c0:	f000 be8d 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
 80059c8:	f000 be89 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80059cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d0:	1f11      	subs	r1, r2, #4
 80059d2:	430b      	orrs	r3, r1
 80059d4:	d13e      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80059d6:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80059d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe faa8 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 80059ec:	6378      	str	r0, [r7, #52]	; 0x34
 80059ee:	f000 be76 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d104      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80059f8:	f7fe f97e 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 80059fc:	6378      	str	r0, [r7, #52]	; 0x34
 80059fe:	f000 be6e 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d103      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	f000 be60 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d10f      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	2b30      	cmp	r3, #48	; 0x30
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8005a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a36:	637b      	str	r3, [r7, #52]	; 0x34
 8005a38:	f000 be51 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005a3c:	46020c00 	.word	0x46020c00
 8005a40:	02dc6c00 	.word	0x02dc6c00
 8005a44:	080087d0 	.word	0x080087d0
 8005a48:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	f000 be45 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a58:	f1a2 0108 	sub.w	r1, r2, #8
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	d136      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005a60:	4b9f      	ldr	r3, [pc, #636]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a72:	f7fe fa63 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005a76:	6378      	str	r0, [r7, #52]	; 0x34
 8005a78:	f000 be31 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d104      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a82:	f7fe f939 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005a86:	6378      	str	r0, [r7, #52]	; 0x34
 8005a88:	f000 be29 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005a8c:	4b94      	ldr	r3, [pc, #592]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d103      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8005aa0:	4b90      	ldr	r3, [pc, #576]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	f000 be1b 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005aa8:	4b8d      	ldr	r3, [pc, #564]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d107      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	2bc0      	cmp	r3, #192	; 0xc0
 8005aba:	d104      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8005abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac2:	f000 be0c 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	f000 be08 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad2:	f1a2 0110 	sub.w	r1, r2, #16
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	d139      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005ada:	4b81      	ldr	r3, [pc, #516]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe fa26 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005af0:	6378      	str	r0, [r7, #52]	; 0x34
 8005af2:	f000 bdf4 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afc:	d104      	bne.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe f8fb 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005b02:	6378      	str	r0, [r7, #52]	; 0x34
 8005b04:	f000 bdeb 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005b08:	4b75      	ldr	r3, [pc, #468]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d107      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1c:	d103      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8005b1e:	4b71      	ldr	r3, [pc, #452]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	f000 bddc 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005b26:	4b6e      	ldr	r3, [pc, #440]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d108      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3a:	d104      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8005b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	f000 bdcc 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4a:	f000 bdc8 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b52:	f1a2 0120 	sub.w	r1, r2, #32
 8005b56:	430b      	orrs	r3, r1
 8005b58:	d158      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005b5a:	4b61      	ldr	r3, [pc, #388]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005b6c:	f7fe fa0e 	bl	8003f8c <HAL_RCC_GetPCLK3Freq>
 8005b70:	6378      	str	r0, [r7, #52]	; 0x34
 8005b72:	f000 bdb4 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d104      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005b7c:	f7fe f8bc 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005b80:	6378      	str	r0, [r7, #52]	; 0x34
 8005b82:	f000 bdac 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005b86:	4b56      	ldr	r3, [pc, #344]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8005b9a:	4b52      	ldr	r3, [pc, #328]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9e:	f000 bd9e 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005ba2:	4b4f      	ldr	r3, [pc, #316]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d104      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	f000 bd8f 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005bc0:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d11b      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d118      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bd2:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005bde:	4b40      	ldr	r3, [pc, #256]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	e006      	b.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	0e1b      	lsrs	r3, r3, #24
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	4a3b      	ldr	r2, [pc, #236]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005c00:	f000 bd6d 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
 8005c08:	f000 bd69 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c10:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005c14:	430b      	orrs	r3, r1
 8005c16:	d169      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005c18:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c22:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	d104      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c2c:	f7fe f864 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005c30:	6378      	str	r0, [r7, #52]	; 0x34
 8005c32:	f000 bd54 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d108      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c3e:	f107 0318 	add.w	r3, r7, #24
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f962 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	f000 bd47 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005c56:	f7fe f957 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8005c5a:	6378      	str	r0, [r7, #52]	; 0x34
 8005c5c:	f000 bd3f 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c66:	d118      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	0f1b      	lsrs	r3, r3, #28
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	e006      	b.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	0f1b      	lsrs	r3, r3, #28
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
 8005c96:	f000 bd22 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cae:	d103      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb4:	f000 bd13 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ccc:	d103      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd2:	f000 bd04 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cda:	f000 bd00 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005cde:	bf00      	nop
 8005ce0:	46020c00 	.word	0x46020c00
 8005ce4:	00f42400 	.word	0x00f42400
 8005ce8:	080087d0 	.word	0x080087d0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	d14e      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005cf8:	4ba8      	ldr	r3, [pc, #672]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d841      	bhi.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d49 	.word	0x08005d49
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d37 	.word	0x08005d37
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d5d 	.word	0x08005d5d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe ff89 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d32:	f000 bcd4 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d36:	f107 030c 	add.w	r3, r7, #12
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fa4c 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d44:	f000 bccb 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005d48:	f7fe f8de 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8005d4c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d4e:	f000 bcc6 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005d52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d58:	f000 bcc1 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d5c:	4b8f      	ldr	r3, [pc, #572]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8005d68:	4b8c      	ldr	r3, [pc, #560]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	0e1b      	lsrs	r3, r3, #24
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	e006      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005d74:	4b89      	ldr	r3, [pc, #548]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	0e1b      	lsrs	r3, r3, #24
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	4a87      	ldr	r2, [pc, #540]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d8a:	f000 bca8 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d92:	f000 bca4 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d9a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	d15d      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005da2:	4b7e      	ldr	r3, [pc, #504]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005da8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005db4:	d036      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dbc:	d84b      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dc4:	d029      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dcc:	d843      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd4:	d013      	beq.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ddc:	d83b      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d015      	beq.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dea:	d134      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe ff25 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dfa:	f000 bc70 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dfe:	f107 030c 	add.w	r3, r7, #12
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff f9e8 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e0c:	f000 bc67 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005e10:	f7fe f87a 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8005e14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e16:	f000 bc62 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e20:	f000 bc5d 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e24:	4b5d      	ldr	r3, [pc, #372]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005e30:	4b5a      	ldr	r3, [pc, #360]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	0e1b      	lsrs	r3, r3, #24
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	e006      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8005e3c:	4b57      	ldr	r3, [pc, #348]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	0e1b      	lsrs	r3, r3, #24
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	4a55      	ldr	r2, [pc, #340]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e52:	f000 bc44 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e5a:	f000 bc40 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e62:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005e66:	430b      	orrs	r3, r1
 8005e68:	d14a      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e6a:	4b4c      	ldr	r3, [pc, #304]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fe f85e 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005e80:	6378      	str	r0, [r7, #52]	; 0x34
 8005e82:	f000 bc2c 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d104      	bne.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e8e:	f7fd ff33 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005e92:	6378      	str	r0, [r7, #52]	; 0x34
 8005e94:	f000 bc23 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005e98:	4b40      	ldr	r3, [pc, #256]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eac:	d103      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8005eae:	4b3d      	ldr	r3, [pc, #244]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb2:	f000 bc14 	b.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005eb6:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d11b      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ec8:	d117      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005eca:	4b34      	ldr	r3, [pc, #208]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8005ed6:	4b31      	ldr	r3, [pc, #196]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	0e1b      	lsrs	r3, r3, #24
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005ee2:	4b2e      	ldr	r3, [pc, #184]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	0e1b      	lsrs	r3, r3, #24
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	4a2b      	ldr	r2, [pc, #172]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef8:	e3f1      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
 8005efe:	e3ee      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f04:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	d14d      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f0c:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7fe f80d 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005f22:	6378      	str	r0, [r7, #52]	; 0x34
 8005f24:	e3db      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	d103      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fd fee3 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8005f32:	6378      	str	r0, [r7, #52]	; 0x34
 8005f34:	e3d3      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f42:	d106      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f50:	e3c5      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005f52:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	d11b      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f64:	d117      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8005f72:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	0e1b      	lsrs	r3, r3, #24
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
 8005f94:	e3a3      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	e3a0      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005f9c:	46020c00 	.word	0x46020c00
 8005fa0:	080087d0 	.word	0x080087d0
 8005fa4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	d148      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005fb4:	4b9d      	ldr	r3, [pc, #628]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fc4:	d024      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2bc0      	cmp	r3, #192	; 0xc0
 8005fca:	d839      	bhi.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d00d      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d833      	bhi.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d011      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005fe4:	e02c      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005fe6:	f7fd ffd1 	bl	8003f8c <HAL_RCC_GetPCLK3Freq>
 8005fea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fec:	e377      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fee:	4b8f      	ldr	r3, [pc, #572]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffa:	d102      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8005ffc:	4b8c      	ldr	r3, [pc, #560]	; (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006000:	e36d      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006006:	e36a      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006008:	f7fd fe76 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 800600c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800600e:	e366      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006010:	4b86      	ldr	r3, [pc, #536]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800601c:	4b83      	ldr	r3, [pc, #524]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0f1b      	lsrs	r3, r3, #28
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006028:	4b80      	ldr	r3, [pc, #512]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800602a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0f1b      	lsrs	r3, r3, #28
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a7f      	ldr	r2, [pc, #508]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800603e:	e34e      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006044:	e34b      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800604e:	430b      	orrs	r3, r1
 8006050:	d147      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006052:	4b76      	ldr	r3, [pc, #472]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800605c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006064:	f7fd ff6a 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8006068:	6378      	str	r0, [r7, #52]	; 0x34
 800606a:	e338      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006072:	d103      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006074:	f7fd fe40 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8006078:	6378      	str	r0, [r7, #52]	; 0x34
 800607a:	e330      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800607c:	4b6b      	ldr	r3, [pc, #428]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d106      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006090:	d102      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006092:	4b67      	ldr	r3, [pc, #412]	; (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
 8006096:	e322      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006098:	4b64      	ldr	r3, [pc, #400]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d11b      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060aa:	d117      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060ac:	4b5f      	ldr	r3, [pc, #380]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80060b8:	4b5c      	ldr	r3, [pc, #368]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	0e1b      	lsrs	r3, r3, #24
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	e006      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80060c4:	4b59      	ldr	r3, [pc, #356]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80060c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	4a58      	ldr	r2, [pc, #352]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80060d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
 80060da:	e300      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
 80060e0:	e2fd      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80060e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80060ea:	430b      	orrs	r3, r1
 80060ec:	d15b      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80060ee:	4b4f      	ldr	r3, [pc, #316]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80060f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d117      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006100:	4b4a      	ldr	r3, [pc, #296]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800610c:	4b47      	ldr	r3, [pc, #284]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	e006      	b.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006118:	4b44      	ldr	r3, [pc, #272]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800611a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	0e1b      	lsrs	r3, r3, #24
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	4a43      	ldr	r2, [pc, #268]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
 800612e:	e2d6      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006130:	4b3e      	ldr	r3, [pc, #248]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800613a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800613e:	d112      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	d10e      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006148:	4b38      	ldr	r3, [pc, #224]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800614a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006156:	d102      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006158:	23fa      	movs	r3, #250	; 0xfa
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800615c:	e2bf      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800615e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006164:	e2bb      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006166:	4b31      	ldr	r3, [pc, #196]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006172:	d106      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617a:	d102      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800617c:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	e2ad      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006182:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b02      	cmp	r3, #2
 800618e:	d107      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006196:	d103      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	e29e      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
 80061a4:	e29b      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061aa:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80061ae:	430b      	orrs	r3, r1
 80061b0:	d162      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d117      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061c4:	4b19      	ldr	r3, [pc, #100]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80061d0:	4b16      	ldr	r3, [pc, #88]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	0e1b      	lsrs	r3, r3, #24
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	e006      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80061dc:	4b13      	ldr	r3, [pc, #76]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	0e1b      	lsrs	r3, r3, #24
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
 80061f2:	e274      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006202:	d119      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d115      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800620e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800621a:	d102      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800621c:	23fa      	movs	r3, #250	; 0xfa
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006220:	e25d      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006222:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006228:	e259      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800622a:	bf00      	nop
 800622c:	46020c00 	.word	0x46020c00
 8006230:	00f42400 	.word	0x00f42400
 8006234:	080087d0 	.word	0x080087d0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006238:	4b9d      	ldr	r3, [pc, #628]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d106      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624c:	d102      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800624e:	4b99      	ldr	r3, [pc, #612]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
 8006252:	e244      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006254:	4b96      	ldr	r3, [pc, #600]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006268:	d103      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
 8006270:	e235      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
 8006276:	e232      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006280:	430b      	orrs	r3, r1
 8006282:	d147      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006284:	4b8a      	ldr	r3, [pc, #552]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800628a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800628e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006296:	f7fd fe51 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 800629a:	6378      	str	r0, [r7, #52]	; 0x34
 800629c:	e21f      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800629e:	4b84      	ldr	r3, [pc, #528]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ac:	d112      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062b4:	d10e      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062b6:	4b7e      	ldr	r3, [pc, #504]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062c4:	d102      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80062c6:	23fa      	movs	r3, #250	; 0xfa
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062ca:	e208      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80062cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062d2:	e204      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80062d4:	4b76      	ldr	r3, [pc, #472]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e0:	d106      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062e8:	d102      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80062ea:	4b72      	ldr	r3, [pc, #456]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
 80062ee:	e1f6      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80062f0:	4b6f      	ldr	r3, [pc, #444]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d107      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006304:	d103      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
 800630c:	e1e7      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	e1e4      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006318:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800631c:	430b      	orrs	r3, r1
 800631e:	d12d      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006320:	4b63      	ldr	r3, [pc, #396]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006326:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800632a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800632c:	4b60      	ldr	r3, [pc, #384]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006340:	4b5c      	ldr	r3, [pc, #368]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
 8006344:	e1cb      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800634c:	d107      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800634e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fc74 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
 800635c:	e1bf      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006364:	d107      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006366:	f107 0318 	add.w	r3, r7, #24
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fdce 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	e1b3      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
 800637a:	e1b0      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800637c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006380:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006384:	430b      	orrs	r3, r1
 8006386:	d14d      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006388:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800638a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800638e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006392:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800639a:	d028      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063a2:	d83c      	bhi.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063aa:	d013      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063b2:	d834      	bhi.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c0:	d004      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80063c2:	e02c      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fd fdce 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 80063c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063ca:	e188      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80063cc:	f7fd fc94 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 80063d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063d2:	e184      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d4:	4b36      	ldr	r3, [pc, #216]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e0:	d102      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80063e2:	4b34      	ldr	r3, [pc, #208]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063e6:	e17a      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ec:	e177      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063ee:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	0e1b      	lsrs	r3, r3, #24
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	e006      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006406:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800640c:	041b      	lsls	r3, r3, #16
 800640e:	0e1b      	lsrs	r3, r3, #24
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800641c:	e15f      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006422:	e15c      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006428:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800642c:	430b      	orrs	r3, r1
 800642e:	d154      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006430:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006442:	d028      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800644a:	d843      	bhi.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006452:	d013      	beq.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800645a:	d83b      	bhi.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d004      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800646a:	e033      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800646c:	f7fd fd66 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8006470:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006472:	e134      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006474:	f7fd fc40 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8006478:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800647a:	e130      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006488:	d102      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800648e:	e126      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006494:	e123      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80064a2:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	0e1b      	lsrs	r3, r3, #24
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	e00d      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80064ae:	bf00      	nop
 80064b0:	46020c00 	.word	0x46020c00
 80064b4:	00f42400 	.word	0x00f42400
 80064b8:	080087d0 	.word	0x080087d0
 80064bc:	4b8a      	ldr	r3, [pc, #552]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	4a88      	ldr	r2, [pc, #544]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d2:	e104      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d8:	e101      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80064da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064de:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80064e2:	430b      	orrs	r3, r1
 80064e4:	d16e      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80064e6:	4b80      	ldr	r3, [pc, #512]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064ec:	f003 0318 	and.w	r3, r3, #24
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b18      	cmp	r3, #24
 80064f6:	d862      	bhi.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80064f8:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006565 	.word	0x08006565
 8006504:	080065bf 	.word	0x080065bf
 8006508:	080065bf 	.word	0x080065bf
 800650c:	080065bf 	.word	0x080065bf
 8006510:	080065bf 	.word	0x080065bf
 8006514:	080065bf 	.word	0x080065bf
 8006518:	080065bf 	.word	0x080065bf
 800651c:	080065bf 	.word	0x080065bf
 8006520:	0800656d 	.word	0x0800656d
 8006524:	080065bf 	.word	0x080065bf
 8006528:	080065bf 	.word	0x080065bf
 800652c:	080065bf 	.word	0x080065bf
 8006530:	080065bf 	.word	0x080065bf
 8006534:	080065bf 	.word	0x080065bf
 8006538:	080065bf 	.word	0x080065bf
 800653c:	080065bf 	.word	0x080065bf
 8006540:	08006575 	.word	0x08006575
 8006544:	080065bf 	.word	0x080065bf
 8006548:	080065bf 	.word	0x080065bf
 800654c:	080065bf 	.word	0x080065bf
 8006550:	080065bf 	.word	0x080065bf
 8006554:	080065bf 	.word	0x080065bf
 8006558:	080065bf 	.word	0x080065bf
 800655c:	080065bf 	.word	0x080065bf
 8006560:	0800658f 	.word	0x0800658f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006564:	f7fd fd12 	bl	8003f8c <HAL_RCC_GetPCLK3Freq>
 8006568:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800656a:	e0b8      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800656c:	f7fd fbc4 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8006570:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006572:	e0b4      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006574:	4b5c      	ldr	r3, [pc, #368]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006580:	d102      	bne.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8006582:	4b5b      	ldr	r3, [pc, #364]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006586:	e0aa      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800658c:	e0a7      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800658e:	4b56      	ldr	r3, [pc, #344]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800659a:	4b53      	ldr	r3, [pc, #332]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	0e1b      	lsrs	r3, r3, #24
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80065a6:	4b50      	ldr	r3, [pc, #320]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80065a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	0e1b      	lsrs	r3, r3, #24
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80065b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065bc:	e08f      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c2:	e08c      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80065c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80065cc:	430b      	orrs	r3, r1
 80065ce:	d14c      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80065d0:	4b45      	ldr	r3, [pc, #276]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80065d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065e2:	d013      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065ea:	d83b      	bhi.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065f2:	d013      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065fa:	d833      	bhi.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d014      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006608:	d014      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800660a:	e02b      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800660c:	f107 0318 	add.w	r3, r7, #24
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fc7b 	bl	8004f0c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800661a:	e060      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800661c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fb0d 	bl	8004c40 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800662a:	e058      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800662c:	f7fd fb64 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8006630:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006632:	e054      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006634:	4b2c      	ldr	r3, [pc, #176]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8006640:	4b29      	ldr	r3, [pc, #164]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	e006      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800664c:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800664e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	4a24      	ldr	r2, [pc, #144]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006662:	e03c      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006668:	e039      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800666a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006672:	430b      	orrs	r3, r1
 8006674:	d131      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006676:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800667c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006680:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006682:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b02      	cmp	r3, #2
 800668e:	d106      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8006696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
 800669c:	e01f      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80066a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ac:	d112      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	d10e      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80066b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c4:	d102      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80066c6:	23fa      	movs	r3, #250	; 0xfa
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066ca:	e008      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80066cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
 80066d8:	e001      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80066de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3738      	adds	r7, #56	; 0x38
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	46020c00 	.word	0x46020c00
 80066ec:	080087d0 	.word	0x080087d0
 80066f0:	00f42400 	.word	0x00f42400

080066f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80066fc:	4b47      	ldr	r3, [pc, #284]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a46      	ldr	r2, [pc, #280]	; (800681c <RCCEx_PLL2_Config+0x128>)
 8006702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006706:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006708:	f7fa ff32 	bl	8001570 <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800670e:	e008      	b.n	8006722 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006710:	f7fa ff2e 	bl	8001570 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e077      	b.n	8006812 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006722:	4b3e      	ldr	r3, [pc, #248]	; (800681c <RCCEx_PLL2_Config+0x128>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800672e:	4b3b      	ldr	r3, [pc, #236]	; (800681c <RCCEx_PLL2_Config+0x128>)
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6811      	ldr	r1, [r2, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6852      	ldr	r2, [r2, #4]
 8006742:	3a01      	subs	r2, #1
 8006744:	0212      	lsls	r2, r2, #8
 8006746:	430a      	orrs	r2, r1
 8006748:	4934      	ldr	r1, [pc, #208]	; (800681c <RCCEx_PLL2_Config+0x128>)
 800674a:	4313      	orrs	r3, r2
 800674c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800674e:	4b33      	ldr	r3, [pc, #204]	; (800681c <RCCEx_PLL2_Config+0x128>)
 8006750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006752:	4b33      	ldr	r3, [pc, #204]	; (8006820 <RCCEx_PLL2_Config+0x12c>)
 8006754:	4013      	ands	r3, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6892      	ldr	r2, [r2, #8]
 800675a:	3a01      	subs	r2, #1
 800675c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68d2      	ldr	r2, [r2, #12]
 8006764:	3a01      	subs	r2, #1
 8006766:	0252      	lsls	r2, r2, #9
 8006768:	b292      	uxth	r2, r2
 800676a:	4311      	orrs	r1, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6912      	ldr	r2, [r2, #16]
 8006770:	3a01      	subs	r2, #1
 8006772:	0412      	lsls	r2, r2, #16
 8006774:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006778:	4311      	orrs	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6952      	ldr	r2, [r2, #20]
 800677e:	3a01      	subs	r2, #1
 8006780:	0612      	lsls	r2, r2, #24
 8006782:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006786:	430a      	orrs	r2, r1
 8006788:	4924      	ldr	r1, [pc, #144]	; (800681c <RCCEx_PLL2_Config+0x128>)
 800678a:	4313      	orrs	r3, r2
 800678c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800678e:	4b23      	ldr	r3, [pc, #140]	; (800681c <RCCEx_PLL2_Config+0x128>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f023 020c 	bic.w	r2, r3, #12
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	4920      	ldr	r1, [pc, #128]	; (800681c <RCCEx_PLL2_Config+0x128>)
 800679c:	4313      	orrs	r3, r2
 800679e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80067a0:	4b1e      	ldr	r3, [pc, #120]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	491c      	ldr	r1, [pc, #112]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80067ae:	4b1b      	ldr	r3, [pc, #108]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	4a1a      	ldr	r2, [pc, #104]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067b4:	f023 0310 	bic.w	r3, r3, #16
 80067b8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	69d2      	ldr	r2, [r2, #28]
 80067ca:	00d2      	lsls	r2, r2, #3
 80067cc:	4913      	ldr	r1, [pc, #76]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	4a11      	ldr	r2, [pc, #68]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067d8:	f043 0310 	orr.w	r3, r3, #16
 80067dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a0e      	ldr	r2, [pc, #56]	; (800681c <RCCEx_PLL2_Config+0x128>)
 80067e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067ea:	f7fa fec1 	bl	8001570 <HAL_GetTick>
 80067ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067f0:	e008      	b.n	8006804 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067f2:	f7fa febd 	bl	8001570 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e006      	b.n	8006812 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <RCCEx_PLL2_Config+0x128>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0

}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	46020c00 	.word	0x46020c00
 8006820:	80800000 	.word	0x80800000

08006824 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800682c:	4b47      	ldr	r3, [pc, #284]	; (800694c <RCCEx_PLL3_Config+0x128>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a46      	ldr	r2, [pc, #280]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006836:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006838:	f7fa fe9a 	bl	8001570 <HAL_GetTick>
 800683c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800683e:	e008      	b.n	8006852 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006840:	f7fa fe96 	bl	8001570 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e077      	b.n	8006942 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006852:	4b3e      	ldr	r3, [pc, #248]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800685e:	4b3b      	ldr	r3, [pc, #236]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6811      	ldr	r1, [r2, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6852      	ldr	r2, [r2, #4]
 8006872:	3a01      	subs	r2, #1
 8006874:	0212      	lsls	r2, r2, #8
 8006876:	430a      	orrs	r2, r1
 8006878:	4934      	ldr	r1, [pc, #208]	; (800694c <RCCEx_PLL3_Config+0x128>)
 800687a:	4313      	orrs	r3, r2
 800687c:	630b      	str	r3, [r1, #48]	; 0x30
 800687e:	4b33      	ldr	r3, [pc, #204]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006882:	4b33      	ldr	r3, [pc, #204]	; (8006950 <RCCEx_PLL3_Config+0x12c>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6892      	ldr	r2, [r2, #8]
 800688a:	3a01      	subs	r2, #1
 800688c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68d2      	ldr	r2, [r2, #12]
 8006894:	3a01      	subs	r2, #1
 8006896:	0252      	lsls	r2, r2, #9
 8006898:	b292      	uxth	r2, r2
 800689a:	4311      	orrs	r1, r2
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6912      	ldr	r2, [r2, #16]
 80068a0:	3a01      	subs	r2, #1
 80068a2:	0412      	lsls	r2, r2, #16
 80068a4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80068a8:	4311      	orrs	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6952      	ldr	r2, [r2, #20]
 80068ae:	3a01      	subs	r2, #1
 80068b0:	0612      	lsls	r2, r2, #24
 80068b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80068b6:	430a      	orrs	r2, r1
 80068b8:	4924      	ldr	r1, [pc, #144]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f023 020c 	bic.w	r2, r3, #12
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	4920      	ldr	r1, [pc, #128]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80068d0:	4b1e      	ldr	r3, [pc, #120]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	491c      	ldr	r1, [pc, #112]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80068de:	4b1b      	ldr	r3, [pc, #108]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	4a1a      	ldr	r2, [pc, #104]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068e4:	f023 0310 	bic.w	r3, r3, #16
 80068e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068ea:	4b18      	ldr	r3, [pc, #96]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	69d2      	ldr	r2, [r2, #28]
 80068fa:	00d2      	lsls	r2, r2, #3
 80068fc:	4913      	ldr	r1, [pc, #76]	; (800694c <RCCEx_PLL3_Config+0x128>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	4a11      	ldr	r2, [pc, #68]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006908:	f043 0310 	orr.w	r3, r3, #16
 800690c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800690e:	4b0f      	ldr	r3, [pc, #60]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a0e      	ldr	r2, [pc, #56]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006918:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800691a:	f7fa fe29 	bl	8001570 <HAL_GetTick>
 800691e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006920:	e008      	b.n	8006934 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006922:	f7fa fe25 	bl	8001570 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <RCCEx_PLL3_Config+0x128>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	46020c00 	.word	0x46020c00
 8006950:	80800000 	.word	0x80800000

08006954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e042      	b.n	80069ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fa fcef 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2224      	movs	r2, #36	; 0x24
 8006982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f8d2 	bl	8006b40 <UART_SetConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e022      	b.n	80069ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa68 	bl	8006e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 faef 	bl	8006fc8 <UART_CheckIdleState>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	f040 8092 	bne.w	8006b34 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_UART_Transmit+0x28>
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e08a      	b.n	8006b36 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Transmit+0x3a>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e083      	b.n	8006b36 <HAL_UART_Transmit+0x142>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a40:	2b80      	cmp	r3, #128	; 0x80
 8006a42:	d107      	bne.n	8006a54 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a52:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2221      	movs	r2, #33	; 0x21
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a64:	f7fa fd84 	bl	8001570 <HAL_GetTick>
 8006a68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	d108      	bne.n	8006a96 <HAL_UART_Transmit+0xa2>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	e003      	b.n	8006a9e <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006aa6:	e02c      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2180      	movs	r1, #128	; 0x80
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fad3 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e039      	b.n	8006b36 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	3302      	adds	r3, #2
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	e007      	b.n	8006af0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3301      	adds	r3, #1
 8006aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1cc      	bne.n	8006aa8 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2140      	movs	r1, #64	; 0x40
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 faa0 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e006      	b.n	8006b36 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006b34:	2302      	movs	r3, #2
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b44:	b094      	sub	sp, #80	; 0x50
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b7e      	ldr	r3, [pc, #504]	; (8006d50 <UART_SetConfig+0x210>)
 8006b56:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4977      	ldr	r1, [pc, #476]	; (8006d54 <UART_SetConfig+0x214>)
 8006b78:	4019      	ands	r1, r3
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	ea40 0301 	orr.w	r3, r0, r1
 8006b9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <UART_SetConfig+0x210>)
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d009      	beq.n	8006bc0 <UART_SetConfig+0x80>
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b69      	ldr	r3, [pc, #420]	; (8006d58 <UART_SetConfig+0x218>)
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d004      	beq.n	8006bc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006bca:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	f023 000f 	bic.w	r0, r3, #15
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	ea40 0301 	orr.w	r3, r0, r1
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b59      	ldr	r3, [pc, #356]	; (8006d5c <UART_SetConfig+0x21c>)
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d102      	bne.n	8006c00 <UART_SetConfig+0xc0>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bfe:	e029      	b.n	8006c54 <UART_SetConfig+0x114>
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b56      	ldr	r3, [pc, #344]	; (8006d60 <UART_SetConfig+0x220>)
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d102      	bne.n	8006c10 <UART_SetConfig+0xd0>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c0e:	e021      	b.n	8006c54 <UART_SetConfig+0x114>
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b53      	ldr	r3, [pc, #332]	; (8006d64 <UART_SetConfig+0x224>)
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d102      	bne.n	8006c20 <UART_SetConfig+0xe0>
 8006c1a:	2304      	movs	r3, #4
 8006c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c1e:	e019      	b.n	8006c54 <UART_SetConfig+0x114>
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <UART_SetConfig+0x228>)
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d102      	bne.n	8006c30 <UART_SetConfig+0xf0>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c2e:	e011      	b.n	8006c54 <UART_SetConfig+0x114>
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b4d      	ldr	r3, [pc, #308]	; (8006d6c <UART_SetConfig+0x22c>)
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d102      	bne.n	8006c40 <UART_SetConfig+0x100>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3e:	e009      	b.n	8006c54 <UART_SetConfig+0x114>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4b42      	ldr	r3, [pc, #264]	; (8006d50 <UART_SetConfig+0x210>)
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d102      	bne.n	8006c50 <UART_SetConfig+0x110>
 8006c4a:	2320      	movs	r3, #32
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4e:	e001      	b.n	8006c54 <UART_SetConfig+0x114>
 8006c50:	2300      	movs	r3, #0
 8006c52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b3d      	ldr	r3, [pc, #244]	; (8006d50 <UART_SetConfig+0x210>)
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d005      	beq.n	8006c6a <UART_SetConfig+0x12a>
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b3d      	ldr	r3, [pc, #244]	; (8006d58 <UART_SetConfig+0x218>)
 8006c64:	429a      	cmp	r2, r3
 8006c66:	f040 8085 	bne.w	8006d74 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	623b      	str	r3, [r7, #32]
 8006c70:	627a      	str	r2, [r7, #36]	; 0x24
 8006c72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c76:	f7fe fc15 	bl	80054a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c7a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80e8 	beq.w	8006e54 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	4a39      	ldr	r2, [pc, #228]	; (8006d70 <UART_SetConfig+0x230>)
 8006c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d305      	bcc.n	8006cb4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006cba:	e048      	b.n	8006d4e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	61fa      	str	r2, [r7, #28]
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <UART_SetConfig+0x230>)
 8006cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	617a      	str	r2, [r7, #20]
 8006cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cde:	f7f9 fac9 	bl	8000274 <__aeabi_uldivmod>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4619      	mov	r1, r3
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	020b      	lsls	r3, r1, #8
 8006cf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cf8:	0202      	lsls	r2, r0, #8
 8006cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfc:	6849      	ldr	r1, [r1, #4]
 8006cfe:	0849      	lsrs	r1, r1, #1
 8006d00:	2000      	movs	r0, #0
 8006d02:	460c      	mov	r4, r1
 8006d04:	4605      	mov	r5, r0
 8006d06:	eb12 0804 	adds.w	r8, r2, r4
 8006d0a:	eb43 0905 	adc.w	r9, r3, r5
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	60fa      	str	r2, [r7, #12]
 8006d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 faa8 	bl	8000274 <__aeabi_uldivmod>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4613      	mov	r3, r2
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d32:	d308      	bcc.n	8006d46 <UART_SetConfig+0x206>
 8006d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3a:	d204      	bcs.n	8006d46 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	e003      	b.n	8006d4e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8006d4c:	e082      	b.n	8006e54 <UART_SetConfig+0x314>
 8006d4e:	e081      	b.n	8006e54 <UART_SetConfig+0x314>
 8006d50:	46002400 	.word	0x46002400
 8006d54:	cfff69f3 	.word	0xcfff69f3
 8006d58:	56002400 	.word	0x56002400
 8006d5c:	40013800 	.word	0x40013800
 8006d60:	40004400 	.word	0x40004400
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40004c00 	.word	0x40004c00
 8006d6c:	40005000 	.word	0x40005000
 8006d70:	08008890 	.word	0x08008890
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7c:	d13c      	bne.n	8006df8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d80:	2200      	movs	r2, #0
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d8a:	f7fe fb8b 	bl	80054a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d8e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d05e      	beq.n	8006e54 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	4a39      	ldr	r2, [pc, #228]	; (8006e80 <UART_SetConfig+0x340>)
 8006d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006da8:	005a      	lsls	r2, r3, #1
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	441a      	add	r2, r3
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	2b0f      	cmp	r3, #15
 8006dc0:	d916      	bls.n	8006df0 <UART_SetConfig+0x2b0>
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d212      	bcs.n	8006df0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f023 030f 	bic.w	r3, r3, #15
 8006dd2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006de2:	4313      	orrs	r3, r2
 8006de4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006dec:	60da      	str	r2, [r3, #12]
 8006dee:	e031      	b.n	8006e54 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006df6:	e02d      	b.n	8006e54 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	469a      	mov	sl, r3
 8006dfe:	4693      	mov	fp, r2
 8006e00:	4650      	mov	r0, sl
 8006e02:	4659      	mov	r1, fp
 8006e04:	f7fe fb4e 	bl	80054a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e08:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d021      	beq.n	8006e54 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <UART_SetConfig+0x340>)
 8006e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	441a      	add	r2, r3
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	2b0f      	cmp	r3, #15
 8006e38:	d909      	bls.n	8006e4e <UART_SetConfig+0x30e>
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e40:	d205      	bcs.n	8006e4e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60da      	str	r2, [r3, #12]
 8006e4c:	e002      	b.n	8006e54 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2201      	movs	r2, #1
 8006e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	2200      	movs	r2, #0
 8006e68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3750      	adds	r7, #80	; 0x50
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7e:	bf00      	nop
 8006e80:	08008890 	.word	0x08008890

08006e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f82:	d10a      	bne.n	8006f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fd8:	f7fa faca 	bl	8001570 <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d10e      	bne.n	800700a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f82f 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e025      	b.n	8007056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b04      	cmp	r3, #4
 8007016:	d10e      	bne.n	8007036 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f819 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e00f      	b.n	8007056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b09c      	sub	sp, #112	; 0x70
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	e0a9      	b.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	f000 80a5 	beq.w	80071c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707a:	f7fa fa79 	bl	8001570 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007086:	429a      	cmp	r2, r3
 8007088:	d302      	bcc.n	8007090 <UART_WaitOnFlagUntilTimeout+0x32>
 800708a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708c:	2b00      	cmp	r3, #0
 800708e:	d140      	bne.n	8007112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070a4:	667b      	str	r3, [r7, #100]	; 0x64
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	663b      	str	r3, [r7, #96]	; 0x60
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e5      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e069      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d051      	beq.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800712a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712e:	d149      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007138:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800714e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
 800715a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800715e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	613b      	str	r3, [r7, #16]
   return(result);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	66bb      	str	r3, [r7, #104]	; 0x68
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800718c:	623a      	str	r2, [r7, #32]
 800718e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	69f9      	ldr	r1, [r7, #28]
 8007192:	6a3a      	ldr	r2, [r7, #32]
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	61bb      	str	r3, [r7, #24]
   return(result);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e010      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69da      	ldr	r2, [r3, #28]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4013      	ands	r3, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bf0c      	ite	eq
 80071d4:	2301      	moveq	r3, #1
 80071d6:	2300      	movne	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	429a      	cmp	r2, r3
 80071e0:	f43f af46 	beq.w	8007070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3770      	adds	r7, #112	; 0x70
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UARTEx_DisableFifoMode+0x16>
 8007200:	2302      	movs	r3, #2
 8007202:	e027      	b.n	8007254 <HAL_UARTEx_DisableFifoMode+0x66>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2224      	movs	r2, #36	; 0x24
 8007210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007232:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e02d      	b.n	80072d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2224      	movs	r2, #36	; 0x24
 8007284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0201 	bic.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f84f 	bl	8007358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e02d      	b.n	8007350 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2224      	movs	r2, #36	; 0x24
 8007300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0201 	bic.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f811 	bl	8007358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007378:	e031      	b.n	80073de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800737a:	2308      	movs	r3, #8
 800737c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800737e:	2308      	movs	r3, #8
 8007380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	0e5b      	lsrs	r3, r3, #25
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	0f5b      	lsrs	r3, r3, #29
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	7b3a      	ldrb	r2, [r7, #12]
 80073a6:	4911      	ldr	r1, [pc, #68]	; (80073ec <UARTEx_SetNbDataToProcess+0x94>)
 80073a8:	5c8a      	ldrb	r2, [r1, r2]
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ae:	7b3a      	ldrb	r2, [r7, #12]
 80073b0:	490f      	ldr	r1, [pc, #60]	; (80073f0 <UARTEx_SetNbDataToProcess+0x98>)
 80073b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	7b7a      	ldrb	r2, [r7, #13]
 80073c4:	4909      	ldr	r1, [pc, #36]	; (80073ec <UARTEx_SetNbDataToProcess+0x94>)
 80073c6:	5c8a      	ldrb	r2, [r1, r2]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073cc:	7b7a      	ldrb	r2, [r7, #13]
 80073ce:	4908      	ldr	r1, [pc, #32]	; (80073f0 <UARTEx_SetNbDataToProcess+0x98>)
 80073d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	080088a8 	.word	0x080088a8
 80073f0:	080088b0 	.word	0x080088b0

080073f4 <__errno>:
 80073f4:	4b01      	ldr	r3, [pc, #4]	; (80073fc <__errno+0x8>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000020 	.word	0x20000020

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4d0d      	ldr	r5, [pc, #52]	; (8007438 <__libc_init_array+0x38>)
 8007404:	2600      	movs	r6, #0
 8007406:	4c0d      	ldr	r4, [pc, #52]	; (800743c <__libc_init_array+0x3c>)
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	4d0b      	ldr	r5, [pc, #44]	; (8007440 <__libc_init_array+0x40>)
 8007412:	2600      	movs	r6, #0
 8007414:	4c0b      	ldr	r4, [pc, #44]	; (8007444 <__libc_init_array+0x44>)
 8007416:	f001 f823 	bl	8008460 <_init>
 800741a:	1b64      	subs	r4, r4, r5
 800741c:	10a4      	asrs	r4, r4, #2
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f855 3b04 	ldr.w	r3, [r5], #4
 8007428:	3601      	adds	r6, #1
 800742a:	4798      	blx	r3
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007432:	3601      	adds	r6, #1
 8007434:	4798      	blx	r3
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	08008958 	.word	0x08008958
 800743c:	08008958 	.word	0x08008958
 8007440:	08008958 	.word	0x08008958
 8007444:	0800895c 	.word	0x0800895c

08007448 <memset>:
 8007448:	4402      	add	r2, r0
 800744a:	4603      	mov	r3, r0
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	f803 1b01 	strb.w	r1, [r3], #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <__sfputc_r>:
 8007458:	6893      	ldr	r3, [r2, #8]
 800745a:	3b01      	subs	r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	6093      	str	r3, [r2, #8]
 8007460:	b410      	push	{r4}
 8007462:	da08      	bge.n	8007476 <__sfputc_r+0x1e>
 8007464:	6994      	ldr	r4, [r2, #24]
 8007466:	42a3      	cmp	r3, r4
 8007468:	db01      	blt.n	800746e <__sfputc_r+0x16>
 800746a:	290a      	cmp	r1, #10
 800746c:	d103      	bne.n	8007476 <__sfputc_r+0x1e>
 800746e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007472:	f000 bb19 	b.w	8007aa8 <__swbuf_r>
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	1c58      	adds	r0, r3, #1
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	4608      	mov	r0, r1
 800747e:	7019      	strb	r1, [r3, #0]
 8007480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007484:	4770      	bx	lr

08007486 <__sfputs_r>:
 8007486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	4614      	mov	r4, r2
 800748e:	18d5      	adds	r5, r2, r3
 8007490:	42ac      	cmp	r4, r5
 8007492:	d101      	bne.n	8007498 <__sfputs_r+0x12>
 8007494:	2000      	movs	r0, #0
 8007496:	e007      	b.n	80074a8 <__sfputs_r+0x22>
 8007498:	463a      	mov	r2, r7
 800749a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ffda 	bl	8007458 <__sfputc_r>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d1f3      	bne.n	8007490 <__sfputs_r+0xa>
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074ac <_vfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	460d      	mov	r5, r1
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4614      	mov	r4, r2
 80074b6:	4698      	mov	r8, r3
 80074b8:	4606      	mov	r6, r0
 80074ba:	b118      	cbz	r0, 80074c4 <_vfiprintf_r+0x18>
 80074bc:	6983      	ldr	r3, [r0, #24]
 80074be:	b90b      	cbnz	r3, 80074c4 <_vfiprintf_r+0x18>
 80074c0:	f000 fcca 	bl	8007e58 <__sinit>
 80074c4:	4b89      	ldr	r3, [pc, #548]	; (80076ec <_vfiprintf_r+0x240>)
 80074c6:	429d      	cmp	r5, r3
 80074c8:	d11b      	bne.n	8007502 <_vfiprintf_r+0x56>
 80074ca:	6875      	ldr	r5, [r6, #4]
 80074cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ce:	07d9      	lsls	r1, r3, #31
 80074d0:	d405      	bmi.n	80074de <_vfiprintf_r+0x32>
 80074d2:	89ab      	ldrh	r3, [r5, #12]
 80074d4:	059a      	lsls	r2, r3, #22
 80074d6:	d402      	bmi.n	80074de <_vfiprintf_r+0x32>
 80074d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074da:	f000 fd5b 	bl	8007f94 <__retarget_lock_acquire_recursive>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	071b      	lsls	r3, r3, #28
 80074e2:	d501      	bpl.n	80074e8 <_vfiprintf_r+0x3c>
 80074e4:	692b      	ldr	r3, [r5, #16]
 80074e6:	b9eb      	cbnz	r3, 8007524 <_vfiprintf_r+0x78>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4630      	mov	r0, r6
 80074ec:	f000 fb2e 	bl	8007b4c <__swsetup_r>
 80074f0:	b1c0      	cbz	r0, 8007524 <_vfiprintf_r+0x78>
 80074f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f4:	07dc      	lsls	r4, r3, #31
 80074f6:	d50e      	bpl.n	8007516 <_vfiprintf_r+0x6a>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	b01d      	add	sp, #116	; 0x74
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <_vfiprintf_r+0x244>)
 8007504:	429d      	cmp	r5, r3
 8007506:	d101      	bne.n	800750c <_vfiprintf_r+0x60>
 8007508:	68b5      	ldr	r5, [r6, #8]
 800750a:	e7df      	b.n	80074cc <_vfiprintf_r+0x20>
 800750c:	4b79      	ldr	r3, [pc, #484]	; (80076f4 <_vfiprintf_r+0x248>)
 800750e:	429d      	cmp	r5, r3
 8007510:	bf08      	it	eq
 8007512:	68f5      	ldreq	r5, [r6, #12]
 8007514:	e7da      	b.n	80074cc <_vfiprintf_r+0x20>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	0598      	lsls	r0, r3, #22
 800751a:	d4ed      	bmi.n	80074f8 <_vfiprintf_r+0x4c>
 800751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751e:	f000 fd3a 	bl	8007f96 <__retarget_lock_release_recursive>
 8007522:	e7e9      	b.n	80074f8 <_vfiprintf_r+0x4c>
 8007524:	2300      	movs	r3, #0
 8007526:	f8cd 800c 	str.w	r8, [sp, #12]
 800752a:	f04f 0901 	mov.w	r9, #1
 800752e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80076f8 <_vfiprintf_r+0x24c>
 8007532:	9309      	str	r3, [sp, #36]	; 0x24
 8007534:	2320      	movs	r3, #32
 8007536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800753a:	2330      	movs	r3, #48	; 0x30
 800753c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007540:	4623      	mov	r3, r4
 8007542:	469a      	mov	sl, r3
 8007544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007548:	b10a      	cbz	r2, 800754e <_vfiprintf_r+0xa2>
 800754a:	2a25      	cmp	r2, #37	; 0x25
 800754c:	d1f9      	bne.n	8007542 <_vfiprintf_r+0x96>
 800754e:	ebba 0b04 	subs.w	fp, sl, r4
 8007552:	d00b      	beq.n	800756c <_vfiprintf_r+0xc0>
 8007554:	465b      	mov	r3, fp
 8007556:	4622      	mov	r2, r4
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ff93 	bl	8007486 <__sfputs_r>
 8007560:	3001      	adds	r0, #1
 8007562:	f000 80aa 	beq.w	80076ba <_vfiprintf_r+0x20e>
 8007566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007568:	445a      	add	r2, fp
 800756a:	9209      	str	r2, [sp, #36]	; 0x24
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80a2 	beq.w	80076ba <_vfiprintf_r+0x20e>
 8007576:	2300      	movs	r3, #0
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	f10a 0a01 	add.w	sl, sl, #1
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	9307      	str	r3, [sp, #28]
 8007584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007588:	931a      	str	r3, [sp, #104]	; 0x68
 800758a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800758e:	4654      	mov	r4, sl
 8007590:	2205      	movs	r2, #5
 8007592:	4859      	ldr	r0, [pc, #356]	; (80076f8 <_vfiprintf_r+0x24c>)
 8007594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007598:	f000 fd64 	bl	8008064 <memchr>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	b9d8      	cbnz	r0, 80075d8 <_vfiprintf_r+0x12c>
 80075a0:	06d1      	lsls	r1, r2, #27
 80075a2:	bf44      	itt	mi
 80075a4:	2320      	movmi	r3, #32
 80075a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075aa:	0713      	lsls	r3, r2, #28
 80075ac:	bf44      	itt	mi
 80075ae:	232b      	movmi	r3, #43	; 0x2b
 80075b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b4:	f89a 3000 	ldrb.w	r3, [sl]
 80075b8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ba:	d015      	beq.n	80075e8 <_vfiprintf_r+0x13c>
 80075bc:	9a07      	ldr	r2, [sp, #28]
 80075be:	4654      	mov	r4, sl
 80075c0:	2000      	movs	r0, #0
 80075c2:	f04f 0c0a 	mov.w	ip, #10
 80075c6:	4621      	mov	r1, r4
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	; 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94e      	bls.n	8007670 <_vfiprintf_r+0x1c4>
 80075d2:	b1b0      	cbz	r0, 8007602 <_vfiprintf_r+0x156>
 80075d4:	9207      	str	r2, [sp, #28]
 80075d6:	e014      	b.n	8007602 <_vfiprintf_r+0x156>
 80075d8:	eba0 0308 	sub.w	r3, r0, r8
 80075dc:	46a2      	mov	sl, r4
 80075de:	fa09 f303 	lsl.w	r3, r9, r3
 80075e2:	4313      	orrs	r3, r2
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	e7d2      	b.n	800758e <_vfiprintf_r+0xe2>
 80075e8:	9b03      	ldr	r3, [sp, #12]
 80075ea:	1d19      	adds	r1, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	9103      	str	r1, [sp, #12]
 80075f2:	bfbb      	ittet	lt
 80075f4:	425b      	neglt	r3, r3
 80075f6:	f042 0202 	orrlt.w	r2, r2, #2
 80075fa:	9307      	strge	r3, [sp, #28]
 80075fc:	9307      	strlt	r3, [sp, #28]
 80075fe:	bfb8      	it	lt
 8007600:	9204      	strlt	r2, [sp, #16]
 8007602:	7823      	ldrb	r3, [r4, #0]
 8007604:	2b2e      	cmp	r3, #46	; 0x2e
 8007606:	d10c      	bne.n	8007622 <_vfiprintf_r+0x176>
 8007608:	7863      	ldrb	r3, [r4, #1]
 800760a:	2b2a      	cmp	r3, #42	; 0x2a
 800760c:	d135      	bne.n	800767a <_vfiprintf_r+0x1ce>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3402      	adds	r4, #2
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	9203      	str	r2, [sp, #12]
 800761a:	bfb8      	it	lt
 800761c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007620:	9305      	str	r3, [sp, #20]
 8007622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007708 <_vfiprintf_r+0x25c>
 8007626:	2203      	movs	r2, #3
 8007628:	7821      	ldrb	r1, [r4, #0]
 800762a:	4650      	mov	r0, sl
 800762c:	f000 fd1a 	bl	8008064 <memchr>
 8007630:	b140      	cbz	r0, 8007644 <_vfiprintf_r+0x198>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	eba0 000a 	sub.w	r0, r0, sl
 8007638:	3401      	adds	r4, #1
 800763a:	fa03 f000 	lsl.w	r0, r3, r0
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	4303      	orrs	r3, r0
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	2206      	movs	r2, #6
 800764a:	482c      	ldr	r0, [pc, #176]	; (80076fc <_vfiprintf_r+0x250>)
 800764c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007650:	f000 fd08 	bl	8008064 <memchr>
 8007654:	2800      	cmp	r0, #0
 8007656:	d03f      	beq.n	80076d8 <_vfiprintf_r+0x22c>
 8007658:	4b29      	ldr	r3, [pc, #164]	; (8007700 <_vfiprintf_r+0x254>)
 800765a:	bb1b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x1f8>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	3307      	adds	r3, #7
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	3308      	adds	r3, #8
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766a:	443b      	add	r3, r7
 800766c:	9309      	str	r3, [sp, #36]	; 0x24
 800766e:	e767      	b.n	8007540 <_vfiprintf_r+0x94>
 8007670:	fb0c 3202 	mla	r2, ip, r2, r3
 8007674:	460c      	mov	r4, r1
 8007676:	2001      	movs	r0, #1
 8007678:	e7a5      	b.n	80075c6 <_vfiprintf_r+0x11a>
 800767a:	2300      	movs	r3, #0
 800767c:	3401      	adds	r4, #1
 800767e:	f04f 0c0a 	mov.w	ip, #10
 8007682:	4619      	mov	r1, r3
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	4620      	mov	r0, r4
 8007688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768c:	3a30      	subs	r2, #48	; 0x30
 800768e:	2a09      	cmp	r2, #9
 8007690:	d903      	bls.n	800769a <_vfiprintf_r+0x1ee>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <_vfiprintf_r+0x176>
 8007696:	9105      	str	r1, [sp, #20]
 8007698:	e7c3      	b.n	8007622 <_vfiprintf_r+0x176>
 800769a:	fb0c 2101 	mla	r1, ip, r1, r2
 800769e:	4604      	mov	r4, r0
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f0      	b.n	8007686 <_vfiprintf_r+0x1da>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	462a      	mov	r2, r5
 80076a8:	a904      	add	r1, sp, #16
 80076aa:	4630      	mov	r0, r6
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4b15      	ldr	r3, [pc, #84]	; (8007704 <_vfiprintf_r+0x258>)
 80076b0:	e000      	b.n	80076b4 <_vfiprintf_r+0x208>
 80076b2:	bf00      	nop
 80076b4:	4607      	mov	r7, r0
 80076b6:	1c78      	adds	r0, r7, #1
 80076b8:	d1d6      	bne.n	8007668 <_vfiprintf_r+0x1bc>
 80076ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076bc:	07d9      	lsls	r1, r3, #31
 80076be:	d405      	bmi.n	80076cc <_vfiprintf_r+0x220>
 80076c0:	89ab      	ldrh	r3, [r5, #12]
 80076c2:	059a      	lsls	r2, r3, #22
 80076c4:	d402      	bmi.n	80076cc <_vfiprintf_r+0x220>
 80076c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c8:	f000 fc65 	bl	8007f96 <__retarget_lock_release_recursive>
 80076cc:	89ab      	ldrh	r3, [r5, #12]
 80076ce:	065b      	lsls	r3, r3, #25
 80076d0:	f53f af12 	bmi.w	80074f8 <_vfiprintf_r+0x4c>
 80076d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d6:	e711      	b.n	80074fc <_vfiprintf_r+0x50>
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	462a      	mov	r2, r5
 80076dc:	a904      	add	r1, sp, #16
 80076de:	4630      	mov	r0, r6
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <_vfiprintf_r+0x258>)
 80076e4:	f000 f88c 	bl	8007800 <_printf_i>
 80076e8:	e7e4      	b.n	80076b4 <_vfiprintf_r+0x208>
 80076ea:	bf00      	nop
 80076ec:	08008910 	.word	0x08008910
 80076f0:	08008930 	.word	0x08008930
 80076f4:	080088f0 	.word	0x080088f0
 80076f8:	080088bc 	.word	0x080088bc
 80076fc:	080088c6 	.word	0x080088c6
 8007700:	00000000 	.word	0x00000000
 8007704:	08007487 	.word	0x08007487
 8007708:	080088c2 	.word	0x080088c2

0800770c <vfiprintf>:
 800770c:	4613      	mov	r3, r2
 800770e:	460a      	mov	r2, r1
 8007710:	4601      	mov	r1, r0
 8007712:	4802      	ldr	r0, [pc, #8]	; (800771c <vfiprintf+0x10>)
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	f7ff bec9 	b.w	80074ac <_vfiprintf_r>
 800771a:	bf00      	nop
 800771c:	20000020 	.word	0x20000020

08007720 <_printf_common>:
 8007720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	4616      	mov	r6, r2
 8007726:	4699      	mov	r9, r3
 8007728:	688a      	ldr	r2, [r1, #8]
 800772a:	4607      	mov	r7, r0
 800772c:	690b      	ldr	r3, [r1, #16]
 800772e:	460c      	mov	r4, r1
 8007730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007734:	4293      	cmp	r3, r2
 8007736:	bfb8      	it	lt
 8007738:	4613      	movlt	r3, r2
 800773a:	6033      	str	r3, [r6, #0]
 800773c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007740:	b10a      	cbz	r2, 8007746 <_printf_common+0x26>
 8007742:	3301      	adds	r3, #1
 8007744:	6033      	str	r3, [r6, #0]
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	0699      	lsls	r1, r3, #26
 800774a:	bf42      	ittt	mi
 800774c:	6833      	ldrmi	r3, [r6, #0]
 800774e:	3302      	addmi	r3, #2
 8007750:	6033      	strmi	r3, [r6, #0]
 8007752:	6825      	ldr	r5, [r4, #0]
 8007754:	f015 0506 	ands.w	r5, r5, #6
 8007758:	d106      	bne.n	8007768 <_printf_common+0x48>
 800775a:	f104 0a19 	add.w	sl, r4, #25
 800775e:	68e3      	ldr	r3, [r4, #12]
 8007760:	6832      	ldr	r2, [r6, #0]
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	42ab      	cmp	r3, r5
 8007766:	dc29      	bgt.n	80077bc <_printf_common+0x9c>
 8007768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800776c:	1e13      	subs	r3, r2, #0
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	bf18      	it	ne
 8007772:	2301      	movne	r3, #1
 8007774:	0692      	lsls	r2, r2, #26
 8007776:	d42e      	bmi.n	80077d6 <_printf_common+0xb6>
 8007778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800777c:	4649      	mov	r1, r9
 800777e:	4638      	mov	r0, r7
 8007780:	47c0      	blx	r8
 8007782:	3001      	adds	r0, #1
 8007784:	d021      	beq.n	80077ca <_printf_common+0xaa>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	341a      	adds	r4, #26
 800778a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800778e:	f003 0306 	and.w	r3, r3, #6
 8007792:	6832      	ldr	r2, [r6, #0]
 8007794:	2600      	movs	r6, #0
 8007796:	2b04      	cmp	r3, #4
 8007798:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800779c:	bf08      	it	eq
 800779e:	1aad      	subeq	r5, r5, r2
 80077a0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80077a4:	bf14      	ite	ne
 80077a6:	2500      	movne	r5, #0
 80077a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ac:	4293      	cmp	r3, r2
 80077ae:	bfc4      	itt	gt
 80077b0:	1a9b      	subgt	r3, r3, r2
 80077b2:	18ed      	addgt	r5, r5, r3
 80077b4:	42b5      	cmp	r5, r6
 80077b6:	d11a      	bne.n	80077ee <_printf_common+0xce>
 80077b8:	2000      	movs	r0, #0
 80077ba:	e008      	b.n	80077ce <_printf_common+0xae>
 80077bc:	2301      	movs	r3, #1
 80077be:	4652      	mov	r2, sl
 80077c0:	4649      	mov	r1, r9
 80077c2:	4638      	mov	r0, r7
 80077c4:	47c0      	blx	r8
 80077c6:	3001      	adds	r0, #1
 80077c8:	d103      	bne.n	80077d2 <_printf_common+0xb2>
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295
 80077ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d2:	3501      	adds	r5, #1
 80077d4:	e7c3      	b.n	800775e <_printf_common+0x3e>
 80077d6:	18e1      	adds	r1, r4, r3
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	2030      	movs	r0, #48	; 0x30
 80077dc:	3302      	adds	r3, #2
 80077de:	4422      	add	r2, r4
 80077e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077ec:	e7c4      	b.n	8007778 <_printf_common+0x58>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4622      	mov	r2, r4
 80077f2:	4649      	mov	r1, r9
 80077f4:	4638      	mov	r0, r7
 80077f6:	47c0      	blx	r8
 80077f8:	3001      	adds	r0, #1
 80077fa:	d0e6      	beq.n	80077ca <_printf_common+0xaa>
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7d9      	b.n	80077b4 <_printf_common+0x94>

08007800 <_printf_i>:
 8007800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	7e0f      	ldrb	r7, [r1, #24]
 8007806:	4691      	mov	r9, r2
 8007808:	4680      	mov	r8, r0
 800780a:	460c      	mov	r4, r1
 800780c:	2f78      	cmp	r7, #120	; 0x78
 800780e:	469a      	mov	sl, r3
 8007810:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007816:	d807      	bhi.n	8007828 <_printf_i+0x28>
 8007818:	2f62      	cmp	r7, #98	; 0x62
 800781a:	d80a      	bhi.n	8007832 <_printf_i+0x32>
 800781c:	2f00      	cmp	r7, #0
 800781e:	f000 80d8 	beq.w	80079d2 <_printf_i+0x1d2>
 8007822:	2f58      	cmp	r7, #88	; 0x58
 8007824:	f000 80a3 	beq.w	800796e <_printf_i+0x16e>
 8007828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800782c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007830:	e03a      	b.n	80078a8 <_printf_i+0xa8>
 8007832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007836:	2b15      	cmp	r3, #21
 8007838:	d8f6      	bhi.n	8007828 <_printf_i+0x28>
 800783a:	a101      	add	r1, pc, #4	; (adr r1, 8007840 <_printf_i+0x40>)
 800783c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007840:	08007899 	.word	0x08007899
 8007844:	080078ad 	.word	0x080078ad
 8007848:	08007829 	.word	0x08007829
 800784c:	08007829 	.word	0x08007829
 8007850:	08007829 	.word	0x08007829
 8007854:	08007829 	.word	0x08007829
 8007858:	080078ad 	.word	0x080078ad
 800785c:	08007829 	.word	0x08007829
 8007860:	08007829 	.word	0x08007829
 8007864:	08007829 	.word	0x08007829
 8007868:	08007829 	.word	0x08007829
 800786c:	080079b9 	.word	0x080079b9
 8007870:	080078dd 	.word	0x080078dd
 8007874:	0800799b 	.word	0x0800799b
 8007878:	08007829 	.word	0x08007829
 800787c:	08007829 	.word	0x08007829
 8007880:	080079db 	.word	0x080079db
 8007884:	08007829 	.word	0x08007829
 8007888:	080078dd 	.word	0x080078dd
 800788c:	08007829 	.word	0x08007829
 8007890:	08007829 	.word	0x08007829
 8007894:	080079a3 	.word	0x080079a3
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	1d1a      	adds	r2, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	602a      	str	r2, [r5, #0]
 80078a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0a3      	b.n	80079f4 <_printf_i+0x1f4>
 80078ac:	6820      	ldr	r0, [r4, #0]
 80078ae:	6829      	ldr	r1, [r5, #0]
 80078b0:	0606      	lsls	r6, r0, #24
 80078b2:	f101 0304 	add.w	r3, r1, #4
 80078b6:	d50a      	bpl.n	80078ce <_printf_i+0xce>
 80078b8:	680e      	ldr	r6, [r1, #0]
 80078ba:	602b      	str	r3, [r5, #0]
 80078bc:	2e00      	cmp	r6, #0
 80078be:	da03      	bge.n	80078c8 <_printf_i+0xc8>
 80078c0:	232d      	movs	r3, #45	; 0x2d
 80078c2:	4276      	negs	r6, r6
 80078c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c8:	485e      	ldr	r0, [pc, #376]	; (8007a44 <_printf_i+0x244>)
 80078ca:	230a      	movs	r3, #10
 80078cc:	e019      	b.n	8007902 <_printf_i+0x102>
 80078ce:	680e      	ldr	r6, [r1, #0]
 80078d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	bf18      	it	ne
 80078d8:	b236      	sxthne	r6, r6
 80078da:	e7ef      	b.n	80078bc <_printf_i+0xbc>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	6820      	ldr	r0, [r4, #0]
 80078e0:	1d19      	adds	r1, r3, #4
 80078e2:	6029      	str	r1, [r5, #0]
 80078e4:	0601      	lsls	r1, r0, #24
 80078e6:	d501      	bpl.n	80078ec <_printf_i+0xec>
 80078e8:	681e      	ldr	r6, [r3, #0]
 80078ea:	e002      	b.n	80078f2 <_printf_i+0xf2>
 80078ec:	0646      	lsls	r6, r0, #25
 80078ee:	d5fb      	bpl.n	80078e8 <_printf_i+0xe8>
 80078f0:	881e      	ldrh	r6, [r3, #0]
 80078f2:	2f6f      	cmp	r7, #111	; 0x6f
 80078f4:	4853      	ldr	r0, [pc, #332]	; (8007a44 <_printf_i+0x244>)
 80078f6:	bf0c      	ite	eq
 80078f8:	2308      	moveq	r3, #8
 80078fa:	230a      	movne	r3, #10
 80078fc:	2100      	movs	r1, #0
 80078fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007902:	6865      	ldr	r5, [r4, #4]
 8007904:	2d00      	cmp	r5, #0
 8007906:	60a5      	str	r5, [r4, #8]
 8007908:	bfa2      	ittt	ge
 800790a:	6821      	ldrge	r1, [r4, #0]
 800790c:	f021 0104 	bicge.w	r1, r1, #4
 8007910:	6021      	strge	r1, [r4, #0]
 8007912:	b90e      	cbnz	r6, 8007918 <_printf_i+0x118>
 8007914:	2d00      	cmp	r5, #0
 8007916:	d04d      	beq.n	80079b4 <_printf_i+0x1b4>
 8007918:	4615      	mov	r5, r2
 800791a:	fbb6 f1f3 	udiv	r1, r6, r3
 800791e:	fb03 6711 	mls	r7, r3, r1, r6
 8007922:	5dc7      	ldrb	r7, [r0, r7]
 8007924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007928:	4637      	mov	r7, r6
 800792a:	460e      	mov	r6, r1
 800792c:	42bb      	cmp	r3, r7
 800792e:	d9f4      	bls.n	800791a <_printf_i+0x11a>
 8007930:	2b08      	cmp	r3, #8
 8007932:	d10b      	bne.n	800794c <_printf_i+0x14c>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	07de      	lsls	r6, r3, #31
 8007938:	d508      	bpl.n	800794c <_printf_i+0x14c>
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	6861      	ldr	r1, [r4, #4]
 800793e:	4299      	cmp	r1, r3
 8007940:	bfde      	ittt	le
 8007942:	2330      	movle	r3, #48	; 0x30
 8007944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800794c:	1b52      	subs	r2, r2, r5
 800794e:	6122      	str	r2, [r4, #16]
 8007950:	464b      	mov	r3, r9
 8007952:	aa03      	add	r2, sp, #12
 8007954:	4621      	mov	r1, r4
 8007956:	4640      	mov	r0, r8
 8007958:	f8cd a000 	str.w	sl, [sp]
 800795c:	f7ff fee0 	bl	8007720 <_printf_common>
 8007960:	3001      	adds	r0, #1
 8007962:	d14c      	bne.n	80079fe <_printf_i+0x1fe>
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	b004      	add	sp, #16
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	4835      	ldr	r0, [pc, #212]	; (8007a44 <_printf_i+0x244>)
 8007970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007974:	6829      	ldr	r1, [r5, #0]
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	f851 6b04 	ldr.w	r6, [r1], #4
 800797c:	6029      	str	r1, [r5, #0]
 800797e:	061d      	lsls	r5, r3, #24
 8007980:	d514      	bpl.n	80079ac <_printf_i+0x1ac>
 8007982:	07df      	lsls	r7, r3, #31
 8007984:	bf44      	itt	mi
 8007986:	f043 0320 	orrmi.w	r3, r3, #32
 800798a:	6023      	strmi	r3, [r4, #0]
 800798c:	b91e      	cbnz	r6, 8007996 <_printf_i+0x196>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	f023 0320 	bic.w	r3, r3, #32
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	2310      	movs	r3, #16
 8007998:	e7b0      	b.n	80078fc <_printf_i+0xfc>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f043 0320 	orr.w	r3, r3, #32
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	2378      	movs	r3, #120	; 0x78
 80079a4:	4828      	ldr	r0, [pc, #160]	; (8007a48 <_printf_i+0x248>)
 80079a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079aa:	e7e3      	b.n	8007974 <_printf_i+0x174>
 80079ac:	0659      	lsls	r1, r3, #25
 80079ae:	bf48      	it	mi
 80079b0:	b2b6      	uxthmi	r6, r6
 80079b2:	e7e6      	b.n	8007982 <_printf_i+0x182>
 80079b4:	4615      	mov	r5, r2
 80079b6:	e7bb      	b.n	8007930 <_printf_i+0x130>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	6826      	ldr	r6, [r4, #0]
 80079bc:	1d18      	adds	r0, r3, #4
 80079be:	6961      	ldr	r1, [r4, #20]
 80079c0:	6028      	str	r0, [r5, #0]
 80079c2:	0635      	lsls	r5, r6, #24
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	d501      	bpl.n	80079cc <_printf_i+0x1cc>
 80079c8:	6019      	str	r1, [r3, #0]
 80079ca:	e002      	b.n	80079d2 <_printf_i+0x1d2>
 80079cc:	0670      	lsls	r0, r6, #25
 80079ce:	d5fb      	bpl.n	80079c8 <_printf_i+0x1c8>
 80079d0:	8019      	strh	r1, [r3, #0]
 80079d2:	2300      	movs	r3, #0
 80079d4:	4615      	mov	r5, r2
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	e7ba      	b.n	8007950 <_printf_i+0x150>
 80079da:	682b      	ldr	r3, [r5, #0]
 80079dc:	2100      	movs	r1, #0
 80079de:	1d1a      	adds	r2, r3, #4
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	681d      	ldr	r5, [r3, #0]
 80079e4:	6862      	ldr	r2, [r4, #4]
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fb3c 	bl	8008064 <memchr>
 80079ec:	b108      	cbz	r0, 80079f2 <_printf_i+0x1f2>
 80079ee:	1b40      	subs	r0, r0, r5
 80079f0:	6060      	str	r0, [r4, #4]
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	6123      	str	r3, [r4, #16]
 80079f6:	2300      	movs	r3, #0
 80079f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079fc:	e7a8      	b.n	8007950 <_printf_i+0x150>
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	462a      	mov	r2, r5
 8007a02:	4649      	mov	r1, r9
 8007a04:	4640      	mov	r0, r8
 8007a06:	47d0      	blx	sl
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d0ab      	beq.n	8007964 <_printf_i+0x164>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	079b      	lsls	r3, r3, #30
 8007a10:	d413      	bmi.n	8007a3a <_printf_i+0x23a>
 8007a12:	68e0      	ldr	r0, [r4, #12]
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	4298      	cmp	r0, r3
 8007a18:	bfb8      	it	lt
 8007a1a:	4618      	movlt	r0, r3
 8007a1c:	e7a4      	b.n	8007968 <_printf_i+0x168>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4632      	mov	r2, r6
 8007a22:	4649      	mov	r1, r9
 8007a24:	4640      	mov	r0, r8
 8007a26:	47d0      	blx	sl
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d09b      	beq.n	8007964 <_printf_i+0x164>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	68e3      	ldr	r3, [r4, #12]
 8007a30:	9903      	ldr	r1, [sp, #12]
 8007a32:	1a5b      	subs	r3, r3, r1
 8007a34:	42ab      	cmp	r3, r5
 8007a36:	dcf2      	bgt.n	8007a1e <_printf_i+0x21e>
 8007a38:	e7eb      	b.n	8007a12 <_printf_i+0x212>
 8007a3a:	2500      	movs	r5, #0
 8007a3c:	f104 0619 	add.w	r6, r4, #25
 8007a40:	e7f5      	b.n	8007a2e <_printf_i+0x22e>
 8007a42:	bf00      	nop
 8007a44:	080088cd 	.word	0x080088cd
 8007a48:	080088de 	.word	0x080088de

08007a4c <iprintf>:
 8007a4c:	b40f      	push	{r0, r1, r2, r3}
 8007a4e:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <iprintf+0x2c>)
 8007a50:	b513      	push	{r0, r1, r4, lr}
 8007a52:	681c      	ldr	r4, [r3, #0]
 8007a54:	b124      	cbz	r4, 8007a60 <iprintf+0x14>
 8007a56:	69a3      	ldr	r3, [r4, #24]
 8007a58:	b913      	cbnz	r3, 8007a60 <iprintf+0x14>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f9fc 	bl	8007e58 <__sinit>
 8007a60:	ab05      	add	r3, sp, #20
 8007a62:	9a04      	ldr	r2, [sp, #16]
 8007a64:	68a1      	ldr	r1, [r4, #8]
 8007a66:	4620      	mov	r0, r4
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	f7ff fd1f 	bl	80074ac <_vfiprintf_r>
 8007a6e:	b002      	add	sp, #8
 8007a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a74:	b004      	add	sp, #16
 8007a76:	4770      	bx	lr
 8007a78:	20000020 	.word	0x20000020

08007a7c <putchar>:
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <putchar+0x28>)
 8007a7e:	b513      	push	{r0, r1, r4, lr}
 8007a80:	681c      	ldr	r4, [r3, #0]
 8007a82:	4601      	mov	r1, r0
 8007a84:	b134      	cbz	r4, 8007a94 <putchar+0x18>
 8007a86:	69a3      	ldr	r3, [r4, #24]
 8007a88:	b923      	cbnz	r3, 8007a94 <putchar+0x18>
 8007a8a:	9001      	str	r0, [sp, #4]
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 f9e3 	bl	8007e58 <__sinit>
 8007a92:	9901      	ldr	r1, [sp, #4]
 8007a94:	68a2      	ldr	r2, [r4, #8]
 8007a96:	4620      	mov	r0, r4
 8007a98:	b002      	add	sp, #8
 8007a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9e:	f000 bbcf 	b.w	8008240 <_putc_r>
 8007aa2:	bf00      	nop
 8007aa4:	20000020 	.word	0x20000020

08007aa8 <__swbuf_r>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	460e      	mov	r6, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	4605      	mov	r5, r0
 8007ab0:	b118      	cbz	r0, 8007aba <__swbuf_r+0x12>
 8007ab2:	6983      	ldr	r3, [r0, #24]
 8007ab4:	b90b      	cbnz	r3, 8007aba <__swbuf_r+0x12>
 8007ab6:	f000 f9cf 	bl	8007e58 <__sinit>
 8007aba:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <__swbuf_r+0x98>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d12b      	bne.n	8007b18 <__swbuf_r+0x70>
 8007ac0:	686c      	ldr	r4, [r5, #4]
 8007ac2:	69a3      	ldr	r3, [r4, #24]
 8007ac4:	60a3      	str	r3, [r4, #8]
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	071a      	lsls	r2, r3, #28
 8007aca:	d52f      	bpl.n	8007b2c <__swbuf_r+0x84>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	b36b      	cbz	r3, 8007b2c <__swbuf_r+0x84>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b2f6      	uxtb	r6, r6
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	4637      	mov	r7, r6
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	4283      	cmp	r3, r0
 8007ade:	dc04      	bgt.n	8007aea <__swbuf_r+0x42>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 f924 	bl	8007d30 <_fflush_r>
 8007ae8:	bb30      	cbnz	r0, 8007b38 <__swbuf_r+0x90>
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	3001      	adds	r0, #1
 8007aee:	3b01      	subs	r3, #1
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	701e      	strb	r6, [r3, #0]
 8007afa:	6963      	ldr	r3, [r4, #20]
 8007afc:	4283      	cmp	r3, r0
 8007afe:	d004      	beq.n	8007b0a <__swbuf_r+0x62>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d506      	bpl.n	8007b14 <__swbuf_r+0x6c>
 8007b06:	2e0a      	cmp	r6, #10
 8007b08:	d104      	bne.n	8007b14 <__swbuf_r+0x6c>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f000 f90f 	bl	8007d30 <_fflush_r>
 8007b12:	b988      	cbnz	r0, 8007b38 <__swbuf_r+0x90>
 8007b14:	4638      	mov	r0, r7
 8007b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <__swbuf_r+0x9c>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d101      	bne.n	8007b22 <__swbuf_r+0x7a>
 8007b1e:	68ac      	ldr	r4, [r5, #8]
 8007b20:	e7cf      	b.n	8007ac2 <__swbuf_r+0x1a>
 8007b22:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <__swbuf_r+0xa0>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	bf08      	it	eq
 8007b28:	68ec      	ldreq	r4, [r5, #12]
 8007b2a:	e7ca      	b.n	8007ac2 <__swbuf_r+0x1a>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 f80c 	bl	8007b4c <__swsetup_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d0cb      	beq.n	8007ad0 <__swbuf_r+0x28>
 8007b38:	f04f 37ff 	mov.w	r7, #4294967295
 8007b3c:	e7ea      	b.n	8007b14 <__swbuf_r+0x6c>
 8007b3e:	bf00      	nop
 8007b40:	08008910 	.word	0x08008910
 8007b44:	08008930 	.word	0x08008930
 8007b48:	080088f0 	.word	0x080088f0

08007b4c <__swsetup_r>:
 8007b4c:	4b32      	ldr	r3, [pc, #200]	; (8007c18 <__swsetup_r+0xcc>)
 8007b4e:	b570      	push	{r4, r5, r6, lr}
 8007b50:	681d      	ldr	r5, [r3, #0]
 8007b52:	4606      	mov	r6, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	b125      	cbz	r5, 8007b62 <__swsetup_r+0x16>
 8007b58:	69ab      	ldr	r3, [r5, #24]
 8007b5a:	b913      	cbnz	r3, 8007b62 <__swsetup_r+0x16>
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f000 f97b 	bl	8007e58 <__sinit>
 8007b62:	4b2e      	ldr	r3, [pc, #184]	; (8007c1c <__swsetup_r+0xd0>)
 8007b64:	429c      	cmp	r4, r3
 8007b66:	d10f      	bne.n	8007b88 <__swsetup_r+0x3c>
 8007b68:	686c      	ldr	r4, [r5, #4]
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b70:	0719      	lsls	r1, r3, #28
 8007b72:	d42c      	bmi.n	8007bce <__swsetup_r+0x82>
 8007b74:	06dd      	lsls	r5, r3, #27
 8007b76:	d411      	bmi.n	8007b9c <__swsetup_r+0x50>
 8007b78:	2309      	movs	r3, #9
 8007b7a:	6033      	str	r3, [r6, #0]
 8007b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	e03e      	b.n	8007c06 <__swsetup_r+0xba>
 8007b88:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <__swsetup_r+0xd4>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	d101      	bne.n	8007b92 <__swsetup_r+0x46>
 8007b8e:	68ac      	ldr	r4, [r5, #8]
 8007b90:	e7eb      	b.n	8007b6a <__swsetup_r+0x1e>
 8007b92:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <__swsetup_r+0xd8>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	bf08      	it	eq
 8007b98:	68ec      	ldreq	r4, [r5, #12]
 8007b9a:	e7e6      	b.n	8007b6a <__swsetup_r+0x1e>
 8007b9c:	0758      	lsls	r0, r3, #29
 8007b9e:	d512      	bpl.n	8007bc6 <__swsetup_r+0x7a>
 8007ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ba2:	b141      	cbz	r1, 8007bb6 <__swsetup_r+0x6a>
 8007ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d002      	beq.n	8007bb2 <__swsetup_r+0x66>
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 fa67 	bl	8008080 <_free_r>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f043 0308 	orr.w	r3, r3, #8
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	b94b      	cbnz	r3, 8007be6 <__swsetup_r+0x9a>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bdc:	d003      	beq.n	8007be6 <__swsetup_r+0x9a>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4630      	mov	r0, r6
 8007be2:	f000 f9ff 	bl	8007fe4 <__smakebuf_r>
 8007be6:	89a0      	ldrh	r0, [r4, #12]
 8007be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bec:	f010 0301 	ands.w	r3, r0, #1
 8007bf0:	d00a      	beq.n	8007c08 <__swsetup_r+0xbc>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60a3      	str	r3, [r4, #8]
 8007bf6:	6963      	ldr	r3, [r4, #20]
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	61a3      	str	r3, [r4, #24]
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	b943      	cbnz	r3, 8007c12 <__swsetup_r+0xc6>
 8007c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c04:	d1ba      	bne.n	8007b7c <__swsetup_r+0x30>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	0781      	lsls	r1, r0, #30
 8007c0a:	bf58      	it	pl
 8007c0c:	6963      	ldrpl	r3, [r4, #20]
 8007c0e:	60a3      	str	r3, [r4, #8]
 8007c10:	e7f4      	b.n	8007bfc <__swsetup_r+0xb0>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e7f7      	b.n	8007c06 <__swsetup_r+0xba>
 8007c16:	bf00      	nop
 8007c18:	20000020 	.word	0x20000020
 8007c1c:	08008910 	.word	0x08008910
 8007c20:	08008930 	.word	0x08008930
 8007c24:	080088f0 	.word	0x080088f0

08007c28 <__sflush_r>:
 8007c28:	898a      	ldrh	r2, [r1, #12]
 8007c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	4605      	mov	r5, r0
 8007c30:	0710      	lsls	r0, r2, #28
 8007c32:	460c      	mov	r4, r1
 8007c34:	d458      	bmi.n	8007ce8 <__sflush_r+0xc0>
 8007c36:	684b      	ldr	r3, [r1, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dc05      	bgt.n	8007c48 <__sflush_r+0x20>
 8007c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dc02      	bgt.n	8007c48 <__sflush_r+0x20>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	d0f9      	beq.n	8007c42 <__sflush_r+0x1a>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c54:	682f      	ldr	r7, [r5, #0]
 8007c56:	602b      	str	r3, [r5, #0]
 8007c58:	d032      	beq.n	8007cc0 <__sflush_r+0x98>
 8007c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	075a      	lsls	r2, r3, #29
 8007c60:	d505      	bpl.n	8007c6e <__sflush_r+0x46>
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	1ac0      	subs	r0, r0, r3
 8007c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c68:	b10b      	cbz	r3, 8007c6e <__sflush_r+0x46>
 8007c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c6c:	1ac0      	subs	r0, r0, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4602      	mov	r2, r0
 8007c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c74:	4628      	mov	r0, r5
 8007c76:	6a21      	ldr	r1, [r4, #32]
 8007c78:	47b0      	blx	r6
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	d106      	bne.n	8007c8e <__sflush_r+0x66>
 8007c80:	6829      	ldr	r1, [r5, #0]
 8007c82:	291d      	cmp	r1, #29
 8007c84:	d82c      	bhi.n	8007ce0 <__sflush_r+0xb8>
 8007c86:	4a29      	ldr	r2, [pc, #164]	; (8007d2c <__sflush_r+0x104>)
 8007c88:	40ca      	lsrs	r2, r1
 8007c8a:	07d6      	lsls	r6, r2, #31
 8007c8c:	d528      	bpl.n	8007ce0 <__sflush_r+0xb8>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	04d9      	lsls	r1, r3, #19
 8007c92:	6062      	str	r2, [r4, #4]
 8007c94:	6922      	ldr	r2, [r4, #16]
 8007c96:	6022      	str	r2, [r4, #0]
 8007c98:	d504      	bpl.n	8007ca4 <__sflush_r+0x7c>
 8007c9a:	1c42      	adds	r2, r0, #1
 8007c9c:	d101      	bne.n	8007ca2 <__sflush_r+0x7a>
 8007c9e:	682b      	ldr	r3, [r5, #0]
 8007ca0:	b903      	cbnz	r3, 8007ca4 <__sflush_r+0x7c>
 8007ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca6:	602f      	str	r7, [r5, #0]
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	d0ca      	beq.n	8007c42 <__sflush_r+0x1a>
 8007cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	d002      	beq.n	8007cba <__sflush_r+0x92>
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 f9e3 	bl	8008080 <_free_r>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8007cbe:	e7c1      	b.n	8007c44 <__sflush_r+0x1c>
 8007cc0:	6a21      	ldr	r1, [r4, #32]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b0      	blx	r6
 8007cc8:	1c41      	adds	r1, r0, #1
 8007cca:	d1c7      	bne.n	8007c5c <__sflush_r+0x34>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0c4      	beq.n	8007c5c <__sflush_r+0x34>
 8007cd2:	2b1d      	cmp	r3, #29
 8007cd4:	d001      	beq.n	8007cda <__sflush_r+0xb2>
 8007cd6:	2b16      	cmp	r3, #22
 8007cd8:	d101      	bne.n	8007cde <__sflush_r+0xb6>
 8007cda:	602f      	str	r7, [r5, #0]
 8007cdc:	e7b1      	b.n	8007c42 <__sflush_r+0x1a>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	e7ad      	b.n	8007c44 <__sflush_r+0x1c>
 8007ce8:	690f      	ldr	r7, [r1, #16]
 8007cea:	2f00      	cmp	r7, #0
 8007cec:	d0a9      	beq.n	8007c42 <__sflush_r+0x1a>
 8007cee:	0793      	lsls	r3, r2, #30
 8007cf0:	680e      	ldr	r6, [r1, #0]
 8007cf2:	600f      	str	r7, [r1, #0]
 8007cf4:	bf0c      	ite	eq
 8007cf6:	694b      	ldreq	r3, [r1, #20]
 8007cf8:	2300      	movne	r3, #0
 8007cfa:	eba6 0807 	sub.w	r8, r6, r7
 8007cfe:	608b      	str	r3, [r1, #8]
 8007d00:	f1b8 0f00 	cmp.w	r8, #0
 8007d04:	dd9d      	ble.n	8007c42 <__sflush_r+0x1a>
 8007d06:	4643      	mov	r3, r8
 8007d08:	463a      	mov	r2, r7
 8007d0a:	6a21      	ldr	r1, [r4, #32]
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d10:	47b0      	blx	r6
 8007d12:	2800      	cmp	r0, #0
 8007d14:	dc06      	bgt.n	8007d24 <__sflush_r+0xfc>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	e78f      	b.n	8007c44 <__sflush_r+0x1c>
 8007d24:	4407      	add	r7, r0
 8007d26:	eba8 0800 	sub.w	r8, r8, r0
 8007d2a:	e7e9      	b.n	8007d00 <__sflush_r+0xd8>
 8007d2c:	20400001 	.word	0x20400001

08007d30 <_fflush_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	690b      	ldr	r3, [r1, #16]
 8007d34:	4605      	mov	r5, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	b913      	cbnz	r3, 8007d40 <_fflush_r+0x10>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	b118      	cbz	r0, 8007d4a <_fflush_r+0x1a>
 8007d42:	6983      	ldr	r3, [r0, #24]
 8007d44:	b90b      	cbnz	r3, 8007d4a <_fflush_r+0x1a>
 8007d46:	f000 f887 	bl	8007e58 <__sinit>
 8007d4a:	4b14      	ldr	r3, [pc, #80]	; (8007d9c <_fflush_r+0x6c>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d11b      	bne.n	8007d88 <_fflush_r+0x58>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0ef      	beq.n	8007d3a <_fflush_r+0xa>
 8007d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d5c:	07d0      	lsls	r0, r2, #31
 8007d5e:	d404      	bmi.n	8007d6a <_fflush_r+0x3a>
 8007d60:	0599      	lsls	r1, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_fflush_r+0x3a>
 8007d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d66:	f000 f915 	bl	8007f94 <__retarget_lock_acquire_recursive>
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	f7ff ff5b 	bl	8007c28 <__sflush_r>
 8007d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d74:	4605      	mov	r5, r0
 8007d76:	07da      	lsls	r2, r3, #31
 8007d78:	d4e0      	bmi.n	8007d3c <_fflush_r+0xc>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	059b      	lsls	r3, r3, #22
 8007d7e:	d4dd      	bmi.n	8007d3c <_fflush_r+0xc>
 8007d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d82:	f000 f908 	bl	8007f96 <__retarget_lock_release_recursive>
 8007d86:	e7d9      	b.n	8007d3c <_fflush_r+0xc>
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <_fflush_r+0x70>)
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d101      	bne.n	8007d92 <_fflush_r+0x62>
 8007d8e:	68ac      	ldr	r4, [r5, #8]
 8007d90:	e7df      	b.n	8007d52 <_fflush_r+0x22>
 8007d92:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <_fflush_r+0x74>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	bf08      	it	eq
 8007d98:	68ec      	ldreq	r4, [r5, #12]
 8007d9a:	e7da      	b.n	8007d52 <_fflush_r+0x22>
 8007d9c:	08008910 	.word	0x08008910
 8007da0:	08008930 	.word	0x08008930
 8007da4:	080088f0 	.word	0x080088f0

08007da8 <std>:
 8007da8:	2300      	movs	r3, #0
 8007daa:	b510      	push	{r4, lr}
 8007dac:	4604      	mov	r4, r0
 8007dae:	6083      	str	r3, [r0, #8]
 8007db0:	8181      	strh	r1, [r0, #12]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6643      	str	r3, [r0, #100]	; 0x64
 8007db6:	81c2      	strh	r2, [r0, #14]
 8007db8:	2208      	movs	r2, #8
 8007dba:	6183      	str	r3, [r0, #24]
 8007dbc:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc4:	305c      	adds	r0, #92	; 0x5c
 8007dc6:	f7ff fb3f 	bl	8007448 <memset>
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <std+0x38>)
 8007dcc:	6224      	str	r4, [r4, #32]
 8007dce:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <std+0x3c>)
 8007dd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <std+0x40>)
 8007dd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <std+0x44>)
 8007dda:	6323      	str	r3, [r4, #48]	; 0x30
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	bf00      	nop
 8007de0:	080082f1 	.word	0x080082f1
 8007de4:	08008313 	.word	0x08008313
 8007de8:	0800834b 	.word	0x0800834b
 8007dec:	0800836f 	.word	0x0800836f

08007df0 <_cleanup_r>:
 8007df0:	4901      	ldr	r1, [pc, #4]	; (8007df8 <_cleanup_r+0x8>)
 8007df2:	f000 b8af 	b.w	8007f54 <_fwalk_reent>
 8007df6:	bf00      	nop
 8007df8:	08007d31 	.word	0x08007d31

08007dfc <__sfmoreglue>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	2268      	movs	r2, #104	; 0x68
 8007e00:	1e4d      	subs	r5, r1, #1
 8007e02:	460e      	mov	r6, r1
 8007e04:	4355      	muls	r5, r2
 8007e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0a:	f000 f9a5 	bl	8008158 <_malloc_r>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	b140      	cbz	r0, 8007e24 <__sfmoreglue+0x28>
 8007e12:	2100      	movs	r1, #0
 8007e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e18:	e9c0 1600 	strd	r1, r6, [r0]
 8007e1c:	300c      	adds	r0, #12
 8007e1e:	60a0      	str	r0, [r4, #8]
 8007e20:	f7ff fb12 	bl	8007448 <memset>
 8007e24:	4620      	mov	r0, r4
 8007e26:	bd70      	pop	{r4, r5, r6, pc}

08007e28 <__sfp_lock_acquire>:
 8007e28:	4801      	ldr	r0, [pc, #4]	; (8007e30 <__sfp_lock_acquire+0x8>)
 8007e2a:	f000 b8b3 	b.w	8007f94 <__retarget_lock_acquire_recursive>
 8007e2e:	bf00      	nop
 8007e30:	20001911 	.word	0x20001911

08007e34 <__sfp_lock_release>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__sfp_lock_release+0x8>)
 8007e36:	f000 b8ae 	b.w	8007f96 <__retarget_lock_release_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	20001911 	.word	0x20001911

08007e40 <__sinit_lock_acquire>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__sinit_lock_acquire+0x8>)
 8007e42:	f000 b8a7 	b.w	8007f94 <__retarget_lock_acquire_recursive>
 8007e46:	bf00      	nop
 8007e48:	20001912 	.word	0x20001912

08007e4c <__sinit_lock_release>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <__sinit_lock_release+0x8>)
 8007e4e:	f000 b8a2 	b.w	8007f96 <__retarget_lock_release_recursive>
 8007e52:	bf00      	nop
 8007e54:	20001912 	.word	0x20001912

08007e58 <__sinit>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	f7ff fff0 	bl	8007e40 <__sinit_lock_acquire>
 8007e60:	69a3      	ldr	r3, [r4, #24]
 8007e62:	b11b      	cbz	r3, 8007e6c <__sinit+0x14>
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f7ff bff0 	b.w	8007e4c <__sinit_lock_release>
 8007e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e70:	6523      	str	r3, [r4, #80]	; 0x50
 8007e72:	4620      	mov	r0, r4
 8007e74:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <__sinit+0x68>)
 8007e76:	4a13      	ldr	r2, [pc, #76]	; (8007ec4 <__sinit+0x6c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	bf04      	itt	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	61a3      	streq	r3, [r4, #24]
 8007e84:	f000 f820 	bl	8007ec8 <__sfp>
 8007e88:	6060      	str	r0, [r4, #4]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f81c 	bl	8007ec8 <__sfp>
 8007e90:	60a0      	str	r0, [r4, #8]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f818 	bl	8007ec8 <__sfp>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2104      	movs	r1, #4
 8007e9c:	60e0      	str	r0, [r4, #12]
 8007e9e:	6860      	ldr	r0, [r4, #4]
 8007ea0:	f7ff ff82 	bl	8007da8 <std>
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	2109      	movs	r1, #9
 8007ea8:	68a0      	ldr	r0, [r4, #8]
 8007eaa:	f7ff ff7d 	bl	8007da8 <std>
 8007eae:	2202      	movs	r2, #2
 8007eb0:	2112      	movs	r1, #18
 8007eb2:	68e0      	ldr	r0, [r4, #12]
 8007eb4:	f7ff ff78 	bl	8007da8 <std>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61a3      	str	r3, [r4, #24]
 8007ebc:	e7d2      	b.n	8007e64 <__sinit+0xc>
 8007ebe:	bf00      	nop
 8007ec0:	080088b8 	.word	0x080088b8
 8007ec4:	08007df1 	.word	0x08007df1

08007ec8 <__sfp>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	4607      	mov	r7, r0
 8007ecc:	f7ff ffac 	bl	8007e28 <__sfp_lock_acquire>
 8007ed0:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <__sfp+0x84>)
 8007ed2:	681e      	ldr	r6, [r3, #0]
 8007ed4:	69b3      	ldr	r3, [r6, #24]
 8007ed6:	b913      	cbnz	r3, 8007ede <__sfp+0x16>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7ff ffbd 	bl	8007e58 <__sinit>
 8007ede:	3648      	adds	r6, #72	; 0x48
 8007ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	d503      	bpl.n	8007ef0 <__sfp+0x28>
 8007ee8:	6833      	ldr	r3, [r6, #0]
 8007eea:	b30b      	cbz	r3, 8007f30 <__sfp+0x68>
 8007eec:	6836      	ldr	r6, [r6, #0]
 8007eee:	e7f7      	b.n	8007ee0 <__sfp+0x18>
 8007ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ef4:	b9d5      	cbnz	r5, 8007f2c <__sfp+0x64>
 8007ef6:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <__sfp+0x88>)
 8007ef8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007efc:	6665      	str	r5, [r4, #100]	; 0x64
 8007efe:	60e3      	str	r3, [r4, #12]
 8007f00:	f000 f847 	bl	8007f92 <__retarget_lock_init_recursive>
 8007f04:	f7ff ff96 	bl	8007e34 <__sfp_lock_release>
 8007f08:	2208      	movs	r2, #8
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f10:	6025      	str	r5, [r4, #0]
 8007f12:	61a5      	str	r5, [r4, #24]
 8007f14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f1c:	f7ff fa94 	bl	8007448 <memset>
 8007f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f28:	4620      	mov	r0, r4
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	3468      	adds	r4, #104	; 0x68
 8007f2e:	e7d9      	b.n	8007ee4 <__sfp+0x1c>
 8007f30:	2104      	movs	r1, #4
 8007f32:	4638      	mov	r0, r7
 8007f34:	f7ff ff62 	bl	8007dfc <__sfmoreglue>
 8007f38:	4604      	mov	r4, r0
 8007f3a:	6030      	str	r0, [r6, #0]
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d1d5      	bne.n	8007eec <__sfp+0x24>
 8007f40:	f7ff ff78 	bl	8007e34 <__sfp_lock_release>
 8007f44:	230c      	movs	r3, #12
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	e7ee      	b.n	8007f28 <__sfp+0x60>
 8007f4a:	bf00      	nop
 8007f4c:	080088b8 	.word	0x080088b8
 8007f50:	ffff0001 	.word	0xffff0001

08007f54 <_fwalk_reent>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4606      	mov	r6, r0
 8007f5a:	4688      	mov	r8, r1
 8007f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f60:	2700      	movs	r7, #0
 8007f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f66:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6a:	d505      	bpl.n	8007f78 <_fwalk_reent+0x24>
 8007f6c:	6824      	ldr	r4, [r4, #0]
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d1f7      	bne.n	8007f62 <_fwalk_reent+0xe>
 8007f72:	4638      	mov	r0, r7
 8007f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f78:	89ab      	ldrh	r3, [r5, #12]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d907      	bls.n	8007f8e <_fwalk_reent+0x3a>
 8007f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f82:	3301      	adds	r3, #1
 8007f84:	d003      	beq.n	8007f8e <_fwalk_reent+0x3a>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4630      	mov	r0, r6
 8007f8a:	47c0      	blx	r8
 8007f8c:	4307      	orrs	r7, r0
 8007f8e:	3568      	adds	r5, #104	; 0x68
 8007f90:	e7e9      	b.n	8007f66 <_fwalk_reent+0x12>

08007f92 <__retarget_lock_init_recursive>:
 8007f92:	4770      	bx	lr

08007f94 <__retarget_lock_acquire_recursive>:
 8007f94:	4770      	bx	lr

08007f96 <__retarget_lock_release_recursive>:
 8007f96:	4770      	bx	lr

08007f98 <__swhatbuf_r>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	460e      	mov	r6, r1
 8007f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa0:	b096      	sub	sp, #88	; 0x58
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	461d      	mov	r5, r3
 8007fa8:	da08      	bge.n	8007fbc <__swhatbuf_r+0x24>
 8007faa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	061a      	lsls	r2, r3, #24
 8007fb4:	d410      	bmi.n	8007fd8 <__swhatbuf_r+0x40>
 8007fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fba:	e00e      	b.n	8007fda <__swhatbuf_r+0x42>
 8007fbc:	466a      	mov	r2, sp
 8007fbe:	f000 f9fd 	bl	80083bc <_fstat_r>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dbf1      	blt.n	8007faa <__swhatbuf_r+0x12>
 8007fc6:	9a01      	ldr	r2, [sp, #4]
 8007fc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fd0:	425a      	negs	r2, r3
 8007fd2:	415a      	adcs	r2, r3
 8007fd4:	602a      	str	r2, [r5, #0]
 8007fd6:	e7ee      	b.n	8007fb6 <__swhatbuf_r+0x1e>
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	2000      	movs	r0, #0
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	b016      	add	sp, #88	; 0x58
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fe4 <__smakebuf_r>:
 8007fe4:	898b      	ldrh	r3, [r1, #12]
 8007fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fe8:	079d      	lsls	r5, r3, #30
 8007fea:	4606      	mov	r6, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	d507      	bpl.n	8008000 <__smakebuf_r+0x1c>
 8007ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	6163      	str	r3, [r4, #20]
 8007ffc:	b002      	add	sp, #8
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	ab01      	add	r3, sp, #4
 8008002:	466a      	mov	r2, sp
 8008004:	f7ff ffc8 	bl	8007f98 <__swhatbuf_r>
 8008008:	9900      	ldr	r1, [sp, #0]
 800800a:	4605      	mov	r5, r0
 800800c:	4630      	mov	r0, r6
 800800e:	f000 f8a3 	bl	8008158 <_malloc_r>
 8008012:	b948      	cbnz	r0, 8008028 <__smakebuf_r+0x44>
 8008014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008018:	059a      	lsls	r2, r3, #22
 800801a:	d4ef      	bmi.n	8007ffc <__smakebuf_r+0x18>
 800801c:	f023 0303 	bic.w	r3, r3, #3
 8008020:	f043 0302 	orr.w	r3, r3, #2
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	e7e3      	b.n	8007ff0 <__smakebuf_r+0xc>
 8008028:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <__smakebuf_r+0x7c>)
 800802a:	62b3      	str	r3, [r6, #40]	; 0x28
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	6020      	str	r0, [r4, #0]
 8008030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008034:	6120      	str	r0, [r4, #16]
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	9b00      	ldr	r3, [sp, #0]
 800803a:	6163      	str	r3, [r4, #20]
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	b15b      	cbz	r3, 8008058 <__smakebuf_r+0x74>
 8008040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f9cb 	bl	80083e0 <_isatty_r>
 800804a:	b128      	cbz	r0, 8008058 <__smakebuf_r+0x74>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	89a0      	ldrh	r0, [r4, #12]
 800805a:	4305      	orrs	r5, r0
 800805c:	81a5      	strh	r5, [r4, #12]
 800805e:	e7cd      	b.n	8007ffc <__smakebuf_r+0x18>
 8008060:	08007df1 	.word	0x08007df1

08008064 <memchr>:
 8008064:	b2c9      	uxtb	r1, r1
 8008066:	4402      	add	r2, r0
 8008068:	b510      	push	{r4, lr}
 800806a:	4290      	cmp	r0, r2
 800806c:	4603      	mov	r3, r0
 800806e:	d101      	bne.n	8008074 <memchr+0x10>
 8008070:	2300      	movs	r3, #0
 8008072:	e003      	b.n	800807c <memchr+0x18>
 8008074:	781c      	ldrb	r4, [r3, #0]
 8008076:	3001      	adds	r0, #1
 8008078:	428c      	cmp	r4, r1
 800807a:	d1f6      	bne.n	800806a <memchr+0x6>
 800807c:	4618      	mov	r0, r3
 800807e:	bd10      	pop	{r4, pc}

08008080 <_free_r>:
 8008080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008082:	2900      	cmp	r1, #0
 8008084:	d043      	beq.n	800810e <_free_r+0x8e>
 8008086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800808a:	1f0c      	subs	r4, r1, #4
 800808c:	9001      	str	r0, [sp, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bfb8      	it	lt
 8008092:	18e4      	addlt	r4, r4, r3
 8008094:	f000 f9c6 	bl	8008424 <__malloc_lock>
 8008098:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <_free_r+0x94>)
 800809a:	9801      	ldr	r0, [sp, #4]
 800809c:	6813      	ldr	r3, [r2, #0]
 800809e:	b933      	cbnz	r3, 80080ae <_free_r+0x2e>
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6014      	str	r4, [r2, #0]
 80080a4:	b003      	add	sp, #12
 80080a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080aa:	f000 b9c1 	b.w	8008430 <__malloc_unlock>
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	d908      	bls.n	80080c4 <_free_r+0x44>
 80080b2:	6825      	ldr	r5, [r4, #0]
 80080b4:	1961      	adds	r1, r4, r5
 80080b6:	428b      	cmp	r3, r1
 80080b8:	bf01      	itttt	eq
 80080ba:	6819      	ldreq	r1, [r3, #0]
 80080bc:	685b      	ldreq	r3, [r3, #4]
 80080be:	1949      	addeq	r1, r1, r5
 80080c0:	6021      	streq	r1, [r4, #0]
 80080c2:	e7ed      	b.n	80080a0 <_free_r+0x20>
 80080c4:	461a      	mov	r2, r3
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	b10b      	cbz	r3, 80080ce <_free_r+0x4e>
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	d9fa      	bls.n	80080c4 <_free_r+0x44>
 80080ce:	6811      	ldr	r1, [r2, #0]
 80080d0:	1855      	adds	r5, r2, r1
 80080d2:	42a5      	cmp	r5, r4
 80080d4:	d10b      	bne.n	80080ee <_free_r+0x6e>
 80080d6:	6824      	ldr	r4, [r4, #0]
 80080d8:	4421      	add	r1, r4
 80080da:	1854      	adds	r4, r2, r1
 80080dc:	6011      	str	r1, [r2, #0]
 80080de:	42a3      	cmp	r3, r4
 80080e0:	d1e0      	bne.n	80080a4 <_free_r+0x24>
 80080e2:	681c      	ldr	r4, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	4421      	add	r1, r4
 80080e8:	6053      	str	r3, [r2, #4]
 80080ea:	6011      	str	r1, [r2, #0]
 80080ec:	e7da      	b.n	80080a4 <_free_r+0x24>
 80080ee:	d902      	bls.n	80080f6 <_free_r+0x76>
 80080f0:	230c      	movs	r3, #12
 80080f2:	6003      	str	r3, [r0, #0]
 80080f4:	e7d6      	b.n	80080a4 <_free_r+0x24>
 80080f6:	6825      	ldr	r5, [r4, #0]
 80080f8:	1961      	adds	r1, r4, r5
 80080fa:	428b      	cmp	r3, r1
 80080fc:	bf02      	ittt	eq
 80080fe:	6819      	ldreq	r1, [r3, #0]
 8008100:	685b      	ldreq	r3, [r3, #4]
 8008102:	1949      	addeq	r1, r1, r5
 8008104:	6063      	str	r3, [r4, #4]
 8008106:	bf08      	it	eq
 8008108:	6021      	streq	r1, [r4, #0]
 800810a:	6054      	str	r4, [r2, #4]
 800810c:	e7ca      	b.n	80080a4 <_free_r+0x24>
 800810e:	b003      	add	sp, #12
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	20001914 	.word	0x20001914

08008118 <sbrk_aligned>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4e0e      	ldr	r6, [pc, #56]	; (8008154 <sbrk_aligned+0x3c>)
 800811c:	460c      	mov	r4, r1
 800811e:	4605      	mov	r5, r0
 8008120:	6831      	ldr	r1, [r6, #0]
 8008122:	b911      	cbnz	r1, 800812a <sbrk_aligned+0x12>
 8008124:	f000 f8d4 	bl	80082d0 <_sbrk_r>
 8008128:	6030      	str	r0, [r6, #0]
 800812a:	4621      	mov	r1, r4
 800812c:	4628      	mov	r0, r5
 800812e:	f000 f8cf 	bl	80082d0 <_sbrk_r>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	d00a      	beq.n	800814c <sbrk_aligned+0x34>
 8008136:	1cc4      	adds	r4, r0, #3
 8008138:	f024 0403 	bic.w	r4, r4, #3
 800813c:	42a0      	cmp	r0, r4
 800813e:	d007      	beq.n	8008150 <sbrk_aligned+0x38>
 8008140:	1a21      	subs	r1, r4, r0
 8008142:	4628      	mov	r0, r5
 8008144:	f000 f8c4 	bl	80082d0 <_sbrk_r>
 8008148:	3001      	adds	r0, #1
 800814a:	d101      	bne.n	8008150 <sbrk_aligned+0x38>
 800814c:	f04f 34ff 	mov.w	r4, #4294967295
 8008150:	4620      	mov	r0, r4
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	20001918 	.word	0x20001918

08008158 <_malloc_r>:
 8008158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	1ccd      	adds	r5, r1, #3
 800815e:	4607      	mov	r7, r0
 8008160:	f025 0503 	bic.w	r5, r5, #3
 8008164:	3508      	adds	r5, #8
 8008166:	2d0c      	cmp	r5, #12
 8008168:	bf38      	it	cc
 800816a:	250c      	movcc	r5, #12
 800816c:	2d00      	cmp	r5, #0
 800816e:	db01      	blt.n	8008174 <_malloc_r+0x1c>
 8008170:	42a9      	cmp	r1, r5
 8008172:	d905      	bls.n	8008180 <_malloc_r+0x28>
 8008174:	230c      	movs	r3, #12
 8008176:	2600      	movs	r6, #0
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4630      	mov	r0, r6
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008180:	4e2e      	ldr	r6, [pc, #184]	; (800823c <_malloc_r+0xe4>)
 8008182:	f000 f94f 	bl	8008424 <__malloc_lock>
 8008186:	6833      	ldr	r3, [r6, #0]
 8008188:	461c      	mov	r4, r3
 800818a:	bb34      	cbnz	r4, 80081da <_malloc_r+0x82>
 800818c:	4629      	mov	r1, r5
 800818e:	4638      	mov	r0, r7
 8008190:	f7ff ffc2 	bl	8008118 <sbrk_aligned>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	4604      	mov	r4, r0
 8008198:	d14d      	bne.n	8008236 <_malloc_r+0xde>
 800819a:	6834      	ldr	r4, [r6, #0]
 800819c:	4626      	mov	r6, r4
 800819e:	2e00      	cmp	r6, #0
 80081a0:	d140      	bne.n	8008224 <_malloc_r+0xcc>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	4631      	mov	r1, r6
 80081a6:	4638      	mov	r0, r7
 80081a8:	eb04 0803 	add.w	r8, r4, r3
 80081ac:	f000 f890 	bl	80082d0 <_sbrk_r>
 80081b0:	4580      	cmp	r8, r0
 80081b2:	d13a      	bne.n	800822a <_malloc_r+0xd2>
 80081b4:	6821      	ldr	r1, [r4, #0]
 80081b6:	3503      	adds	r5, #3
 80081b8:	4638      	mov	r0, r7
 80081ba:	1a6d      	subs	r5, r5, r1
 80081bc:	f025 0503 	bic.w	r5, r5, #3
 80081c0:	3508      	adds	r5, #8
 80081c2:	2d0c      	cmp	r5, #12
 80081c4:	bf38      	it	cc
 80081c6:	250c      	movcc	r5, #12
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7ff ffa5 	bl	8008118 <sbrk_aligned>
 80081ce:	3001      	adds	r0, #1
 80081d0:	d02b      	beq.n	800822a <_malloc_r+0xd2>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	442b      	add	r3, r5
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	e00e      	b.n	80081f8 <_malloc_r+0xa0>
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	1b52      	subs	r2, r2, r5
 80081de:	d41e      	bmi.n	800821e <_malloc_r+0xc6>
 80081e0:	2a0b      	cmp	r2, #11
 80081e2:	d916      	bls.n	8008212 <_malloc_r+0xba>
 80081e4:	1961      	adds	r1, r4, r5
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	6025      	str	r5, [r4, #0]
 80081ea:	bf18      	it	ne
 80081ec:	6059      	strne	r1, [r3, #4]
 80081ee:	6863      	ldr	r3, [r4, #4]
 80081f0:	bf08      	it	eq
 80081f2:	6031      	streq	r1, [r6, #0]
 80081f4:	5162      	str	r2, [r4, r5]
 80081f6:	604b      	str	r3, [r1, #4]
 80081f8:	f104 060b 	add.w	r6, r4, #11
 80081fc:	4638      	mov	r0, r7
 80081fe:	f000 f917 	bl	8008430 <__malloc_unlock>
 8008202:	1d23      	adds	r3, r4, #4
 8008204:	f026 0607 	bic.w	r6, r6, #7
 8008208:	1af2      	subs	r2, r6, r3
 800820a:	d0b6      	beq.n	800817a <_malloc_r+0x22>
 800820c:	1b9b      	subs	r3, r3, r6
 800820e:	50a3      	str	r3, [r4, r2]
 8008210:	e7b3      	b.n	800817a <_malloc_r+0x22>
 8008212:	6862      	ldr	r2, [r4, #4]
 8008214:	42a3      	cmp	r3, r4
 8008216:	bf0c      	ite	eq
 8008218:	6032      	streq	r2, [r6, #0]
 800821a:	605a      	strne	r2, [r3, #4]
 800821c:	e7ec      	b.n	80081f8 <_malloc_r+0xa0>
 800821e:	4623      	mov	r3, r4
 8008220:	6864      	ldr	r4, [r4, #4]
 8008222:	e7b2      	b.n	800818a <_malloc_r+0x32>
 8008224:	4634      	mov	r4, r6
 8008226:	6876      	ldr	r6, [r6, #4]
 8008228:	e7b9      	b.n	800819e <_malloc_r+0x46>
 800822a:	230c      	movs	r3, #12
 800822c:	4638      	mov	r0, r7
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	f000 f8fe 	bl	8008430 <__malloc_unlock>
 8008234:	e7a1      	b.n	800817a <_malloc_r+0x22>
 8008236:	6025      	str	r5, [r4, #0]
 8008238:	e7de      	b.n	80081f8 <_malloc_r+0xa0>
 800823a:	bf00      	nop
 800823c:	20001914 	.word	0x20001914

08008240 <_putc_r>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	460d      	mov	r5, r1
 8008244:	4614      	mov	r4, r2
 8008246:	4606      	mov	r6, r0
 8008248:	b118      	cbz	r0, 8008252 <_putc_r+0x12>
 800824a:	6983      	ldr	r3, [r0, #24]
 800824c:	b90b      	cbnz	r3, 8008252 <_putc_r+0x12>
 800824e:	f7ff fe03 	bl	8007e58 <__sinit>
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <_putc_r+0x84>)
 8008254:	429c      	cmp	r4, r3
 8008256:	d124      	bne.n	80082a2 <_putc_r+0x62>
 8008258:	6874      	ldr	r4, [r6, #4]
 800825a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825c:	07d8      	lsls	r0, r3, #31
 800825e:	d405      	bmi.n	800826c <_putc_r+0x2c>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	0599      	lsls	r1, r3, #22
 8008264:	d402      	bmi.n	800826c <_putc_r+0x2c>
 8008266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008268:	f7ff fe94 	bl	8007f94 <__retarget_lock_acquire_recursive>
 800826c:	68a3      	ldr	r3, [r4, #8]
 800826e:	3b01      	subs	r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	60a3      	str	r3, [r4, #8]
 8008274:	da05      	bge.n	8008282 <_putc_r+0x42>
 8008276:	69a2      	ldr	r2, [r4, #24]
 8008278:	4293      	cmp	r3, r2
 800827a:	db1c      	blt.n	80082b6 <_putc_r+0x76>
 800827c:	b2eb      	uxtb	r3, r5
 800827e:	2b0a      	cmp	r3, #10
 8008280:	d019      	beq.n	80082b6 <_putc_r+0x76>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	6022      	str	r2, [r4, #0]
 8008288:	701d      	strb	r5, [r3, #0]
 800828a:	b2ed      	uxtb	r5, r5
 800828c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800828e:	07da      	lsls	r2, r3, #31
 8008290:	d405      	bmi.n	800829e <_putc_r+0x5e>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	059b      	lsls	r3, r3, #22
 8008296:	d402      	bmi.n	800829e <_putc_r+0x5e>
 8008298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829a:	f7ff fe7c 	bl	8007f96 <__retarget_lock_release_recursive>
 800829e:	4628      	mov	r0, r5
 80082a0:	bd70      	pop	{r4, r5, r6, pc}
 80082a2:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <_putc_r+0x88>)
 80082a4:	429c      	cmp	r4, r3
 80082a6:	d101      	bne.n	80082ac <_putc_r+0x6c>
 80082a8:	68b4      	ldr	r4, [r6, #8]
 80082aa:	e7d6      	b.n	800825a <_putc_r+0x1a>
 80082ac:	4b07      	ldr	r3, [pc, #28]	; (80082cc <_putc_r+0x8c>)
 80082ae:	429c      	cmp	r4, r3
 80082b0:	bf08      	it	eq
 80082b2:	68f4      	ldreq	r4, [r6, #12]
 80082b4:	e7d1      	b.n	800825a <_putc_r+0x1a>
 80082b6:	4629      	mov	r1, r5
 80082b8:	4622      	mov	r2, r4
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff fbf4 	bl	8007aa8 <__swbuf_r>
 80082c0:	4605      	mov	r5, r0
 80082c2:	e7e3      	b.n	800828c <_putc_r+0x4c>
 80082c4:	08008910 	.word	0x08008910
 80082c8:	08008930 	.word	0x08008930
 80082cc:	080088f0 	.word	0x080088f0

080082d0 <_sbrk_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	2300      	movs	r3, #0
 80082d4:	4d05      	ldr	r5, [pc, #20]	; (80082ec <_sbrk_r+0x1c>)
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	f7f8 ff84 	bl	80011e8 <_sbrk>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_sbrk_r+0x1a>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_sbrk_r+0x1a>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	2000191c 	.word	0x2000191c

080082f0 <__sread>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	460c      	mov	r4, r1
 80082f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f8:	f000 f8a0 	bl	800843c <_read_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	bfab      	itete	ge
 8008300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008302:	89a3      	ldrhlt	r3, [r4, #12]
 8008304:	181b      	addge	r3, r3, r0
 8008306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800830a:	bfac      	ite	ge
 800830c:	6563      	strge	r3, [r4, #84]	; 0x54
 800830e:	81a3      	strhlt	r3, [r4, #12]
 8008310:	bd10      	pop	{r4, pc}

08008312 <__swrite>:
 8008312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	461f      	mov	r7, r3
 8008318:	898b      	ldrh	r3, [r1, #12]
 800831a:	4605      	mov	r5, r0
 800831c:	460c      	mov	r4, r1
 800831e:	05db      	lsls	r3, r3, #23
 8008320:	4616      	mov	r6, r2
 8008322:	d505      	bpl.n	8008330 <__swrite+0x1e>
 8008324:	2302      	movs	r3, #2
 8008326:	2200      	movs	r2, #0
 8008328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832c:	f000 f868 	bl	8008400 <_lseek_r>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	4632      	mov	r2, r6
 8008334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008338:	4628      	mov	r0, r5
 800833a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	463b      	mov	r3, r7
 8008342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008346:	f000 b817 	b.w	8008378 <_write_r>

0800834a <__sseek>:
 800834a:	b510      	push	{r4, lr}
 800834c:	460c      	mov	r4, r1
 800834e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008352:	f000 f855 	bl	8008400 <_lseek_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	bf15      	itete	ne
 800835c:	6560      	strne	r0, [r4, #84]	; 0x54
 800835e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008366:	81a3      	strheq	r3, [r4, #12]
 8008368:	bf18      	it	ne
 800836a:	81a3      	strhne	r3, [r4, #12]
 800836c:	bd10      	pop	{r4, pc}

0800836e <__sclose>:
 800836e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008372:	f000 b813 	b.w	800839c <_close_r>
	...

08008378 <_write_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4604      	mov	r4, r0
 800837c:	4d06      	ldr	r5, [pc, #24]	; (8008398 <_write_r+0x20>)
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7f8 fedd 	bl	8001146 <_write>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_write_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_write_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	2000191c 	.word	0x2000191c

0800839c <_close_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	2300      	movs	r3, #0
 80083a0:	4d05      	ldr	r5, [pc, #20]	; (80083b8 <_close_r+0x1c>)
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f8 fee9 	bl	800117e <_close>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_close_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_close_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	2000191c 	.word	0x2000191c

080083bc <_fstat_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	2300      	movs	r3, #0
 80083c0:	4d06      	ldr	r5, [pc, #24]	; (80083dc <_fstat_r+0x20>)
 80083c2:	4604      	mov	r4, r0
 80083c4:	4608      	mov	r0, r1
 80083c6:	4611      	mov	r1, r2
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	f7f8 fee4 	bl	8001196 <_fstat>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d102      	bne.n	80083d8 <_fstat_r+0x1c>
 80083d2:	682b      	ldr	r3, [r5, #0]
 80083d4:	b103      	cbz	r3, 80083d8 <_fstat_r+0x1c>
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	bd38      	pop	{r3, r4, r5, pc}
 80083da:	bf00      	nop
 80083dc:	2000191c 	.word	0x2000191c

080083e0 <_isatty_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	2300      	movs	r3, #0
 80083e4:	4d05      	ldr	r5, [pc, #20]	; (80083fc <_isatty_r+0x1c>)
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f7f8 fee3 	bl	80011b6 <_isatty>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_isatty_r+0x1a>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_isatty_r+0x1a>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	2000191c 	.word	0x2000191c

08008400 <_lseek_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4604      	mov	r4, r0
 8008404:	4d06      	ldr	r5, [pc, #24]	; (8008420 <_lseek_r+0x20>)
 8008406:	4608      	mov	r0, r1
 8008408:	4611      	mov	r1, r2
 800840a:	2200      	movs	r2, #0
 800840c:	602a      	str	r2, [r5, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	f7f8 fedc 	bl	80011cc <_lseek>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d102      	bne.n	800841e <_lseek_r+0x1e>
 8008418:	682b      	ldr	r3, [r5, #0]
 800841a:	b103      	cbz	r3, 800841e <_lseek_r+0x1e>
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	bd38      	pop	{r3, r4, r5, pc}
 8008420:	2000191c 	.word	0x2000191c

08008424 <__malloc_lock>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__malloc_lock+0x8>)
 8008426:	f7ff bdb5 	b.w	8007f94 <__retarget_lock_acquire_recursive>
 800842a:	bf00      	nop
 800842c:	20001910 	.word	0x20001910

08008430 <__malloc_unlock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_unlock+0x8>)
 8008432:	f7ff bdb0 	b.w	8007f96 <__retarget_lock_release_recursive>
 8008436:	bf00      	nop
 8008438:	20001910 	.word	0x20001910

0800843c <_read_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	4d06      	ldr	r5, [pc, #24]	; (800845c <_read_r+0x20>)
 8008442:	4608      	mov	r0, r1
 8008444:	4611      	mov	r1, r2
 8008446:	2200      	movs	r2, #0
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f7f8 fe5e 	bl	800110c <_read>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_read_r+0x1e>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_read_r+0x1e>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	2000191c 	.word	0x2000191c

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr

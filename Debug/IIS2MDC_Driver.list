
IIS2MDC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008814  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08008f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018a4  20000084  08008f9c  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001928  08008f9c  00021928  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016c4b  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fe5  00000000  00000000  00036d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001088  00000000  00000000  00039cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f30  00000000  00000000  0003ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000346c4  00000000  00000000  0003bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017248  00000000  00000000  0007036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013dae9  00000000  00000000  000875b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c509d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c50  00000000  00000000  001c50f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000084 	.word	0x20000084
 8000250:	00000000 	.word	0x00000000
 8000254:	08008a30 	.word	0x08008a30

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000088 	.word	0x20000088
 8000270:	08008a30 	.word	0x08008a30

08000274 <__aeabi_dmul>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800027a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000282:	bf1d      	ittte	ne
 8000284:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000288:	ea94 0f0c 	teqne	r4, ip
 800028c:	ea95 0f0c 	teqne	r5, ip
 8000290:	f000 f8de 	bleq	8000450 <__aeabi_dmul+0x1dc>
 8000294:	442c      	add	r4, r5
 8000296:	ea81 0603 	eor.w	r6, r1, r3
 800029a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a6:	bf18      	it	ne
 80002a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b4:	d038      	beq.n	8000328 <__aeabi_dmul+0xb4>
 80002b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ba:	f04f 0500 	mov.w	r5, #0
 80002be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ca:	f04f 0600 	mov.w	r6, #0
 80002ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002d2:	f09c 0f00 	teq	ip, #0
 80002d6:	bf18      	it	ne
 80002d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80002dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e8:	d204      	bcs.n	80002f4 <__aeabi_dmul+0x80>
 80002ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ee:	416d      	adcs	r5, r5
 80002f0:	eb46 0606 	adc.w	r6, r6, r6
 80002f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000300:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000304:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000308:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800030c:	bf88      	it	hi
 800030e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000312:	d81e      	bhi.n	8000352 <__aeabi_dmul+0xde>
 8000314:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800032c:	ea46 0101 	orr.w	r1, r6, r1
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	ea81 0103 	eor.w	r1, r1, r3
 8000338:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800033c:	bfc2      	ittt	gt
 800033e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000342:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000346:	bd70      	popgt	{r4, r5, r6, pc}
 8000348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800034c:	f04f 0e00 	mov.w	lr, #0
 8000350:	3c01      	subs	r4, #1
 8000352:	f300 80ab 	bgt.w	80004ac <__aeabi_dmul+0x238>
 8000356:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800035a:	bfde      	ittt	le
 800035c:	2000      	movle	r0, #0
 800035e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000362:	bd70      	pople	{r4, r5, r6, pc}
 8000364:	f1c4 0400 	rsb	r4, r4, #0
 8000368:	3c20      	subs	r4, #32
 800036a:	da35      	bge.n	80003d8 <__aeabi_dmul+0x164>
 800036c:	340c      	adds	r4, #12
 800036e:	dc1b      	bgt.n	80003a8 <__aeabi_dmul+0x134>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0520 	rsb	r5, r4, #32
 8000378:	fa00 f305 	lsl.w	r3, r0, r5
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f205 	lsl.w	r2, r1, r5
 8000384:	ea40 0002 	orr.w	r0, r0, r2
 8000388:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800038c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000394:	fa21 f604 	lsr.w	r6, r1, r4
 8000398:	eb42 0106 	adc.w	r1, r2, r6
 800039c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a0:	bf08      	it	eq
 80003a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f1c4 040c 	rsb	r4, r4, #12
 80003ac:	f1c4 0520 	rsb	r5, r4, #32
 80003b0:	fa00 f304 	lsl.w	r3, r0, r4
 80003b4:	fa20 f005 	lsr.w	r0, r0, r5
 80003b8:	fa01 f204 	lsl.w	r2, r1, r4
 80003bc:	ea40 0002 	orr.w	r0, r0, r2
 80003c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c8:	f141 0100 	adc.w	r1, r1, #0
 80003cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d0:	bf08      	it	eq
 80003d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f205 	lsl.w	r2, r0, r5
 80003e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e4:	fa20 f304 	lsr.w	r3, r0, r4
 80003e8:	fa01 f205 	lsl.w	r2, r1, r5
 80003ec:	ea43 0302 	orr.w	r3, r3, r2
 80003f0:	fa21 f004 	lsr.w	r0, r1, r4
 80003f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f8:	fa21 f204 	lsr.w	r2, r1, r4
 80003fc:	ea20 0002 	bic.w	r0, r0, r2
 8000400:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000408:	bf08      	it	eq
 800040a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f094 0f00 	teq	r4, #0
 8000414:	d10f      	bne.n	8000436 <__aeabi_dmul+0x1c2>
 8000416:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800041a:	0040      	lsls	r0, r0, #1
 800041c:	eb41 0101 	adc.w	r1, r1, r1
 8000420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000424:	bf08      	it	eq
 8000426:	3c01      	subeq	r4, #1
 8000428:	d0f7      	beq.n	800041a <__aeabi_dmul+0x1a6>
 800042a:	ea41 0106 	orr.w	r1, r1, r6
 800042e:	f095 0f00 	teq	r5, #0
 8000432:	bf18      	it	ne
 8000434:	4770      	bxne	lr
 8000436:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800043a:	0052      	lsls	r2, r2, #1
 800043c:	eb43 0303 	adc.w	r3, r3, r3
 8000440:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000444:	bf08      	it	eq
 8000446:	3d01      	subeq	r5, #1
 8000448:	d0f7      	beq.n	800043a <__aeabi_dmul+0x1c6>
 800044a:	ea43 0306 	orr.w	r3, r3, r6
 800044e:	4770      	bx	lr
 8000450:	ea94 0f0c 	teq	r4, ip
 8000454:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000458:	bf18      	it	ne
 800045a:	ea95 0f0c 	teqne	r5, ip
 800045e:	d00c      	beq.n	800047a <__aeabi_dmul+0x206>
 8000460:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000464:	bf18      	it	ne
 8000466:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800046a:	d1d1      	bne.n	8000410 <__aeabi_dmul+0x19c>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047e:	bf06      	itte	eq
 8000480:	4610      	moveq	r0, r2
 8000482:	4619      	moveq	r1, r3
 8000484:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000488:	d019      	beq.n	80004be <__aeabi_dmul+0x24a>
 800048a:	ea94 0f0c 	teq	r4, ip
 800048e:	d102      	bne.n	8000496 <__aeabi_dmul+0x222>
 8000490:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000494:	d113      	bne.n	80004be <__aeabi_dmul+0x24a>
 8000496:	ea95 0f0c 	teq	r5, ip
 800049a:	d105      	bne.n	80004a8 <__aeabi_dmul+0x234>
 800049c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004a0:	bf1c      	itt	ne
 80004a2:	4610      	movne	r0, r2
 80004a4:	4619      	movne	r1, r3
 80004a6:	d10a      	bne.n	80004be <__aeabi_dmul+0x24a>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd70      	pop	{r4, r5, r6, pc}
 80004be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c6:	bd70      	pop	{r4, r5, r6, pc}

080004c8 <__aeabi_drsub>:
 80004c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	e002      	b.n	80004d4 <__adddf3>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dsub>:
 80004d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d4 <__adddf3>:
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	bf1f      	itttt	ne
 80004ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fa:	f000 80e2 	beq.w	80006c2 <__adddf3+0x1ee>
 80004fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000502:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000506:	bfb8      	it	lt
 8000508:	426d      	neglt	r5, r5
 800050a:	dd0c      	ble.n	8000526 <__adddf3+0x52>
 800050c:	442c      	add	r4, r5
 800050e:	ea80 0202 	eor.w	r2, r0, r2
 8000512:	ea81 0303 	eor.w	r3, r1, r3
 8000516:	ea82 0000 	eor.w	r0, r2, r0
 800051a:	ea83 0101 	eor.w	r1, r3, r1
 800051e:	ea80 0202 	eor.w	r2, r0, r2
 8000522:	ea81 0303 	eor.w	r3, r1, r3
 8000526:	2d36      	cmp	r5, #54	; 0x36
 8000528:	bf88      	it	hi
 800052a:	bd30      	pophi	{r4, r5, pc}
 800052c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000530:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000534:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000538:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800053c:	d002      	beq.n	8000544 <__adddf3+0x70>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000548:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800054c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000550:	d002      	beq.n	8000558 <__adddf3+0x84>
 8000552:	4252      	negs	r2, r2
 8000554:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000558:	ea94 0f05 	teq	r4, r5
 800055c:	f000 80a7 	beq.w	80006ae <__adddf3+0x1da>
 8000560:	f1a4 0401 	sub.w	r4, r4, #1
 8000564:	f1d5 0e20 	rsbs	lr, r5, #32
 8000568:	db0d      	blt.n	8000586 <__adddf3+0xb2>
 800056a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056e:	fa22 f205 	lsr.w	r2, r2, r5
 8000572:	1880      	adds	r0, r0, r2
 8000574:	f141 0100 	adc.w	r1, r1, #0
 8000578:	fa03 f20e 	lsl.w	r2, r3, lr
 800057c:	1880      	adds	r0, r0, r2
 800057e:	fa43 f305 	asr.w	r3, r3, r5
 8000582:	4159      	adcs	r1, r3
 8000584:	e00e      	b.n	80005a4 <__adddf3+0xd0>
 8000586:	f1a5 0520 	sub.w	r5, r5, #32
 800058a:	f10e 0e20 	add.w	lr, lr, #32
 800058e:	2a01      	cmp	r2, #1
 8000590:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000594:	bf28      	it	cs
 8000596:	f04c 0c02 	orrcs.w	ip, ip, #2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	18c0      	adds	r0, r0, r3
 80005a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	d507      	bpl.n	80005ba <__adddf3+0xe6>
 80005aa:	f04f 0e00 	mov.w	lr, #0
 80005ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80005b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005be:	d31b      	bcc.n	80005f8 <__adddf3+0x124>
 80005c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c4:	d30c      	bcc.n	80005e0 <__adddf3+0x10c>
 80005c6:	0849      	lsrs	r1, r1, #1
 80005c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80005cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005d0:	f104 0401 	add.w	r4, r4, #1
 80005d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005dc:	f080 809a 	bcs.w	8000714 <__adddf3+0x240>
 80005e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	ea41 0105 	orr.w	r1, r1, r5
 80005f6:	bd30      	pop	{r4, r5, pc}
 80005f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005fc:	4140      	adcs	r0, r0
 80005fe:	eb41 0101 	adc.w	r1, r1, r1
 8000602:	3c01      	subs	r4, #1
 8000604:	bf28      	it	cs
 8000606:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800060a:	d2e9      	bcs.n	80005e0 <__adddf3+0x10c>
 800060c:	f091 0f00 	teq	r1, #0
 8000610:	bf04      	itt	eq
 8000612:	4601      	moveq	r1, r0
 8000614:	2000      	moveq	r0, #0
 8000616:	fab1 f381 	clz	r3, r1
 800061a:	bf08      	it	eq
 800061c:	3320      	addeq	r3, #32
 800061e:	f1a3 030b 	sub.w	r3, r3, #11
 8000622:	f1b3 0220 	subs.w	r2, r3, #32
 8000626:	da0c      	bge.n	8000642 <__adddf3+0x16e>
 8000628:	320c      	adds	r2, #12
 800062a:	dd08      	ble.n	800063e <__adddf3+0x16a>
 800062c:	f102 0c14 	add.w	ip, r2, #20
 8000630:	f1c2 020c 	rsb	r2, r2, #12
 8000634:	fa01 f00c 	lsl.w	r0, r1, ip
 8000638:	fa21 f102 	lsr.w	r1, r1, r2
 800063c:	e00c      	b.n	8000658 <__adddf3+0x184>
 800063e:	f102 0214 	add.w	r2, r2, #20
 8000642:	bfd8      	it	le
 8000644:	f1c2 0c20 	rsble	ip, r2, #32
 8000648:	fa01 f102 	lsl.w	r1, r1, r2
 800064c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000650:	bfdc      	itt	le
 8000652:	ea41 010c 	orrle.w	r1, r1, ip
 8000656:	4090      	lslle	r0, r2
 8000658:	1ae4      	subs	r4, r4, r3
 800065a:	bfa2      	ittt	ge
 800065c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000660:	4329      	orrge	r1, r5
 8000662:	bd30      	popge	{r4, r5, pc}
 8000664:	ea6f 0404 	mvn.w	r4, r4
 8000668:	3c1f      	subs	r4, #31
 800066a:	da1c      	bge.n	80006a6 <__adddf3+0x1d2>
 800066c:	340c      	adds	r4, #12
 800066e:	dc0e      	bgt.n	800068e <__adddf3+0x1ba>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0220 	rsb	r2, r4, #32
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f302 	lsl.w	r3, r1, r2
 8000680:	ea40 0003 	orr.w	r0, r0, r3
 8000684:	fa21 f304 	lsr.w	r3, r1, r4
 8000688:	ea45 0103 	orr.w	r1, r5, r3
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	f1c4 040c 	rsb	r4, r4, #12
 8000692:	f1c4 0220 	rsb	r2, r4, #32
 8000696:	fa20 f002 	lsr.w	r0, r0, r2
 800069a:	fa01 f304 	lsl.w	r3, r1, r4
 800069e:	ea40 0003 	orr.w	r0, r0, r3
 80006a2:	4629      	mov	r1, r5
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	fa21 f004 	lsr.w	r0, r1, r4
 80006aa:	4629      	mov	r1, r5
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	f094 0f00 	teq	r4, #0
 80006b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b6:	bf06      	itte	eq
 80006b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006bc:	3401      	addeq	r4, #1
 80006be:	3d01      	subne	r5, #1
 80006c0:	e74e      	b.n	8000560 <__adddf3+0x8c>
 80006c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c6:	bf18      	it	ne
 80006c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006cc:	d029      	beq.n	8000722 <__adddf3+0x24e>
 80006ce:	ea94 0f05 	teq	r4, r5
 80006d2:	bf08      	it	eq
 80006d4:	ea90 0f02 	teqeq	r0, r2
 80006d8:	d005      	beq.n	80006e6 <__adddf3+0x212>
 80006da:	ea54 0c00 	orrs.w	ip, r4, r0
 80006de:	bf04      	itt	eq
 80006e0:	4619      	moveq	r1, r3
 80006e2:	4610      	moveq	r0, r2
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea91 0f03 	teq	r1, r3
 80006ea:	bf1e      	ittt	ne
 80006ec:	2100      	movne	r1, #0
 80006ee:	2000      	movne	r0, #0
 80006f0:	bd30      	popne	{r4, r5, pc}
 80006f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f6:	d105      	bne.n	8000704 <__adddf3+0x230>
 80006f8:	0040      	lsls	r0, r0, #1
 80006fa:	4149      	adcs	r1, r1
 80006fc:	bf28      	it	cs
 80006fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd30      	pop	{r4, r5, pc}
 8000704:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000708:	bf3c      	itt	cc
 800070a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070e:	bd30      	popcc	{r4, r5, pc}
 8000710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000714:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000726:	bf1a      	itte	ne
 8000728:	4619      	movne	r1, r3
 800072a:	4610      	movne	r0, r2
 800072c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000730:	bf1c      	itt	ne
 8000732:	460b      	movne	r3, r1
 8000734:	4602      	movne	r2, r0
 8000736:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800073a:	bf06      	itte	eq
 800073c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000740:	ea91 0f03 	teqeq	r1, r3
 8000744:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	bf00      	nop

0800074c <__aeabi_ui2d>:
 800074c:	f090 0f00 	teq	r0, #0
 8000750:	bf04      	itt	eq
 8000752:	2100      	moveq	r1, #0
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000760:	f04f 0500 	mov.w	r5, #0
 8000764:	f04f 0100 	mov.w	r1, #0
 8000768:	e750      	b.n	800060c <__adddf3+0x138>
 800076a:	bf00      	nop

0800076c <__aeabi_i2d>:
 800076c:	f090 0f00 	teq	r0, #0
 8000770:	bf04      	itt	eq
 8000772:	2100      	moveq	r1, #0
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000780:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000784:	bf48      	it	mi
 8000786:	4240      	negmi	r0, r0
 8000788:	f04f 0100 	mov.w	r1, #0
 800078c:	e73e      	b.n	800060c <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_f2d>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000796:	ea4f 0131 	mov.w	r1, r1, rrx
 800079a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079e:	bf1f      	itttt	ne
 80007a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007ac:	4770      	bxne	lr
 80007ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007b2:	bf08      	it	eq
 80007b4:	4770      	bxeq	lr
 80007b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007ba:	bf04      	itt	eq
 80007bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	e71c      	b.n	800060c <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_ul2d>:
 80007d4:	ea50 0201 	orrs.w	r2, r0, r1
 80007d8:	bf08      	it	eq
 80007da:	4770      	bxeq	lr
 80007dc:	b530      	push	{r4, r5, lr}
 80007de:	f04f 0500 	mov.w	r5, #0
 80007e2:	e00a      	b.n	80007fa <__aeabi_l2d+0x16>

080007e4 <__aeabi_l2d>:
 80007e4:	ea50 0201 	orrs.w	r2, r0, r1
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	b530      	push	{r4, r5, lr}
 80007ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007f2:	d502      	bpl.n	80007fa <__aeabi_l2d+0x16>
 80007f4:	4240      	negs	r0, r0
 80007f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000802:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000806:	f43f aed8 	beq.w	80005ba <__adddf3+0xe6>
 800080a:	f04f 0203 	mov.w	r2, #3
 800080e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000812:	bf18      	it	ne
 8000814:	3203      	addne	r2, #3
 8000816:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081a:	bf18      	it	ne
 800081c:	3203      	addne	r2, #3
 800081e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000822:	f1c2 0320 	rsb	r3, r2, #32
 8000826:	fa00 fc03 	lsl.w	ip, r0, r3
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000832:	ea40 000e 	orr.w	r0, r0, lr
 8000836:	fa21 f102 	lsr.w	r1, r1, r2
 800083a:	4414      	add	r4, r2
 800083c:	e6bd      	b.n	80005ba <__adddf3+0xe6>
 800083e:	bf00      	nop

08000840 <__aeabi_d2f>:
 8000840:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000844:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000848:	bf24      	itt	cs
 800084a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000852:	d90d      	bls.n	8000870 <__aeabi_d2f+0x30>
 8000854:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000858:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800085c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000860:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000864:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000868:	bf08      	it	eq
 800086a:	f020 0001 	biceq.w	r0, r0, #1
 800086e:	4770      	bx	lr
 8000870:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000874:	d121      	bne.n	80008ba <__aeabi_d2f+0x7a>
 8000876:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800087a:	bfbc      	itt	lt
 800087c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000880:	4770      	bxlt	lr
 8000882:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000886:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800088a:	f1c2 0218 	rsb	r2, r2, #24
 800088e:	f1c2 0c20 	rsb	ip, r2, #32
 8000892:	fa10 f30c 	lsls.w	r3, r0, ip
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	bf18      	it	ne
 800089c:	f040 0001 	orrne.w	r0, r0, #1
 80008a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008ac:	ea40 000c 	orr.w	r0, r0, ip
 80008b0:	fa23 f302 	lsr.w	r3, r3, r2
 80008b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b8:	e7cc      	b.n	8000854 <__aeabi_d2f+0x14>
 80008ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008be:	d107      	bne.n	80008d0 <__aeabi_d2f+0x90>
 80008c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c4:	bf1e      	ittt	ne
 80008c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ce:	4770      	bxne	lr
 80008d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <__aeabi_uldivmod>:
 80008e0:	b953      	cbnz	r3, 80008f8 <__aeabi_uldivmod+0x18>
 80008e2:	b94a      	cbnz	r2, 80008f8 <__aeabi_uldivmod+0x18>
 80008e4:	2900      	cmp	r1, #0
 80008e6:	bf08      	it	eq
 80008e8:	2800      	cmpeq	r0, #0
 80008ea:	bf1c      	itt	ne
 80008ec:	f04f 31ff 	movne.w	r1, #4294967295
 80008f0:	f04f 30ff 	movne.w	r0, #4294967295
 80008f4:	f000 b982 	b.w	8000bfc <__aeabi_idiv0>
 80008f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80008fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000900:	f000 f806 	bl	8000910 <__udivmoddi4>
 8000904:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800090c:	b004      	add	sp, #16
 800090e:	4770      	bx	lr

08000910 <__udivmoddi4>:
 8000910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000914:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000916:	4604      	mov	r4, r0
 8000918:	460f      	mov	r7, r1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d148      	bne.n	80009b0 <__udivmoddi4+0xa0>
 800091e:	428a      	cmp	r2, r1
 8000920:	4694      	mov	ip, r2
 8000922:	d961      	bls.n	80009e8 <__udivmoddi4+0xd8>
 8000924:	fab2 f382 	clz	r3, r2
 8000928:	b143      	cbz	r3, 800093c <__udivmoddi4+0x2c>
 800092a:	f1c3 0120 	rsb	r1, r3, #32
 800092e:	409f      	lsls	r7, r3
 8000930:	fa02 fc03 	lsl.w	ip, r2, r3
 8000934:	409c      	lsls	r4, r3
 8000936:	fa20 f101 	lsr.w	r1, r0, r1
 800093a:	430f      	orrs	r7, r1
 800093c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	0c22      	lsrs	r2, r4, #16
 8000946:	fbb7 f6f1 	udiv	r6, r7, r1
 800094a:	fb01 7716 	mls	r7, r1, r6, r7
 800094e:	fb06 f00e 	mul.w	r0, r6, lr
 8000952:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000956:	4290      	cmp	r0, r2
 8000958:	d908      	bls.n	800096c <__udivmoddi4+0x5c>
 800095a:	eb1c 0202 	adds.w	r2, ip, r2
 800095e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000962:	d202      	bcs.n	800096a <__udivmoddi4+0x5a>
 8000964:	4290      	cmp	r0, r2
 8000966:	f200 8137 	bhi.w	8000bd8 <__udivmoddi4+0x2c8>
 800096a:	463e      	mov	r6, r7
 800096c:	1a12      	subs	r2, r2, r0
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb2 f0f1 	udiv	r0, r2, r1
 8000974:	fb01 2210 	mls	r2, r1, r0, r2
 8000978:	fb00 fe0e 	mul.w	lr, r0, lr
 800097c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000980:	45a6      	cmp	lr, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x86>
 8000984:	eb1c 0404 	adds.w	r4, ip, r4
 8000988:	f100 32ff 	add.w	r2, r0, #4294967295
 800098c:	d202      	bcs.n	8000994 <__udivmoddi4+0x84>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f200 811c 	bhi.w	8000bcc <__udivmoddi4+0x2bc>
 8000994:	4610      	mov	r0, r2
 8000996:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099a:	eba4 040e 	sub.w	r4, r4, lr
 800099e:	2600      	movs	r6, #0
 80009a0:	b11d      	cbz	r5, 80009aa <__udivmoddi4+0x9a>
 80009a2:	40dc      	lsrs	r4, r3
 80009a4:	2300      	movs	r3, #0
 80009a6:	e9c5 4300 	strd	r4, r3, [r5]
 80009aa:	4631      	mov	r1, r6
 80009ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009b0:	428b      	cmp	r3, r1
 80009b2:	d909      	bls.n	80009c8 <__udivmoddi4+0xb8>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	f000 80fd 	beq.w	8000bb4 <__udivmoddi4+0x2a4>
 80009ba:	2600      	movs	r6, #0
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	4630      	mov	r0, r6
 80009c2:	4631      	mov	r1, r6
 80009c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c8:	fab3 f683 	clz	r6, r3
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d14b      	bne.n	8000a68 <__udivmoddi4+0x158>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	f0c0 80f2 	bcc.w	8000bba <__udivmoddi4+0x2aa>
 80009d6:	4282      	cmp	r2, r0
 80009d8:	f240 80ef 	bls.w	8000bba <__udivmoddi4+0x2aa>
 80009dc:	4630      	mov	r0, r6
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d0e3      	beq.n	80009aa <__udivmoddi4+0x9a>
 80009e2:	e9c5 4700 	strd	r4, r7, [r5]
 80009e6:	e7e0      	b.n	80009aa <__udivmoddi4+0x9a>
 80009e8:	b902      	cbnz	r2, 80009ec <__udivmoddi4+0xdc>
 80009ea:	deff      	udf	#255	; 0xff
 80009ec:	fab2 f382 	clz	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f040 809d 	bne.w	8000b30 <__udivmoddi4+0x220>
 80009f6:	1a89      	subs	r1, r1, r2
 80009f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80009fc:	b297      	uxth	r7, r2
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f2fe 	udiv	r2, r1, lr
 8000a06:	fb0e 1112 	mls	r1, lr, r2, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb07 f002 	mul.w	r0, r7, r2
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d90f      	bls.n	8000a36 <__udivmoddi4+0x126>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000a1e:	bf2c      	ite	cs
 8000a20:	f04f 0901 	movcs.w	r9, #1
 8000a24:	f04f 0900 	movcc.w	r9, #0
 8000a28:	4288      	cmp	r0, r1
 8000a2a:	d903      	bls.n	8000a34 <__udivmoddi4+0x124>
 8000a2c:	f1b9 0f00 	cmp.w	r9, #0
 8000a30:	f000 80cf 	beq.w	8000bd2 <__udivmoddi4+0x2c2>
 8000a34:	4642      	mov	r2, r8
 8000a36:	1a09      	subs	r1, r1, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a42:	fb00 f707 	mul.w	r7, r0, r7
 8000a46:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a4a:	42a7      	cmp	r7, r4
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x150>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x14e>
 8000a58:	42a7      	cmp	r7, r4
 8000a5a:	f200 80b4 	bhi.w	8000bc6 <__udivmoddi4+0x2b6>
 8000a5e:	4608      	mov	r0, r1
 8000a60:	1be4      	subs	r4, r4, r7
 8000a62:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000a66:	e79b      	b.n	80009a0 <__udivmoddi4+0x90>
 8000a68:	f1c6 0720 	rsb	r7, r6, #32
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	fa01 f406 	lsl.w	r4, r1, r6
 8000a72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	40b2      	lsls	r2, r6
 8000a7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a86:	431c      	orrs	r4, r3
 8000a88:	fa1f fe8c 	uxth.w	lr, ip
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	0c20      	lsrs	r0, r4, #16
 8000a92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a96:	fb09 1118 	mls	r1, r9, r8, r1
 8000a9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a9e:	fb08 f00e 	mul.w	r0, r8, lr
 8000aa2:	4288      	cmp	r0, r1
 8000aa4:	d90f      	bls.n	8000ac6 <__udivmoddi4+0x1b6>
 8000aa6:	eb1c 0101 	adds.w	r1, ip, r1
 8000aaa:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aae:	bf2c      	ite	cs
 8000ab0:	f04f 0b01 	movcs.w	fp, #1
 8000ab4:	f04f 0b00 	movcc.w	fp, #0
 8000ab8:	4288      	cmp	r0, r1
 8000aba:	d903      	bls.n	8000ac4 <__udivmoddi4+0x1b4>
 8000abc:	f1bb 0f00 	cmp.w	fp, #0
 8000ac0:	f000 808d 	beq.w	8000bde <__udivmoddi4+0x2ce>
 8000ac4:	46d0      	mov	r8, sl
 8000ac6:	1a09      	subs	r1, r1, r0
 8000ac8:	b2a4      	uxth	r4, r4
 8000aca:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ace:	fb09 1110 	mls	r1, r9, r0, r1
 8000ad2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ad6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ada:	458e      	cmp	lr, r1
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1de>
 8000ade:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ae6:	d201      	bcs.n	8000aec <__udivmoddi4+0x1dc>
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d87f      	bhi.n	8000bec <__udivmoddi4+0x2dc>
 8000aec:	4620      	mov	r0, r4
 8000aee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000af2:	eba1 010e 	sub.w	r1, r1, lr
 8000af6:	fba0 9802 	umull	r9, r8, r0, r2
 8000afa:	4541      	cmp	r1, r8
 8000afc:	464c      	mov	r4, r9
 8000afe:	46c6      	mov	lr, r8
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0x1f8>
 8000b02:	d106      	bne.n	8000b12 <__udivmoddi4+0x202>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d204      	bcs.n	8000b12 <__udivmoddi4+0x202>
 8000b08:	3801      	subs	r0, #1
 8000b0a:	ebb9 0402 	subs.w	r4, r9, r2
 8000b0e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d070      	beq.n	8000bf8 <__udivmoddi4+0x2e8>
 8000b16:	1b1a      	subs	r2, r3, r4
 8000b18:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1c:	fa22 f306 	lsr.w	r3, r2, r6
 8000b20:	fa01 f707 	lsl.w	r7, r1, r7
 8000b24:	40f1      	lsrs	r1, r6
 8000b26:	2600      	movs	r6, #0
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	e73c      	b.n	80009aa <__udivmoddi4+0x9a>
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	f1c3 0020 	rsb	r0, r3, #32
 8000b38:	fa01 f203 	lsl.w	r2, r1, r3
 8000b3c:	fa21 f600 	lsr.w	r6, r1, r0
 8000b40:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b44:	fa24 f100 	lsr.w	r1, r4, r0
 8000b48:	fa1f f78c 	uxth.w	r7, ip
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	4311      	orrs	r1, r2
 8000b50:	fbb6 f0fe 	udiv	r0, r6, lr
 8000b54:	0c0a      	lsrs	r2, r1, #16
 8000b56:	fb0e 6610 	mls	r6, lr, r0, r6
 8000b5a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000b5e:	fb00 f607 	mul.w	r6, r0, r7
 8000b62:	4296      	cmp	r6, r2
 8000b64:	d90e      	bls.n	8000b84 <__udivmoddi4+0x274>
 8000b66:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b6e:	bf2c      	ite	cs
 8000b70:	f04f 0901 	movcs.w	r9, #1
 8000b74:	f04f 0900 	movcc.w	r9, #0
 8000b78:	4296      	cmp	r6, r2
 8000b7a:	d902      	bls.n	8000b82 <__udivmoddi4+0x272>
 8000b7c:	f1b9 0f00 	cmp.w	r9, #0
 8000b80:	d031      	beq.n	8000be6 <__udivmoddi4+0x2d6>
 8000b82:	4640      	mov	r0, r8
 8000b84:	1b92      	subs	r2, r2, r6
 8000b86:	b289      	uxth	r1, r1
 8000b88:	fbb2 f6fe 	udiv	r6, r2, lr
 8000b8c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000b90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000b94:	fb06 f207 	mul.w	r2, r6, r7
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	d907      	bls.n	8000bac <__udivmoddi4+0x29c>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ba4:	d201      	bcs.n	8000baa <__udivmoddi4+0x29a>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	d823      	bhi.n	8000bf2 <__udivmoddi4+0x2e2>
 8000baa:	4646      	mov	r6, r8
 8000bac:	1a89      	subs	r1, r1, r2
 8000bae:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bb2:	e725      	b.n	8000a00 <__udivmoddi4+0xf0>
 8000bb4:	462e      	mov	r6, r5
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	e6f7      	b.n	80009aa <__udivmoddi4+0x9a>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	461f      	mov	r7, r3
 8000bc4:	e70b      	b.n	80009de <__udivmoddi4+0xce>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e749      	b.n	8000a60 <__udivmoddi4+0x150>
 8000bcc:	4464      	add	r4, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	e6e1      	b.n	8000996 <__udivmoddi4+0x86>
 8000bd2:	3a02      	subs	r2, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	e72e      	b.n	8000a36 <__udivmoddi4+0x126>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	4462      	add	r2, ip
 8000bdc:	e6c6      	b.n	800096c <__udivmoddi4+0x5c>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	e76f      	b.n	8000ac6 <__udivmoddi4+0x1b6>
 8000be6:	3802      	subs	r0, #2
 8000be8:	4462      	add	r2, ip
 8000bea:	e7cb      	b.n	8000b84 <__udivmoddi4+0x274>
 8000bec:	3802      	subs	r0, #2
 8000bee:	4461      	add	r1, ip
 8000bf0:	e77d      	b.n	8000aee <__udivmoddi4+0x1de>
 8000bf2:	3e02      	subs	r6, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	e7d9      	b.n	8000bac <__udivmoddi4+0x29c>
 8000bf8:	462e      	mov	r6, r5
 8000bfa:	e6d6      	b.n	80009aa <__udivmoddi4+0x9a>

08000bfc <__aeabi_idiv0>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <IIS2MDC_Init>:
 *@Params: IIS2MDC Init Settings, Dev Handle pointer, Low level driver structure
 *@Return: None
 *@Precondition: LowLevelDrivers and Settings params should already be initialized.
 *@Postcondition: Dev Handle members and IIS2MDC Hardware registers will be initialized.
 **************************************//**************************************/
void IIS2MDC_Init(IIS2MDC_InitStruct_t Settings, IIS2MDC_Handle_t *Dev, IIS2MDC_IO_Drv_t LowLevelDrivers){
 8000c00:	b084      	sub	sp, #16
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	f107 0c18 	add.w	ip, r7, #24
 8000c0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Dev->IIS2MDC_IO.Init = LowLevelDrivers.Init;
 8000c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c14:	601a      	str	r2, [r3, #0]
	Dev->IIS2MDC_IO.DeInit = LowLevelDrivers.DeInit;
 8000c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	605a      	str	r2, [r3, #4]
	Dev->IIS2MDC_IO.WriteReg = LowLevelDrivers.WriteReg;
 8000c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	60da      	str	r2, [r3, #12]
	Dev->IIS2MDC_IO.ReadReg = LowLevelDrivers.ReadReg;
 8000c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	609a      	str	r2, [r3, #8]
	Dev->IIS2MDC_IO.ioctl = LowLevelDrivers.ioctl;
 8000c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	611a      	str	r2, [r3, #16]
	Dev->IIS2MDC_IO.Init();
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4798      	blx	r3

	Dev->IIS2MDC_IO.ioctl(IIS2MDC_IRQDisable);
 8000c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	2001      	movs	r0, #1
 8000c3a:	4798      	blx	r3

	uint8_t buffer8;
	uint16_t buffer16;

	/*WHO AM I*/
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_WHO_AM_I, &buffer8,1) != IIS2MDC_Ok){
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f107 010f 	add.w	r1, r7, #15
 8000c44:	2201      	movs	r2, #1
 8000c46:	204f      	movs	r0, #79	; 0x4f
 8000c48:	4798      	blx	r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <IIS2MDC_Init+0x5a>
		_log(log_iis2mdc, "Initialization: Read Device ID Reg Failed.");
 8000c50:	497a      	ldr	r1, [pc, #488]	; (8000e3c <IIS2MDC_Init+0x23c>)
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 fbce 	bl	80013f4 <_log>
 8000c58:	e007      	b.n	8000c6a <IIS2MDC_Init+0x6a>
	} else if(buffer8 != IIS2MDC_DEVICE_ID){
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	2240      	movs	r2, #64	; 0x40
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d003      	beq.n	8000c6a <IIS2MDC_Init+0x6a>
		_log(log_iis2mdc, "Initialization: Device ID Mismatch");
 8000c62:	4977      	ldr	r1, [pc, #476]	; (8000e40 <IIS2MDC_Init+0x240>)
 8000c64:	2002      	movs	r0, #2
 8000c66:	f000 fbc5 	bl	80013f4 <_log>
	}

	/*Offset X Regs*/
	buffer16 = Settings.Offset_X;
 8000c6a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_OFFSET_X_REG_L, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 8000c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f107 010c 	add.w	r1, r7, #12
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	2045      	movs	r0, #69	; 0x45
 8000c7e:	4798      	blx	r3
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <IIS2MDC_Init+0x8e>
		_log(log_iis2mdc, "Initialization: Offset X Write Failed");
 8000c86:	496f      	ldr	r1, [pc, #444]	; (8000e44 <IIS2MDC_Init+0x244>)
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f000 fbb3 	bl	80013f4 <_log>
	}

	/*Offset Y Regs*/
	buffer16 = Settings.Offset_Y;
 8000c8e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_OFFSET_Y_REG_L, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 8000c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	f107 010c 	add.w	r1, r7, #12
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2047      	movs	r0, #71	; 0x47
 8000ca2:	4798      	blx	r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <IIS2MDC_Init+0xb2>
		_log(log_iis2mdc, "Initialization: Offset Y Write Failed");
 8000caa:	4967      	ldr	r1, [pc, #412]	; (8000e48 <IIS2MDC_Init+0x248>)
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 fba1 	bl	80013f4 <_log>
	}

	/*Offset Z Regs*/
	buffer16 = Settings.Offset_Z;
 8000cb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_OFFSET_Z_REG_L, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	f107 010c 	add.w	r1, r7, #12
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	2049      	movs	r0, #73	; 0x49
 8000cc6:	4798      	blx	r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <IIS2MDC_Init+0xd6>
		_log(log_iis2mdc, "Initialization: Offset Z Write Failed");
 8000cce:	495f      	ldr	r1, [pc, #380]	; (8000e4c <IIS2MDC_Init+0x24c>)
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 fb8f 	bl	80013f4 <_log>
	}

	/*IRQ Threshold*/
	buffer16 = Settings.IntThreshold;
 8000cd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	81bb      	strh	r3, [r7, #12]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_INT_THS_L_REG, (uint8_t*)&buffer16,2) != IIS2MDC_Ok){
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	f107 010c 	add.w	r1, r7, #12
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2065      	movs	r0, #101	; 0x65
 8000cea:	4798      	blx	r3
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <IIS2MDC_Init+0xfa>
		_log(log_iis2mdc, "Initialization: Int Threshold Write Failed");
 8000cf2:	4957      	ldr	r1, [pc, #348]	; (8000e50 <IIS2MDC_Init+0x250>)
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f000 fb7d 	bl	80013f4 <_log>
	}

	/*CFG A*/
	buffer8 = (Settings.TempComp << 7) | (Settings.PowerMode << 4) | (Settings.DataRate << 2) | (Settings.OperatingMode << 0);
 8000cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cfe:	01db      	lsls	r3, r3, #7
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	73fb      	strb	r3, [r7, #15]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_CFG_REG_A,&buffer8,1) != IIS2MDC_Ok){
 8000d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f107 010f 	add.w	r1, r7, #15
 8000d30:	2201      	movs	r2, #1
 8000d32:	2060      	movs	r0, #96	; 0x60
 8000d34:	4798      	blx	r3
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <IIS2MDC_Init+0x144>
		_log(log_iis2mdc, "Initialization: Write CFG Reg A Failed.");
 8000d3c:	4945      	ldr	r1, [pc, #276]	; (8000e54 <IIS2MDC_Init+0x254>)
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f000 fb58 	bl	80013f4 <_log>
	}

	/*CFG B*/
	buffer8 = (Settings.IRQOffsetMode << 3) | (Settings.OffsetCancellationPulse << 2) | (Settings.LPF << 0);
 8000d44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	b25a      	sxtb	r2, r3
 8000d4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	73fb      	strb	r3, [r7, #15]
	if(Settings.OperatingMode == IIS2MDC_OneShotMode){
 8000d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d10a      	bne.n	8000d84 <IIS2MDC_Init+0x184>
		buffer8 |= Settings.OffsetCancellation << 4;
 8000d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e009      	b.n	8000d98 <IIS2MDC_Init+0x198>
	} else {
		buffer8 |= Settings.OffsetCancellation << 1;
 8000d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	73fb      	strb	r3, [r7, #15]
	}

	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_CFG_REG_B,&buffer8,1) != IIS2MDC_Ok){
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f107 010f 	add.w	r1, r7, #15
 8000da0:	2201      	movs	r2, #1
 8000da2:	2061      	movs	r0, #97	; 0x61
 8000da4:	4798      	blx	r3
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <IIS2MDC_Init+0x1b4>
		_log(log_iis2mdc, "Initialization: Write CFG Reg B Failed.");
 8000dac:	492a      	ldr	r1, [pc, #168]	; (8000e58 <IIS2MDC_Init+0x258>)
 8000dae:	2002      	movs	r0, #2
 8000db0:	f000 fb20 	bl	80013f4 <_log>
	}

	/*CFG C*/
	buffer8 = (Settings.IntPinMode << 6) | (1 << 4) | (Settings.DrdyPinMode);
 8000db4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000db8:	019b      	lsls	r3, r3, #6
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	73fb      	strb	r3, [r7, #15]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_CFG_REG_C,&buffer8,1) != IIS2MDC_Ok){
 8000dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	f107 010f 	add.w	r1, r7, #15
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2062      	movs	r0, #98	; 0x62
 8000dd8:	4798      	blx	r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <IIS2MDC_Init+0x1e8>
		_log(log_iis2mdc, "Initialization: Write CFG Reg C Failed.");
 8000de0:	491e      	ldr	r1, [pc, #120]	; (8000e5c <IIS2MDC_Init+0x25c>)
 8000de2:	2002      	movs	r0, #2
 8000de4:	f000 fb06 	bl	80013f4 <_log>
	}

	/*Int Source Reg*/
	buffer8 = Settings.IRQConfig;
 8000de8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dec:	73fb      	strb	r3, [r7, #15]
	if(Dev->IIS2MDC_IO.WriteReg(IIS2MDC_REG_INT_CTRL_REG,&buffer8,1) != IIS2MDC_Ok){
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f107 010f 	add.w	r1, r7, #15
 8000df6:	2201      	movs	r2, #1
 8000df8:	2063      	movs	r0, #99	; 0x63
 8000dfa:	4798      	blx	r3
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <IIS2MDC_Init+0x20a>
		_log(log_iis2mdc, "Initialization: Write Int Ctrl Reg Failed.");
 8000e02:	4917      	ldr	r1, [pc, #92]	; (8000e60 <IIS2MDC_Init+0x260>)
 8000e04:	2002      	movs	r0, #2
 8000e06:	f000 faf5 	bl	80013f4 <_log>
	}

	/*Clear Data acquired while initializing*/
	uint8_t buffer6bytes[6];
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_OUTX_L_REG,buffer6bytes,6) != IIS2MDC_Ok){
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	1d39      	adds	r1, r7, #4
 8000e10:	2206      	movs	r2, #6
 8000e12:	2068      	movs	r0, #104	; 0x68
 8000e14:	4798      	blx	r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <IIS2MDC_Init+0x224>
		_log(log_iis2mdc, "Initialization: Reading Data Reg Failed.");
 8000e1c:	4911      	ldr	r1, [pc, #68]	; (8000e64 <IIS2MDC_Init+0x264>)
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f000 fae8 	bl	80013f4 <_log>
	}

	Dev->IIS2MDC_IO.ioctl(IIS2MDC_IRQEnable);
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2000      	movs	r0, #0
 8000e2a:	4798      	blx	r3


}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e36:	b004      	add	sp, #16
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	08008a48 	.word	0x08008a48
 8000e40:	08008a74 	.word	0x08008a74
 8000e44:	08008a98 	.word	0x08008a98
 8000e48:	08008ac0 	.word	0x08008ac0
 8000e4c:	08008ae8 	.word	0x08008ae8
 8000e50:	08008b10 	.word	0x08008b10
 8000e54:	08008b3c 	.word	0x08008b3c
 8000e58:	08008b64 	.word	0x08008b64
 8000e5c:	08008b8c 	.word	0x08008b8c
 8000e60:	08008bb4 	.word	0x08008bb4
 8000e64:	08008be0 	.word	0x08008be0

08000e68 <IIS2MDC_ReadMagnetic>:
 *@Params: IIS2MDC Device Handle
 *@Return: Status of read attempt: IIS2MDC_DataNotReady if new data is not available, IIS2MDC_DataReady if data was read successfully
 *@Precondition: Device handle is initialized, StartConversion should be called prior to this in OneShot mode (otherwise the read wont be successful)
 *@Postcondition: Dev Handle will contain new data in Milligause. If data was read successfully, DataReadyFlag will be set to IIS2MDC_DataNotReady.
 **************************************//**************************************/
IIS2MDC_DataReadyStatus_t IIS2MDC_ReadMagnetic(IIS2MDC_Handle_t *Dev){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_STATUS_REG, buffer,1) != IIS2MDC_Ok){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2067      	movs	r0, #103	; 0x67
 8000e7c:	4798      	blx	r3
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <IIS2MDC_ReadMagnetic+0x28>
		_log(log_iis2mdc, "Reading Status Reg Failed.");
 8000e84:	4915      	ldr	r1, [pc, #84]	; (8000edc <IIS2MDC_ReadMagnetic+0x74>)
 8000e86:	2002      	movs	r0, #2
 8000e88:	f000 fab4 	bl	80013f4 <_log>
		return IIS2MDC_DataNotReady;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e021      	b.n	8000ed4 <IIS2MDC_ReadMagnetic+0x6c>
	} else if ((buffer[0] & 0x07) != 0x07){
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	d004      	beq.n	8000ea4 <IIS2MDC_ReadMagnetic+0x3c>
		Dev->DataReadyFlag = IIS2MDC_DataNotReady;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	751a      	strb	r2, [r3, #20]
		return IIS2MDC_DataNotReady;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e017      	b.n	8000ed4 <IIS2MDC_ReadMagnetic+0x6c>
	}

	if(Dev->IIS2MDC_IO.ReadReg(IIS2MDC_REG_OUTX_L_REG, buffer,6) != IIS2MDC_Ok){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f107 0108 	add.w	r1, r7, #8
 8000eac:	2206      	movs	r2, #6
 8000eae:	2068      	movs	r0, #104	; 0x68
 8000eb0:	4798      	blx	r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <IIS2MDC_ReadMagnetic+0x58>
		_log(log_iis2mdc, "Reading Data Regs Failed.");
 8000eb8:	4909      	ldr	r1, [pc, #36]	; (8000ee0 <IIS2MDC_ReadMagnetic+0x78>)
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 fa9a 	bl	80013f4 <_log>
	}
	Dev->DataReadyFlag = IIS2MDC_DataNotReady; //Data has been read, so reset data ready flag
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	751a      	strb	r2, [r3, #20]
	ConvertMagnetic(Dev, buffer);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f809 	bl	8000ee4 <ConvertMagnetic>

	return IIS2MDC_DataReady;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08008c50 	.word	0x08008c50
 8000ee0:	08008c6c 	.word	0x08008c6c

08000ee4 <ConvertMagnetic>:
 *@Params: Device handle to store data in, buffer of raw sensor output data
 *@Return: None
 *@Precondition: Device handle is initialzed, pdata contains valid data
 *@Postcondition: Device Handle will contain new magnetism measurements in Milligause.
 **************************************//**************************************/
static void ConvertMagnetic(IIS2MDC_Handle_t *Dev, uint8_t *pdata){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	int16_t MagX = ((int8_t)pdata[1] << 8) |  ((int8_t)pdata[0] << 0);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	81fb      	strh	r3, [r7, #14]
	int16_t MagY = ((int8_t)pdata[3] << 8) |  ((int8_t)pdata[2] << 0);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	3302      	adds	r3, #2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	81bb      	strh	r3, [r7, #12]
	int16_t MagZ = ((int8_t)pdata[5] << 8) |  ((int8_t)pdata[4] << 0);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3305      	adds	r3, #5
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	817b      	strh	r3, [r7, #10]
	Dev->MagX = MagX * 1.5;
 8000f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc14 	bl	800076c <__aeabi_i2d>
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <ConvertMagnetic+0xd0>)
 8000f4a:	f7ff f993 	bl	8000274 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fc73 	bl	8000840 <__aeabi_d2f>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
	Dev->MagY = MagY * 1.5;
 8000f60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fc01 	bl	800076c <__aeabi_i2d>
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <ConvertMagnetic+0xd0>)
 8000f70:	f7ff f980 	bl	8000274 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fc60 	bl	8000840 <__aeabi_d2f>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	61da      	str	r2, [r3, #28]
	Dev->MagZ = MagZ * 1.5;
 8000f86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fbee 	bl	800076c <__aeabi_i2d>
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <ConvertMagnetic+0xd0>)
 8000f96:	f7ff f96d 	bl	8000274 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fc4d 	bl	8000840 <__aeabi_d2f>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	621a      	str	r2, [r3, #32]
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	3ff80000 	.word	0x3ff80000

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db12      	blt.n	800102c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	490a      	ldr	r1, [pc, #40]	; (8001038 <__NVIC_DisableIRQ+0x44>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	3320      	adds	r3, #32
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001020:	f3bf 8f4f 	dsb	sy
}
 8001024:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001026:	f3bf 8f6f 	isb	sy
}
 800102a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100

0800103c <IIS2MDC_Init>:
/**************************************//**************************************//**************************************
 * Private Function Definitions
 **************************************//**************************************//**************************************/

/*Initializes low level IO*/
static void IIS2MDC_Init(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_Delay(20); //Device takes 20 ms to boot.
 8001040:	2014      	movs	r0, #20
 8001042:	f000 fd89 	bl	8001b58 <HAL_Delay>
	MX_GPIO_Init();
 8001046:	f000 f89d 	bl	8001184 <MX_GPIO_Init>
	MX_I2C2_Init();
 800104a:	f000 f901 	bl	8001250 <MX_I2C2_Init>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <IIS2MDC_DeInit>:

/*DeInitializes low level IO.*/
static void IIS2MDC_DeInit(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	//Do Not De-Init I2C Peripheral as other devices may be using it.
	HAL_GPIO_DeInit(IIS2MDC_IRQ_GPIO_Port, IIS2MDC_IRQ_Pin);
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <IIS2MDC_DeInit+0x14>)
 800105e:	f001 f887 	bl	8002170 <HAL_GPIO_DeInit>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	42020c00 	.word	0x42020c00

0800106c <IIS2MDC_WriteReg>:

/*Sends data to register over I2C2 Bus*/
static IIS2MDC_Status_t IIS2MDC_WriteReg(uint8_t reg, uint8_t *pdata, uint8_t length){
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, pdata , length, IIS2MDC_TIMEOUT_MS) != HAL_OK){
 800107c:	233c      	movs	r3, #60	; 0x3c
 800107e:	b299      	uxth	r1, r3
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	b29a      	uxth	r2, r3
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	b29b      	uxth	r3, r3
 8001088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108c:	9002      	str	r0, [sp, #8]
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <IIS2MDC_WriteReg+0x50>)
 8001098:	f001 fa20 	bl	80024dc <HAL_I2C_Mem_Write>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <IIS2MDC_WriteReg+0x46>
		_log(log_i2c,"Write Reg address %x failed.",reg);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4906      	ldr	r1, [pc, #24]	; (80010c0 <IIS2MDC_WriteReg+0x54>)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 f9a3 	bl	80013f4 <_log>
		return IIS2MDC_Error;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <IIS2MDC_WriteReg+0x48>
	}
	return IIS2MDC_Ok;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000a0 	.word	0x200000a0
 80010c0:	08008cc8 	.word	0x08008cc8

080010c4 <IIS2MDC_ReadReg>:

/*Reads data from register over I2C2 Bus*/
static IIS2MDC_Status_t IIS2MDC_ReadReg(uint8_t reg, uint8_t *pdata, uint8_t length){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_DEVICE_ADDRESS | 0x01, reg, I2C_MEMADD_SIZE_8BIT, pdata , length, IIS2MDC_TIMEOUT_MS) != HAL_OK){
 80010d4:	233c      	movs	r3, #60	; 0x3c
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	b299      	uxth	r1, r3
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ea:	9002      	str	r0, [sp, #8]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <IIS2MDC_ReadReg+0x58>)
 80010f6:	f001 fb05 	bl	8002704 <HAL_I2C_Mem_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <IIS2MDC_ReadReg+0x4c>
		_log(log_i2c,"Read Reg address %x failed.", reg);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	461a      	mov	r2, r3
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <IIS2MDC_ReadReg+0x5c>)
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f974 	bl	80013f4 <_log>
		return IIS2MDC_Error;
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <IIS2MDC_ReadReg+0x4e>
	}
	return IIS2MDC_Ok;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000a0 	.word	0x200000a0
 8001120:	08008ce8 	.word	0x08008ce8

08001124 <IIS2MDC_ioctl>:

/*Performs any other needed functions for the driver.*/
static uint8_t IIS2MDC_ioctl(IIS2MDC_Cmd_t command){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	uint8_t PinStatus;
	switch(command){
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d010      	beq.n	8001156 <IIS2MDC_ioctl+0x32>
 8001134:	2b02      	cmp	r3, #2
 8001136:	dc1c      	bgt.n	8001172 <IIS2MDC_ioctl+0x4e>
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <IIS2MDC_ioctl+0x1e>
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <IIS2MDC_ioctl+0x28>
			return 1;
		} else {
			return 0;
		}
	default:
		break;
 8001140:	e017      	b.n	8001172 <IIS2MDC_ioctl+0x4e>
		NVIC_EnableIRQ(IIS2MDC_IRQ_EXTI_IRQn);
 8001142:	2015      	movs	r0, #21
 8001144:	f7ff ff38 	bl	8000fb8 <__NVIC_EnableIRQ>
		return IIS2MDC_Ok;
 8001148:	2300      	movs	r3, #0
 800114a:	e014      	b.n	8001176 <IIS2MDC_ioctl+0x52>
		NVIC_DisableIRQ(IIS2MDC_IRQ_EXTI_IRQn);
 800114c:	2015      	movs	r0, #21
 800114e:	f7ff ff51 	bl	8000ff4 <__NVIC_DisableIRQ>
		return IIS2MDC_Ok;
 8001152:	2300      	movs	r3, #0
 8001154:	e00f      	b.n	8001176 <IIS2MDC_ioctl+0x52>
		PinStatus = HAL_GPIO_ReadPin(IIS2MDC_IRQ_GPIO_Port, IIS2MDC_IRQ_Pin);
 8001156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <IIS2MDC_ioctl+0x5c>)
 800115c:	f001 f8e6 	bl	800232c <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
		if(PinStatus == GPIO_PIN_SET){
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <IIS2MDC_ioctl+0x4a>
			return 1;
 800116a:	2301      	movs	r3, #1
 800116c:	e003      	b.n	8001176 <IIS2MDC_ioctl+0x52>
			return 0;
 800116e:	2300      	movs	r3, #0
 8001170:	e001      	b.n	8001176 <IIS2MDC_ioctl+0x52>
		break;
 8001172:	bf00      	nop

	}
	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	42020c00 	.word	0x42020c00

08001184 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <MX_GPIO_Init+0xc0>)
 800119c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_GPIO_Init+0xc0>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IIS2MDC_IRQ_Pin;
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_GPIO_Init+0xc4>)
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIS2MDC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <MX_GPIO_Init+0xc8>)
 8001228:	f000 fdca 	bl	8001dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2015      	movs	r0, #21
 8001232:	f000 fd90 	bl	8001d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001236:	2015      	movs	r0, #21
 8001238:	f000 fda7 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	46020c00 	.word	0x46020c00
 8001248:	10110000 	.word	0x10110000
 800124c:	42020c00 	.word	0x42020c00

08001250 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <MX_I2C2_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_I2C2_Init+0x74>)
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <MX_I2C2_Init+0x7c>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001268:	2201      	movs	r2, #1
 800126a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_I2C2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <MX_I2C2_Init+0x74>)
 800128c:	f001 f897 	bl	80023be <HAL_I2C_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001296:	f000 f9bf 	bl	8001618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <MX_I2C2_Init+0x74>)
 800129e:	f001 fdf1 	bl	8002e84 <HAL_I2CEx_ConfigAnalogFilter>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012a8:	f000 f9b6 	bl	8001618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_I2C2_Init+0x74>)
 80012b0:	f001 fe33 	bl	8002f1a <HAL_I2CEx_ConfigDigitalFilter>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 f9ad 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000a0 	.word	0x200000a0
 80012c8:	40005800 	.word	0x40005800
 80012cc:	30909dec 	.word	0x30909dec

080012d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0bc      	sub	sp, #240	; 0xf0
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	22c8      	movs	r2, #200	; 0xc8
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fb91 	bl	8007a18 <memset>
  if(i2cHandle->Instance==I2C2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_I2C_MspInit+0xc4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d144      	bne.n	800138a <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001300:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f9bb 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001320:	f000 f97a 	bl	8001618 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_I2C_MspInit+0xc8>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_I2C_MspInit+0xc8>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001330:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_I2C_MspInit+0xc8>)
 8001336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IIS2MDC_SCL_Pin|IIS2MDC_SCLH5_Pin;
 8001342:	2330      	movs	r3, #48	; 0x30
 8001344:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800135a:	2304      	movs	r3, #4
 800135c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001360:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <HAL_I2C_MspInit+0xcc>)
 8001368:	f000 fd2a 	bl	8001dc0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_I2C_MspInit+0xc8>)
 800136e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_I2C_MspInit+0xc8>)
 8001374:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001378:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_I2C_MspInit+0xc8>)
 800137e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	37f0      	adds	r7, #240	; 0xf0
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005800 	.word	0x40005800
 8001398:	46020c00 	.word	0x46020c00
 800139c:	42021c00 	.word	0x42021c00

080013a0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f001 fe05 	bl	8002fb4 <HAL_ICACHE_ConfigAssociativityMode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80013b0:	f000 f932 	bl	8001618 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80013b4:	f001 fe1e 	bl	8002ff4 <HAL_ICACHE_Enable>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80013be:	f000 f92b 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <__io_putchar>:
#include "stm32u5xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 80013d6:	f107 010f 	add.w	r1, r7, #15
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2201      	movs	r2, #1
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <__io_putchar+0x28>)
 80013e2:	f005 fdef 	bl	8006fc4 <HAL_UART_Transmit>
	return ch;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20001884 	.word	0x20001884

080013f4 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 80013f4:	b40e      	push	{r1, r2, r3}
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d00e      	beq.n	800142a <_log+0x36>
 800140c:	2b02      	cmp	r3, #2
 800140e:	dc10      	bgt.n	8001432 <_log+0x3e>
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <_log+0x26>
 8001414:	2b01      	cmp	r3, #1
 8001416:	d004      	beq.n	8001422 <_log+0x2e>
 8001418:	e00b      	b.n	8001432 <_log+0x3e>
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <_log+0x68>)
 800141c:	f006 fdfe 	bl	800801c <iprintf>
				break;
 8001420:	e00a      	b.n	8001438 <_log+0x44>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <_log+0x6c>)
 8001424:	f006 fdfa 	bl	800801c <iprintf>
				break;
 8001428:	e006      	b.n	8001438 <_log+0x44>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <_log+0x70>)
 800142c:	f006 fdf6 	bl	800801c <iprintf>
				break;
 8001430:	e002      	b.n	8001438 <_log+0x44>
		default:
			printf("Unknown Debug Subsystem: ");
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <_log+0x74>)
 8001434:	f006 fdf2 	bl	800801c <iprintf>
	}
	vfprintf(stdout, msg, args);
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <_log+0x78>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	69f9      	ldr	r1, [r7, #28]
 8001442:	4618      	mov	r0, r3
 8001444:	f006 fc4a 	bl	8007cdc <vfiprintf>
	printf("\n");
 8001448:	200a      	movs	r0, #10
 800144a:	f006 fdff 	bl	800804c <putchar>
	va_end(args);
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001458:	b003      	add	sp, #12
 800145a:	4770      	bx	lr
 800145c:	08008d04 	.word	0x08008d04
 8001460:	08008d1c 	.word	0x08008d1c
 8001464:	08008d38 	.word	0x08008d38
 8001468:	08008d54 	.word	0x08008d54
 800146c:	20000020 	.word	0x20000020

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 faeb 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f845 	bl	8001508 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800147e:	f000 f89d 	bl	80015bc <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 8001482:	f7ff ff8d 	bl	80013a0 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 8001486:	f000 fa05 	bl	8001894 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SensorInit();
 800148a:	f000 f89d 	bl	80015c8 <SensorInit>
  uint32_t stop_time = HAL_GetTick() + 5000;
 800148e:	f000 fb57 	bl	8001b40 <HAL_GetTick>
 8001492:	4603      	mov	r3, r0
 8001494:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001498:	3308      	adds	r3, #8
 800149a:	607b      	str	r3, [r7, #4]
  uint16_t samples = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	81fb      	strh	r3, [r7, #14]
  uint32_t profiler = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(HAL_GetTick() < stop_time){
 80014a4:	e01e      	b.n	80014e4 <main+0x74>
		  if(Sensor.DataReadyFlag == IIS2MDC_DataReady){
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <main+0x88>)
 80014a8:	7d1b      	ldrb	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d11a      	bne.n	80014e4 <main+0x74>
			  IIS2MDC_ReadMagnetic(&Sensor);
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <main+0x88>)
 80014b0:	f7ff fcda 	bl	8000e68 <IIS2MDC_ReadMagnetic>
			  MagXLog[samples] = Sensor.MagX;
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <main+0x88>)
 80014b8:	6992      	ldr	r2, [r2, #24]
 80014ba:	4910      	ldr	r1, [pc, #64]	; (80014fc <main+0x8c>)
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	601a      	str	r2, [r3, #0]
			  MagYLog[samples] = Sensor.MagY;
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <main+0x88>)
 80014c6:	69d2      	ldr	r2, [r2, #28]
 80014c8:	490d      	ldr	r1, [pc, #52]	; (8001500 <main+0x90>)
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	601a      	str	r2, [r3, #0]
			  MagZLog[samples] = Sensor.MagZ;
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <main+0x88>)
 80014d4:	6a12      	ldr	r2, [r2, #32]
 80014d6:	490b      	ldr	r1, [pc, #44]	; (8001504 <main+0x94>)
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	601a      	str	r2, [r3, #0]
			  samples++;
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	3301      	adds	r3, #1
 80014e2:	81fb      	strh	r3, [r7, #14]
	  while(HAL_GetTick() < stop_time){
 80014e4:	f000 fb2c 	bl	8001b40 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d8da      	bhi.n	80014a6 <main+0x36>
		  }
	  }
	  profiler++;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
	  while(HAL_GetTick() < stop_time){
 80014f6:	e7f5      	b.n	80014e4 <main+0x74>
 80014f8:	200000ec 	.word	0x200000ec
 80014fc:	20000110 	.word	0x20000110
 8001500:	200008e0 	.word	0x200008e0
 8001504:	200010b0 	.word	0x200010b0

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b09e      	sub	sp, #120	; 0x78
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2260      	movs	r2, #96	; 0x60
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fa7e 	bl	8007a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800152c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001530:	f001 fd70 	bl	8003014 <HAL_PWREx_ControlVoltageScaling>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800153a:	f000 f86d 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001548:	2310      	movs	r3, #16
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154c:	2302      	movs	r3, #2
 800154e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001550:	2302      	movs	r3, #2
 8001552:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800156c:	230c      	movs	r3, #12
 800156e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fddd 	bl	8003138 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001584:	f000 f848 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	231f      	movs	r3, #31
 800158a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2303      	movs	r3, #3
 800158e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	2104      	movs	r1, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fc9d 	bl	8003ee4 <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015b0:	f000 f832 	bl	8001618 <Error_Handler>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3778      	adds	r7, #120	; 0x78
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015c0:	f001 fdaa 	bl	8003118 <HAL_PWREx_DisableUCPDDeadBattery>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SensorInit>:

/* USER CODE BEGIN 4 */
void SensorInit(){
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b08e      	sub	sp, #56	; 0x38
 80015cc:	af08      	add	r7, sp, #32
	IIS2MDC_InitStruct_t InitSettings = {
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	2301      	movs	r3, #1
 80015de:	73bb      	strb	r3, [r7, #14]
 80015e0:	2301      	movs	r3, #1
 80015e2:	74fb      	strb	r3, [r7, #19]
 80015e4:	2301      	movs	r3, #1
 80015e6:	753b      	strb	r3, [r7, #20]
			.Offset_X = 0,
			.Offset_Y = 0,
			.Offset_Z = 0
	};

	IIS2MDC_Init(InitSettings, &Sensor, IIS2MDC_Hardware_Drv);
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <SensorInit+0x48>)
 80015ea:	ac02      	add	r4, sp, #8
 80015ec:	461d      	mov	r5, r3
 80015ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	6023      	str	r3, [r4, #0]
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <SensorInit+0x4c>)
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001602:	f7ff fafd 	bl	8000c00 <IIS2MDC_Init>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	bf00      	nop
 8001610:	20000000 	.word	0x20000000
 8001614:	200000ec 	.word	0x200000ec

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_MspInit+0x30>)
 800162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_MspInit+0x30>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_MspInit+0x30>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	46020c00 	.word	0x46020c00

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 fa38 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IIS2MDC_IRQ_Pin);
 80016b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016b4:	f000 fe52 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	Sensor.DataReadyFlag = IIS2MDC_DataReady;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	751a      	strb	r2, [r3, #20]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200000ec 	.word	0x200000ec

080016dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ee:	e000      	b.n	80016f2 <_read+0x16>
 80016f0:	bf00      	nop
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
	}

return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe49 	bl	80013c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
	}
	return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001776:	605a      	str	r2, [r3, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f006 f8ec 	bl	80079c4 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200c0000 	.word	0x200c0000
 8001818:	00000400 	.word	0x00000400
 800181c:	20001880 	.word	0x20001880
 8001820:	20001928 	.word	0x20001928

08001824 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <SystemInit+0x68>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <SystemInit+0x68>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <SystemInit+0x6c>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <SystemInit+0x6c>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <SystemInit+0x6c>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <SystemInit+0x6c>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <SystemInit+0x6c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <SystemInit+0x6c>)
 8001856:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800185a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800185e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <SystemInit+0x6c>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <SystemInit+0x6c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <SystemInit+0x6c>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <SystemInit+0x6c>)
 8001874:	2200      	movs	r2, #0
 8001876:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <SystemInit+0x68>)
 800187a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800187e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00
 8001890:	46020c00 	.word	0x46020c00

08001894 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MX_USART1_UART_Init+0x90>)
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_USART1_UART_Init+0x94>)
 800189c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018dc:	4811      	ldr	r0, [pc, #68]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018de:	f005 fb21 	bl	8006f24 <HAL_UART_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018e8:	f7ff fe96 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_USART1_UART_Init+0x90>)
 80018f0:	f005 ff9e 	bl	8007830 <HAL_UARTEx_SetTxFifoThreshold>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018fa:	f7ff fe8d 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <MX_USART1_UART_Init+0x90>)
 8001902:	f005 ffd3 	bl	80078ac <HAL_UARTEx_SetRxFifoThreshold>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800190c:	f7ff fe84 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_USART1_UART_Init+0x90>)
 8001912:	f005 ff54 	bl	80077be <HAL_UARTEx_DisableFifoMode>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800191c:	f7ff fe7c 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20001884 	.word	0x20001884
 8001928:	40013800 	.word	0x40013800

0800192c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0bc      	sub	sp, #240	; 0xf0
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	22c8      	movs	r2, #200	; 0xc8
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f006 f863 	bl	8007a18 <memset>
  if(uartHandle->Instance==USART1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_UART_MspInit+0xc4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d145      	bne.n	80019e8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800195c:	f04f 0201 	mov.w	r2, #1
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001968:	2300      	movs	r3, #0
 800196a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fe8d 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800197c:	f7ff fe4c 	bl	8001618 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_UART_MspInit+0xc8>)
 8001982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_UART_MspInit+0xc8>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0xc8>)
 8001992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0xc8>)
 80019a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_UART_MspInit+0xc8>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0xc8>)
 80019b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_RX_Pin|DEBUG_USART_TX_Pin;
 80019bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d6:	2307      	movs	r3, #7
 80019d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_UART_MspInit+0xcc>)
 80019e4:	f000 f9ec 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	37f0      	adds	r7, #240	; 0xf0
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013800 	.word	0x40013800
 80019f4:	46020c00 	.word	0x46020c00
 80019f8:	42020000 	.word	0x42020000

080019fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a02:	e003      	b.n	8001a0c <LoopCopyDataInit>

08001a04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a0a:	3104      	adds	r1, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a14:	d3f6      	bcc.n	8001a04 <CopyDataInit>
	ldr	r2, =_sbss
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a18:	e002      	b.n	8001a20 <LoopFillZerobss>

08001a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a1c:	f842 3b04 	str.w	r3, [r2], #4

08001a20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <LoopForever+0x16>)
	cmp	r2, r3
 8001a22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a24:	d3f9      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a26:	f7ff fefd 	bl	8001824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f005 ffd1 	bl	80079d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2e:	f7ff fd1f 	bl	8001470 <main>

08001a32 <LoopForever>:

LoopForever:
    b LoopForever
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a38:	08008f18 	.word	0x08008f18
	ldr	r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a40:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001a44:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001a48:	20001928 	.word	0x20001928

08001a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_Init+0x4c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_Init+0x4c>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f96d 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a66:	f002 fc2f 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_Init+0x50>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	490b      	ldr	r1, [pc, #44]	; (8001aa4 <HAL_Init+0x54>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_Init+0x58>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a80:	200f      	movs	r0, #15
 8001a82:	f000 f813 	bl	8001aac <HAL_InitTick>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e002      	b.n	8001a96 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fdc8 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	46020c00 	.word	0x46020c00
 8001aa4:	08008d70 	.word	0x08008d70
 8001aa8:	20000014 	.word	0x20000014

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_InitTick+0x60>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e021      	b.n	8001b04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_InitTick+0x64>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_InitTick+0x60>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f965 	bl	8001da6 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f92f 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x68>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000001c 	.word	0x2000001c
 8001b10:	20000014 	.word	0x20000014
 8001b14:	20000018 	.word	0x20000018

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000001c 	.word	0x2000001c
 8001b3c:	20001914 	.word	0x20001914

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20001914 	.word	0x20001914

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000001c 	.word	0x2000001c

08001ba0 <__NVIC_SetPriorityGrouping>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff29 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff40 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff90 	bl	8001c94 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5f 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff33 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa4 	bl	8001cfc <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dd2:	e1ba      	b.n	800214a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 81aa 	beq.w	8002144 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a55      	ldr	r2, [pc, #340]	; (8001f48 <HAL_GPIO_Init+0x188>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d15d      	bne.n	8001eb4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_GPIO_Init+0x18c>)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e30:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001e32:	4a46      	ldr	r2, [pc, #280]	; (8001f4c <HAL_GPIO_Init+0x18c>)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3208      	adds	r2, #8
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220b      	movs	r2, #11
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	69f9      	ldr	r1, [r7, #28]
 8001e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e067      	b.n	8001f84 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x104>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d145      	bne.n	8001f50 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69f9      	ldr	r1, [r7, #28]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e01e      	b.n	8001f84 <HAL_GPIO_Init+0x1c4>
 8001f46:	bf00      	nop
 8001f48:	46020000 	.word	0x46020000
 8001f4c:	08008dc8 	.word	0x08008dc8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e4>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f98:	2b11      	cmp	r3, #17
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b12      	cmp	r3, #18
 8001fa2:	d130      	bne.n	8002006 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 0201 	and.w	r2, r3, #1
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d017      	beq.n	800203e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	4013      	ands	r3, r2
 8002024:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	4313      	orrs	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d07c      	beq.n	8002144 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3318      	adds	r3, #24
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	4013      	ands	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0a9a      	lsrs	r2, r3, #10
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_GPIO_Init+0x3ac>)
 8002074:	4013      	ands	r3, r2
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	00d2      	lsls	r2, r2, #3
 800207e:	4093      	lsls	r3, r2
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	4313      	orrs	r3, r2
 8002084:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002086:	4938      	ldr	r1, [pc, #224]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3318      	adds	r3, #24
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002094:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80020b8:	4a2b      	ldr	r2, [pc, #172]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020e8:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 80020ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800210e:	4a16      	ldr	r2, [pc, #88]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 8002118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	4013      	ands	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_GPIO_Init+0x3a8>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f ae3d 	bne.w	8001dd4 <HAL_GPIO_Init+0x14>
  }
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	3724      	adds	r7, #36	; 0x24
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	46022000 	.word	0x46022000
 800216c:	002f7f7f 	.word	0x002f7f7f

08002170 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002182:	e0bc      	b.n	80022fe <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002184:	2201      	movs	r2, #1
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80ad 	beq.w	80022f8 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a5e      	ldr	r2, [pc, #376]	; (800231c <HAL_GPIO_DeInit+0x1ac>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d115      	bne.n	80021d2 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80021a6:	4a5e      	ldr	r2, [pc, #376]	; (8002320 <HAL_GPIO_DeInit+0x1b0>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80021ae:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80021b0:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_GPIO_DeInit+0x1b0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_GPIO_DeInit+0x1ac>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4954      	ldr	r1, [pc, #336]	; (800231c <HAL_GPIO_DeInit+0x1ac>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e053      	b.n	800227a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 80021d2:	4a54      	ldr	r2, [pc, #336]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3318      	adds	r3, #24
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0a9a      	lsrs	r2, r3, #10
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_GPIO_DeInit+0x1b8>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	00d2      	lsls	r2, r2, #3
 8002204:	4093      	lsls	r3, r2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d136      	bne.n	800227a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800220c:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 800220e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	4943      	ldr	r1, [pc, #268]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 8002218:	4013      	ands	r3, r2
 800221a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 8002220:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	493e      	ldr	r1, [pc, #248]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 800222a:	4013      	ands	r3, r2
 800222c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	493a      	ldr	r1, [pc, #232]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 800223a:	4013      	ands	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	4937      	ldr	r1, [pc, #220]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 8002248:	4013      	ands	r3, r2
 800224a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3318      	adds	r3, #24
 8002264:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43da      	mvns	r2, r3
 800226c:	482d      	ldr	r0, [pc, #180]	; (8002324 <HAL_GPIO_DeInit+0x1b4>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	400a      	ands	r2, r1
 8002274:	3318      	adds	r3, #24
 8002276:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2103      	movs	r1, #3
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	431a      	orrs	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3208      	adds	r2, #8
 8002296:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	08d2      	lsrs	r2, r2, #3
 80022ae:	4019      	ands	r1, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2103      	movs	r1, #3
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	401a      	ands	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	2101      	movs	r1, #1
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2103      	movs	r1, #3
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f af3c 	bne.w	8002184 <HAL_GPIO_DeInit+0x14>
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	46020000 	.word	0x46020000
 8002320:	08008dc8 	.word	0x08008dc8
 8002324:	46022000 	.word	0x46022000
 8002328:	002f7f7f 	.word	0x002f7f7f

0800232c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f99e 	bl	80016bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f807 	bl	80023a8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	46022000 	.word	0x46022000

080023a8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e081      	b.n	80024d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe ff73 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2224      	movs	r2, #36	; 0x24
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800240e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800241e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	e006      	b.n	8002446 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002444:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d104      	bne.n	8002458 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800247a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69d9      	ldr	r1, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	4608      	mov	r0, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	461a      	mov	r2, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	817b      	strh	r3, [r7, #10]
 80024ee:	460b      	mov	r3, r1
 80024f0:	813b      	strh	r3, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	f040 80f9 	bne.w	80026f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_I2C_Mem_Write+0x34>
 800250a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0ed      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_I2C_Mem_Write+0x4e>
 8002526:	2302      	movs	r3, #2
 8002528:	e0e6      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002532:	f7ff fb05 	bl	8001b40 <HAL_GetTick>
 8002536:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fac3 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0d1      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	; 0x21
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800257c:	88f8      	ldrh	r0, [r7, #6]
 800257e:	893a      	ldrh	r2, [r7, #8]
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4603      	mov	r3, r0
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f9d3 	bl	8002938 <I2C_RequestMemoryWrite>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0a9      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2bff      	cmp	r3, #255	; 0xff
 80025ac:	d90e      	bls.n	80025cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	22ff      	movs	r2, #255	; 0xff
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	8979      	ldrh	r1, [r7, #10]
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fc2b 	bl	8002e20 <I2C_TransferConfig>
 80025ca:	e00f      	b.n	80025ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fc1a 	bl	8002e20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 faad 	bl	8002b50 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e07b      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d034      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x1c8>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	2b00      	cmp	r3, #0
 8002640:	d130      	bne.n	80026a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	2200      	movs	r2, #0
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa3f 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e04d      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d90e      	bls.n	8002684 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	b2da      	uxtb	r2, r3
 8002672:	8979      	ldrh	r1, [r7, #10]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fbcf 	bl	8002e20 <I2C_TransferConfig>
 8002682:	e00f      	b.n	80026a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fbbe 	bl	8002e20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d19e      	bne.n	80025ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa8c 	bl	8002bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e01a      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2220      	movs	r2, #32
 80026c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_I2C_Mem_Write+0x224>)
 80026d6:	400b      	ands	r3, r1
 80026d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 80fd 	bne.w	8002926 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_I2C_Mem_Read+0x34>
 8002732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0f1      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Mem_Read+0x4e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0ea      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800275a:	f7ff f9f1 	bl	8001b40 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f9af 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d5      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2222      	movs	r2, #34	; 0x22
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a4:	88f8      	ldrh	r0, [r7, #6]
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4603      	mov	r3, r0
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f913 	bl	80029e0 <I2C_RequestMemoryRead>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0ad      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	4b52      	ldr	r3, [pc, #328]	; (8002930 <HAL_I2C_Mem_Read+0x22c>)
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb17 	bl	8002e20 <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_I2C_Mem_Read+0x22c>)
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb06 	bl	8002e20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2200      	movs	r2, #0
 800281c:	2104      	movs	r1, #4
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f956 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07c      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d034      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x1d0>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d130      	bne.n	80028d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f927 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04d      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	d90e      	bls.n	80028b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22ff      	movs	r2, #255	; 0xff
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fab7 	bl	8002e20 <I2C_TransferConfig>
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 faa6 	bl	8002e20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19a      	bne.n	8002814 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f974 	bl	8002bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01a      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2220      	movs	r2, #32
 80028f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_I2C_Mem_Read+0x230>)
 8002906:	400b      	ands	r3, r1
 8002908:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	80002400 	.word	0x80002400
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	460b      	mov	r3, r1
 800294c:	813b      	strh	r3, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <I2C_RequestMemoryWrite+0xa4>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fa5d 	bl	8002e20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	69b9      	ldr	r1, [r7, #24]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8f0 	bl	8002b50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e02c      	b.n	80029d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002980:	893b      	ldrh	r3, [r7, #8]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
 800298a:	e015      	b.n	80029b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	b29b      	uxth	r3, r3
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	69b9      	ldr	r1, [r7, #24]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f8d6 	bl	8002b50 <I2C_WaitOnTXISFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e012      	b.n	80029d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ae:	893b      	ldrh	r3, [r7, #8]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2200      	movs	r2, #0
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f884 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	80002000 	.word	0x80002000

080029e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <I2C_RequestMemoryRead+0xa4>)
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa0a 	bl	8002e20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f89d 	bl	8002b50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e02c      	b.n	8002a7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a26:	893b      	ldrh	r3, [r7, #8]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a30:	e015      	b.n	8002a5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a32:	893b      	ldrh	r3, [r7, #8]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f883 	bl	8002b50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e012      	b.n	8002a7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a54:	893b      	ldrh	r3, [r7, #8]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2140      	movs	r1, #64	; 0x40
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f831 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	80002000 	.word	0x80002000

08002a88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d103      	bne.n	8002aa6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d007      	beq.n	8002ac4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	619a      	str	r2, [r3, #24]
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae0:	e022      	b.n	8002b28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d01e      	beq.n	8002b28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7ff f829 	bl	8001b40 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d113      	bne.n	8002b28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00f      	b.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d0cd      	beq.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b5c:	e02c      	b.n	8002bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f870 	bl	8002c48 <I2C_IsErrorOccurred>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e02a      	b.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d01e      	beq.n	8002bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7fe ffe1 	bl	8001b40 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e007      	b.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d1cb      	bne.n	8002b5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bdc:	e028      	b.n	8002c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f830 	bl	8002c48 <I2C_IsErrorOccurred>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e026      	b.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7fe ffa5 	bl	8001b40 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d1cf      	bne.n	8002bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d075      	beq.n	8002d60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2210      	movs	r2, #16
 8002c7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c7c:	e056      	b.n	8002d2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d052      	beq.n	8002d2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe ff5b 	bl	8001b40 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_IsErrorOccurred+0x54>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d147      	bne.n	8002d2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbe:	d12e      	bne.n	8002d1e <I2C_IsErrorOccurred+0xd6>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc6:	d02a      	beq.n	8002d1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d027      	beq.n	8002d1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cde:	f7fe ff2f 	bl	8001b40 <HAL_GetTick>
 8002ce2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ce4:	e01b      	b.n	8002d1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ce6:	f7fe ff2b 	bl	8001b40 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b19      	cmp	r3, #25
 8002cf2:	d914      	bls.n	8002d1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d1dc      	bne.n	8002ce6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d003      	beq.n	8002d42 <I2C_IsErrorOccurred+0xfa>
 8002d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d09d      	beq.n	8002c7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01c      	beq.n	8002e10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff fe56 	bl	8002a88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <I2C_IsErrorOccurred+0x1d4>)
 8002de8:	400b      	ands	r3, r1
 8002dea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	fe00e800 	.word	0xfe00e800

08002e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e38:	7a7b      	ldrb	r3, [r7, #9]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	0d5b      	lsrs	r3, r3, #21
 8002e5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <I2C_TransferConfig+0x60>)
 8002e60:	430b      	orrs	r3, r1
 8002e62:	43db      	mvns	r3, r3
 8002e64:	ea02 0103 	and.w	r1, r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	03ff63ff 	.word	0x03ff63ff

08002e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d138      	bne.n	8002f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e032      	b.n	8002f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d139      	bne.n	8002fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e033      	b.n	8002fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2224      	movs	r2, #36	; 0x24
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e007      	b.n	8002fe2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0204 	bic.w	r2, r3, #4
 8002fda:	4905      	ldr	r1, [pc, #20]	; (8002ff0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40030400 	.word	0x40030400

08002ff4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_ICACHE_Enable+0x1c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_ICACHE_Enable+0x1c>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40030400 	.word	0x40030400

08003014 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003024:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	429a      	cmp	r2, r3
 800302c:	d101      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e057      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d90a      	bls.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4313      	orrs	r3, r2
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304c:	60d3      	str	r3, [r2, #12]
 800304e:	e007      	b.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003058:	4925      	ldr	r1, [pc, #148]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	2232      	movs	r2, #50	; 0x32
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800307e:	e002      	b.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3b01      	subs	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f3      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2232      	movs	r2, #50	; 0x32
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	3301      	adds	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80030bc:	e002      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f3      	bne.n	80030be <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e000      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	46020800 	.word	0x46020800
 80030f4:	20000014 	.word	0x20000014
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_PWREx_GetVoltageRange+0x18>)
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	46020800 	.word	0x46020800

08003118 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	46020800 	.word	0x46020800

08003138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08e      	sub	sp, #56	; 0x38
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f000 bec3 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003152:	4b9c      	ldr	r3, [pc, #624]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315c:	4b99      	ldr	r3, [pc, #612]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8172 	beq.w	8003458 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_RCC_OscConfig+0x52>
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2b0c      	cmp	r3, #12
 800317e:	f040 80e4 	bne.w	800334a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 80e0 	bne.w	800334a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800318a:	4b8e      	ldr	r3, [pc, #568]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d006      	beq.n	80031a4 <HAL_RCC_OscConfig+0x6c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f000 be9a 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a8:	4b86      	ldr	r3, [pc, #536]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_RCC_OscConfig+0x86>
 80031b4:	4b83      	ldr	r3, [pc, #524]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031bc:	e005      	b.n	80031ca <HAL_RCC_OscConfig+0x92>
 80031be:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80031c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d255      	bcs.n	800327a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f9d3 	bl	8004584 <RCC_SetFlashLatencyFromMSIRange>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f000 be77 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a75      	ldr	r2, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80031f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f4:	6093      	str	r3, [r2, #8]
 80031f6:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	4970      	ldr	r1, [pc, #448]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003210:	d309      	bcc.n	8003226 <HAL_RCC_OscConfig+0xee>
 8003212:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f023 021f 	bic.w	r2, r3, #31
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4969      	ldr	r1, [pc, #420]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
 8003224:	e07e      	b.n	8003324 <HAL_RCC_OscConfig+0x1ec>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b00      	cmp	r3, #0
 800322c:	da0a      	bge.n	8003244 <HAL_RCC_OscConfig+0x10c>
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	4961      	ldr	r1, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	60cb      	str	r3, [r1, #12]
 8003242:	e06f      	b.n	8003324 <HAL_RCC_OscConfig+0x1ec>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d30a      	bcc.n	8003264 <HAL_RCC_OscConfig+0x12c>
 800324e:	4b5d      	ldr	r3, [pc, #372]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4959      	ldr	r1, [pc, #356]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
 8003262:	e05f      	b.n	8003324 <HAL_RCC_OscConfig+0x1ec>
 8003264:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	03db      	lsls	r3, r3, #15
 8003272:	4954      	ldr	r1, [pc, #336]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
 8003278:	e054      	b.n	8003324 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800327a:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003284:	6093      	str	r3, [r2, #8]
 8003286:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	494c      	ldr	r1, [pc, #304]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80032a0:	d309      	bcc.n	80032b6 <HAL_RCC_OscConfig+0x17e>
 80032a2:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f023 021f 	bic.w	r2, r3, #31
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4945      	ldr	r1, [pc, #276]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
 80032b4:	e028      	b.n	8003308 <HAL_RCC_OscConfig+0x1d0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da0a      	bge.n	80032d4 <HAL_RCC_OscConfig+0x19c>
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	493d      	ldr	r1, [pc, #244]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]
 80032d2:	e019      	b.n	8003308 <HAL_RCC_OscConfig+0x1d0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d30a      	bcc.n	80032f4 <HAL_RCC_OscConfig+0x1bc>
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	029b      	lsls	r3, r3, #10
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
 80032f2:	e009      	b.n	8003308 <HAL_RCC_OscConfig+0x1d0>
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	03db      	lsls	r3, r3, #15
 8003302:	4930      	ldr	r1, [pc, #192]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f936 	bl	8004584 <RCC_SetFlashLatencyFromMSIRange>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f000 bdda 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003324:	f001 f8d8 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x290>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fbbd 	bl	8001aac <HAL_InitTick>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 808a 	beq.w	8003456 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003346:	f000 bdc7 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d066      	beq.n	8003420 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800335e:	f7fe fbef 	bl	8001b40 <HAL_GetTick>
 8003362:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003364:	e009      	b.n	800337a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003366:	f7fe fbeb 	bl	8001b40 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d902      	bls.n	800337a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	f000 bdaf 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ef      	beq.n	8003366 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 800338c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003390:	6093      	str	r3, [r2, #8]
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	4909      	ldr	r1, [pc, #36]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033ac:	d30e      	bcc.n	80033cc <HAL_RCC_OscConfig+0x294>
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 021f 	bic.w	r2, r3, #31
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4902      	ldr	r1, [pc, #8]	; (80033c4 <HAL_RCC_OscConfig+0x28c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
 80033c0:	e04a      	b.n	8003458 <HAL_RCC_OscConfig+0x320>
 80033c2:	bf00      	nop
 80033c4:	46020c00 	.word	0x46020c00
 80033c8:	20000018 	.word	0x20000018
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	da0a      	bge.n	80033ea <HAL_RCC_OscConfig+0x2b2>
 80033d4:	4b9b      	ldr	r3, [pc, #620]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	015b      	lsls	r3, r3, #5
 80033e2:	4998      	ldr	r1, [pc, #608]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
 80033e8:	e036      	b.n	8003458 <HAL_RCC_OscConfig+0x320>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d30a      	bcc.n	800340a <HAL_RCC_OscConfig+0x2d2>
 80033f4:	4b93      	ldr	r3, [pc, #588]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	4990      	ldr	r1, [pc, #576]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
 8003408:	e026      	b.n	8003458 <HAL_RCC_OscConfig+0x320>
 800340a:	4b8e      	ldr	r3, [pc, #568]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	03db      	lsls	r3, r3, #15
 8003418:	498a      	ldr	r1, [pc, #552]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	60cb      	str	r3, [r1, #12]
 800341e:	e01b      	b.n	8003458 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003420:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a87      	ldr	r2, [pc, #540]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800342c:	f7fe fb88 	bl	8001b40 <HAL_GetTick>
 8003430:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003432:	e009      	b.n	8003448 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003434:	f7fe fb84 	bl	8001b40 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d902      	bls.n	8003448 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	f000 bd48 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ef      	bne.n	8003434 <HAL_RCC_OscConfig+0x2fc>
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003456:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8094 	beq.w	800358e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	2b08      	cmp	r3, #8
 800346a:	d005      	beq.n	8003478 <HAL_RCC_OscConfig+0x340>
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d110      	bne.n	8003494 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	2b03      	cmp	r3, #3
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8083 	beq.w	800358c <HAL_RCC_OscConfig+0x454>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d17e      	bne.n	800358c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f000 bd22 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x374>
 800349e:	4b69      	ldr	r3, [pc, #420]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a68      	ldr	r2, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e041      	b.n	8003530 <HAL_RCC_OscConfig+0x3f8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b4:	d112      	bne.n	80034dc <HAL_RCC_OscConfig+0x3a4>
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a62      	ldr	r2, [pc, #392]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b60      	ldr	r3, [pc, #384]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5f      	ldr	r2, [pc, #380]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5c      	ldr	r2, [pc, #368]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e029      	b.n	8003530 <HAL_RCC_OscConfig+0x3f8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80034e4:	d112      	bne.n	800350c <HAL_RCC_OscConfig+0x3d4>
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a56      	ldr	r2, [pc, #344]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a53      	ldr	r2, [pc, #332]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80034f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e011      	b.n	8003530 <HAL_RCC_OscConfig+0x3f8>
 800350c:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4c      	ldr	r2, [pc, #304]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a49      	ldr	r2, [pc, #292]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a46      	ldr	r2, [pc, #280]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800352a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d014      	beq.n	8003562 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003538:	f7fe fb02 	bl	8001b40 <HAL_GetTick>
 800353c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	e009      	b.n	8003554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe fafe 	bl	8001b40 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d902      	bls.n	8003554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	f000 bcc2 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003554:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ef      	beq.n	8003540 <HAL_RCC_OscConfig+0x408>
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003562:	f7fe faed 	bl	8001b40 <HAL_GetTick>
 8003566:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003568:	e009      	b.n	800357e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356a:	f7fe fae9 	bl	8001b40 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d902      	bls.n	800357e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	f000 bcad 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ef      	bne.n	800356a <HAL_RCC_OscConfig+0x432>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d066      	beq.n	8003668 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2b04      	cmp	r3, #4
 800359e:	d005      	beq.n	80035ac <HAL_RCC_OscConfig+0x474>
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d11a      	bne.n	80035dc <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d117      	bne.n	80035dc <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_RCC_OscConfig+0x48e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f000 bc89 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	491b      	ldr	r1, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035da:	e045      	b.n	8003668 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d024      	beq.n	800362e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035f0:	f7fe faa6 	bl	8001b40 <HAL_GetTick>
 80035f4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f6:	e009      	b.n	800360c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe faa2 	bl	8001b40 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d902      	bls.n	800360c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	f000 bc66 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0ef      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	4907      	ldr	r1, [pc, #28]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]
 800362c:	e01c      	b.n	8003668 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_RCC_OscConfig+0x50c>)
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800363a:	f7fe fa81 	bl	8001b40 <HAL_GetTick>
 800363e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003640:	e00c      	b.n	800365c <HAL_RCC_OscConfig+0x524>
 8003642:	bf00      	nop
 8003644:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe fa7a 	bl	8001b40 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	f000 bc3e 	b.w	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800365c:	4baf      	ldr	r3, [pc, #700]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ef      	bne.n	8003648 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80c7 	beq.w	8003804 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367c:	4ba7      	ldr	r3, [pc, #668]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d111      	bne.n	80036ae <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4ba4      	ldr	r3, [pc, #656]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800368c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003690:	4aa2      	ldr	r2, [pc, #648]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800369a:	4ba0      	ldr	r3, [pc, #640]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800369c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036ae:	4b9c      	ldr	r3, [pc, #624]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80036ba:	4b99      	ldr	r3, [pc, #612]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	4a98      	ldr	r2, [pc, #608]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fa3b 	bl	8001b40 <HAL_GetTick>
 80036ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fe fa37 	bl	8001b40 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e3fb      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036e0:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05f      	beq.n	80037b4 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80036f4:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80036f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036fa:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	429a      	cmp	r2, r3
 8003708:	d037      	beq.n	800377a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e3da      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800372c:	4b7b      	ldr	r3, [pc, #492]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800372e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003732:	4a7a      	ldr	r2, [pc, #488]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003734:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003738:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800373c:	f7fe fa00 	bl	8001b40 <HAL_GetTick>
 8003740:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fe f9fc 	bl	8001b40 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e3c0      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003756:	4b71      	ldr	r3, [pc, #452]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ef      	bne.n	8003744 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003764:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800376a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	496a      	ldr	r1, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800377c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003780:	4a66      	ldr	r2, [pc, #408]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800378a:	f7fe f9d9 	bl	8001b40 <HAL_GetTick>
 800378e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe f9d5 	bl	8001b40 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e399      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037a4:	4b5d      	ldr	r3, [pc, #372]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80037a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ef      	beq.n	8003792 <HAL_RCC_OscConfig+0x65a>
 80037b2:	e01b      	b.n	80037ec <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80037b4:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80037b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80037bc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80037c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80037c4:	f7fe f9bc 	bl	8001b40 <HAL_GetTick>
 80037c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe f9b8 	bl	8001b40 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e37c      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80037e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ef      	bne.n	80037cc <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b49      	ldr	r3, [pc, #292]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	4a48      	ldr	r2, [pc, #288]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8112 	beq.w	8003a36 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800381a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d111      	bne.n	800384a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382c:	4a3b      	ldr	r2, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003836:	4b39      	ldr	r3, [pc, #228]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d118      	bne.n	8003888 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	4a31      	ldr	r2, [pc, #196]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003862:	f7fe f96d 	bl	8001b40 <HAL_GetTick>
 8003866:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386a:	f7fe f969 	bl	8001b40 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e32d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_OscConfig+0x7e8>)
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01f      	beq.n	80038d4 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a6:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b6:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038c0:	e018      	b.n	80038f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038c2:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ea:	4a0c      	ldr	r2, [pc, #48]	; (800391c <HAL_RCC_OscConfig+0x7e4>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d058      	beq.n	80039ae <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80038fc:	f7fe f920 	bl	8001b40 <HAL_GetTick>
 8003900:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	e00f      	b.n	8003924 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fe f91c 	bl	8001b40 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d906      	bls.n	8003924 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e2de      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
 800391a:	bf00      	nop
 800391c:	46020c00 	.word	0x46020c00
 8003920:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003924:	4b9c      	ldr	r3, [pc, #624]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0e8      	beq.n	8003904 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01b      	beq.n	8003976 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800393e:	4b96      	ldr	r3, [pc, #600]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003944:	4a94      	ldr	r2, [pc, #592]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe f8f6 	bl	8001b40 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e2b8      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003966:	4b8c      	ldr	r3, [pc, #560]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800396c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ed      	beq.n	8003950 <HAL_RCC_OscConfig+0x818>
 8003974:	e053      	b.n	8003a1e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003976:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800397c:	4a86      	ldr	r2, [pc, #536]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 800397e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003982:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fe f8da 	bl	8001b40 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e29c      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800399e:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 80039a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ed      	bne.n	8003988 <HAL_RCC_OscConfig+0x850>
 80039ac:	e037      	b.n	8003a1e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80039ae:	f7fe f8c7 	bl	8001b40 <HAL_GetTick>
 80039b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe f8c3 	bl	8001b40 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e285      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 80039ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ed      	bne.n	80039b6 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80039da:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 80039dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01a      	beq.n	8003a1e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039e8:	4b6b      	ldr	r3, [pc, #428]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 80039ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ee:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 80039f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fe f8a1 	bl	8001b40 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e263      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1ed      	bne.n	80039fa <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2c:	4a5a      	ldr	r2, [pc, #360]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a2e:	f023 0304 	bic.w	r3, r3, #4
 8003a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d019      	beq.n	8003a7e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003a4a:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a54:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a56:	f7fe f873 	bl	8001b40 <HAL_GetTick>
 8003a5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a5e:	f7fe f86f 	bl	8001b40 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e233      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a70:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x926>
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a45      	ldr	r2, [pc, #276]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a88:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a8a:	f7fe f859 	bl	8001b40 <HAL_GetTick>
 8003a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a92:	f7fe f855 	bl	8001b40 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e219      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d036      	beq.n	8003b2a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d019      	beq.n	8003af8 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a33      	ldr	r2, [pc, #204]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ace:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ad0:	f7fe f836 	bl	8001b40 <HAL_GetTick>
 8003ad4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ad8:	f7fe f832 	bl	8001b40 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1f6      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x9a0>
 8003af6:	e018      	b.n	8003b2a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003b04:	f7fe f81c 	bl	8001b40 <HAL_GetTick>
 8003b08:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003b0c:	f7fe f818 	bl	8001b40 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1dc      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d07f      	beq.n	8003c36 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d062      	beq.n	8003c04 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b48:	6093      	str	r3, [r2, #8]
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	4910      	ldr	r1, [pc, #64]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b64:	d309      	bcc.n	8003b7a <HAL_RCC_OscConfig+0xa42>
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f023 021f 	bic.w	r2, r3, #31
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4909      	ldr	r1, [pc, #36]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e02a      	b.n	8003bd0 <HAL_RCC_OscConfig+0xa98>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da0c      	bge.n	8003b9c <HAL_RCC_OscConfig+0xa64>
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	015b      	lsls	r3, r3, #5
 8003b90:	4901      	ldr	r1, [pc, #4]	; (8003b98 <HAL_RCC_OscConfig+0xa60>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60cb      	str	r3, [r1, #12]
 8003b96:	e01b      	b.n	8003bd0 <HAL_RCC_OscConfig+0xa98>
 8003b98:	46020c00 	.word	0x46020c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d30a      	bcc.n	8003bbc <HAL_RCC_OscConfig+0xa84>
 8003ba6:	4ba5      	ldr	r3, [pc, #660]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	029b      	lsls	r3, r3, #10
 8003bb4:	49a1      	ldr	r1, [pc, #644]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60cb      	str	r3, [r1, #12]
 8003bba:	e009      	b.n	8003bd0 <HAL_RCC_OscConfig+0xa98>
 8003bbc:	4b9f      	ldr	r3, [pc, #636]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	03db      	lsls	r3, r3, #15
 8003bca:	499c      	ldr	r1, [pc, #624]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003bd0:	4b9a      	ldr	r3, [pc, #616]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a99      	ldr	r2, [pc, #612]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003bd6:	f043 0310 	orr.w	r3, r3, #16
 8003bda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bdc:	f7fd ffb0 	bl	8001b40 <HAL_GetTick>
 8003be0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003be4:	f7fd ffac 	bl	8001b40 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e170      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003bf6:	4b91      	ldr	r3, [pc, #580]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xaac>
 8003c02:	e018      	b.n	8003c36 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003c04:	4b8d      	ldr	r3, [pc, #564]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a8c      	ldr	r2, [pc, #560]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c0a:	f023 0310 	bic.w	r3, r3, #16
 8003c0e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c10:	f7fd ff96 	bl	8001b40 <HAL_GetTick>
 8003c14:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003c18:	f7fd ff92 	bl	8001b40 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e156      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003c2a:	4b84      	ldr	r3, [pc, #528]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 814b 	beq.w	8003ed6 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c46:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	f000 80fa 	beq.w	8003e48 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	f040 80cc 	bne.w	8003df6 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b77      	ldr	r3, [pc, #476]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a76      	ldr	r2, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c6a:	f7fd ff69 	bl	8001b40 <HAL_GetTick>
 8003c6e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fd ff65 	bl	8001b40 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e129      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c84:	4b6d      	ldr	r3, [pc, #436]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c90:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d111      	bne.n	8003cc2 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	4b67      	ldr	r3, [pc, #412]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca4:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0xd08>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003cd6:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <HAL_RCC_OscConfig+0xd08>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4a59      	ldr	r2, [pc, #356]	; (8003e40 <HAL_RCC_OscConfig+0xd08>)
 8003cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003ce2:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0212      	lsls	r2, r2, #8
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d00:	430a      	orrs	r2, r1
 8003d02:	494e      	ldr	r1, [pc, #312]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	628b      	str	r3, [r1, #40]	; 0x28
 8003d08:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <HAL_RCC_OscConfig+0xd0c>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d14:	3a01      	subs	r2, #1
 8003d16:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	0252      	lsls	r2, r2, #9
 8003d22:	b292      	uxth	r2, r2
 8003d24:	4311      	orrs	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d2a:	3a01      	subs	r2, #1
 8003d2c:	0412      	lsls	r2, r2, #16
 8003d2e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0612      	lsls	r2, r2, #24
 8003d3c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003d40:	430a      	orrs	r2, r1
 8003d42:	493e      	ldr	r1, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d48:	4b3c      	ldr	r3, [pc, #240]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	4a3b      	ldr	r2, [pc, #236]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d4e:	f023 0310 	bic.w	r3, r3, #16
 8003d52:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d64:	00d2      	lsls	r2, r2, #3
 8003d66:	4935      	ldr	r1, [pc, #212]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d6c:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d72:	f043 0310 	orr.w	r3, r3, #16
 8003d76:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003d78:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	f023 020c 	bic.w	r2, r3, #12
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	492d      	ldr	r1, [pc, #180]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003d8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_OscConfig+0xd08>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <HAL_RCC_OscConfig+0xd08>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003d9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003da6:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dac:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003dae:	f023 0304 	bic.w	r3, r3, #4
 8003db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dce:	f7fd feb7 	bl	8001b40 <HAL_GetTick>
 8003dd2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fd feb3 	bl	8001b40 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e077      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0xc9e>
 8003df4:	e06f      	b.n	8003ed6 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e02:	f7fd fe9d 	bl	8001b40 <HAL_GetTick>
 8003e06:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fd fe99 	bl	8001b40 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e05d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	4a03      	ldr	r2, [pc, #12]	; (8003e3c <HAL_RCC_OscConfig+0xd04>)
 8003e2e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	6293      	str	r3, [r2, #40]	; 0x28
 8003e38:	e04d      	b.n	8003ed6 <HAL_RCC_OscConfig+0xd9e>
 8003e3a:	bf00      	nop
 8003e3c:	46020c00 	.word	0x46020c00
 8003e40:	46020800 	.word	0x46020800
 8003e44:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_RCC_OscConfig+0xda8>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCC_OscConfig+0xda8>)
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d03a      	beq.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d133      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d12a      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	0b1b      	lsrs	r3, r3, #12
 8003e80:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d122      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d11a      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	0a5b      	lsrs	r3, r3, #9
 8003ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d111      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d108      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	0e1b      	lsrs	r3, r3, #24
 8003ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3738      	adds	r7, #56	; 0x38
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	46020c00 	.word	0x46020c00

08003ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e1d9      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b9b      	ldr	r3, [pc, #620]	; (8004168 <HAL_RCC_ClockConfig+0x284>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d910      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b98      	ldr	r3, [pc, #608]	; (8004168 <HAL_RCC_ClockConfig+0x284>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 020f 	bic.w	r2, r3, #15
 8003f0e:	4996      	ldr	r1, [pc, #600]	; (8004168 <HAL_RCC_ClockConfig+0x284>)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b94      	ldr	r3, [pc, #592]	; (8004168 <HAL_RCC_ClockConfig+0x284>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e1c1      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	4b8c      	ldr	r3, [pc, #560]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d908      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003f44:	4b89      	ldr	r3, [pc, #548]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	4986      	ldr	r1, [pc, #536]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	4b81      	ldr	r3, [pc, #516]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d909      	bls.n	8003f88 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003f74:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	497a      	ldr	r1, [pc, #488]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	4b74      	ldr	r3, [pc, #464]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d908      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b71      	ldr	r3, [pc, #452]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	496e      	ldr	r1, [pc, #440]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	4b69      	ldr	r3, [pc, #420]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d908      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003fd2:	4b66      	ldr	r3, [pc, #408]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 020f 	bic.w	r2, r3, #15
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4963      	ldr	r1, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80d2 	beq.w	8004196 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d143      	bne.n	8004086 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d110      	bne.n	800402e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b57      	ldr	r3, [pc, #348]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	4a56      	ldr	r2, [pc, #344]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800401c:	4b53      	ldr	r3, [pc, #332]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800402e:	f7fd fd87 	bl	8001b40 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004034:	4b4e      	ldr	r3, [pc, #312]	; (8004170 <HAL_RCC_ClockConfig+0x28c>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00f      	beq.n	8004060 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004042:	f7fd fd7d 	bl	8001b40 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e12b      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004054:	4b46      	ldr	r3, [pc, #280]	; (8004170 <HAL_RCC_ClockConfig+0x28c>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	4a3f      	ldr	r2, [pc, #252]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 800406e:	f023 0304 	bic.w	r3, r3, #4
 8004072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004076:	4b3d      	ldr	r3, [pc, #244]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d121      	bne.n	80040c6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e112      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408e:	4b37      	ldr	r3, [pc, #220]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e106      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0fa      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0f2      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4926      	ldr	r1, [pc, #152]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80040d8:	f7fd fd32 	bl	8001b40 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d112      	bne.n	800410c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e8:	f7fd fd2a 	bl	8001b40 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0d6      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d1ee      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x204>
 800410a:	e044      	b.n	8004196 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d112      	bne.n	800413a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004114:	e00a      	b.n	800412c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	f7fd fd13 	bl	8001b40 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0bf      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_ClockConfig+0x232>
 8004138:	e02d      	b.n	8004196 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d123      	bne.n	800418a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fd fcfc 	bl	8001b40 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0a8      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ee      	bne.n	8004144 <HAL_RCC_ClockConfig+0x260>
 8004166:	e016      	b.n	8004196 <HAL_RCC_ClockConfig+0x2b2>
 8004168:	40022000 	.word	0x40022000
 800416c:	46020c00 	.word	0x46020c00
 8004170:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004174:	f7fd fce4 	bl	8001b40 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e090      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b04      	cmp	r3, #4
 8004194:	d1ee      	bne.n	8004174 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d208      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80041b2:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	493d      	ldr	r1, [pc, #244]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b3c      	ldr	r3, [pc, #240]	; (80042b8 <HAL_RCC_ClockConfig+0x3d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d210      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_RCC_ClockConfig+0x3d4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_RCC_ClockConfig+0x3d4>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <HAL_RCC_ClockConfig+0x3d4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e05b      	b.n	80042ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d010      	beq.n	8004222 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800420c:	429a      	cmp	r2, r3
 800420e:	d208      	bcs.n	8004222 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4925      	ldr	r1, [pc, #148]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 800421e:	4313      	orrs	r3, r2
 8004220:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d012      	beq.n	8004254 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800423c:	429a      	cmp	r2, r3
 800423e:	d209      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004240:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	4919      	ldr	r1, [pc, #100]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800426c:	429a      	cmp	r2, r3
 800426e:	d208      	bcs.n	8004282 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004270:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	490d      	ldr	r1, [pc, #52]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004282:	f000 f821 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_ClockConfig+0x3d0>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	490a      	ldr	r1, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x3d8>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x3dc>)
 800429a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x3e0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fc03 	bl	8001aac <HAL_InitTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	46020c00 	.word	0x46020c00
 80042b8:	40022000 	.word	0x40022000
 80042bc:	08008d70 	.word	0x08008d70
 80042c0:	20000014 	.word	0x20000014
 80042c4:	20000018 	.word	0x20000018

080042c8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b08b      	sub	sp, #44	; 0x2c
 80042cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b7b      	ldr	r3, [pc, #492]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x34>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d121      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d11e      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80042fc:	4b71      	ldr	r3, [pc, #452]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004308:	4b6e      	ldr	r3, [pc, #440]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800430a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800430e:	0b1b      	lsrs	r3, r3, #12
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	e005      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004318:	4b6a      	ldr	r3, [pc, #424]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	0f1b      	lsrs	r3, r3, #28
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004324:	4a68      	ldr	r2, [pc, #416]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d110      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004338:	e00d      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800433a:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b04      	cmp	r3, #4
 8004344:	d102      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004346:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCC_GetSysClockFreq+0x204>)
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	e004      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b08      	cmp	r3, #8
 8004350:	d101      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004352:	4b5e      	ldr	r3, [pc, #376]	; (80044cc <HAL_RCC_GetSysClockFreq+0x204>)
 8004354:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	f040 80ac 	bne.w	80044b6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800435e:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004368:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004376:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004382:	4b50      	ldr	r3, [pc, #320]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8086 	beq.w	80044b2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d003      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0xec>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d022      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x130>
 80043b2:	e043      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eddf 6a44 	vldr	s13, [pc, #272]	; 80044d0 <HAL_RCC_GetSysClockFreq+0x208>
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80043d6:	ed97 6a01 	vldr	s12, [r7, #4]
 80043da:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80044d4 <HAL_RCC_GetSysClockFreq+0x20c>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80043f6:	e046      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	eddf 6a33 	vldr	s13, [pc, #204]	; 80044d0 <HAL_RCC_GetSysClockFreq+0x208>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800441a:	ed97 6a01 	vldr	s12, [r7, #4]
 800441e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80044d4 <HAL_RCC_GetSysClockFreq+0x20c>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800443a:	e024      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004464:	ed97 6a01 	vldr	s12, [r7, #4]
 8004468:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80044d4 <HAL_RCC_GetSysClockFreq+0x20c>
 800446c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004470:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004478:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800447c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004480:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004484:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	0e1b      	lsrs	r3, r3, #24
 800448c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004490:	3301      	adds	r3, #1
 8004492:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800449e:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044aa:	ee17 3a90 	vmov	r3, s15
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	e001      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80044b6:	6a3b      	ldr	r3, [r7, #32]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	372c      	adds	r7, #44	; 0x2c
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	46020c00 	.word	0x46020c00
 80044c8:	08008d88 	.word	0x08008d88
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	4b742400 	.word	0x4b742400
 80044d4:	46000000 	.word	0x46000000

080044d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80044dc:	f7ff fef4 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCC_GetHCLKFreq+0x28>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	4906      	ldr	r1, [pc, #24]	; (8004504 <HAL_RCC_GetHCLKFreq+0x2c>)
 80044ec:	5ccb      	ldrb	r3, [r1, r3]
 80044ee:	fa22 f303 	lsr.w	r3, r2, r3
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <HAL_RCC_GetHCLKFreq+0x30>)
 80044f4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_RCC_GetHCLKFreq+0x30>)
 80044f8:	681b      	ldr	r3, [r3, #0]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	46020c00 	.word	0x46020c00
 8004504:	08008d70 	.word	0x08008d70
 8004508:	20000014 	.word	0x20000014

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004510:	f7ff ffe2 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	46020c00 	.word	0x46020c00
 8004530:	08008d80 	.word	0x08008d80

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004538:	f7ff ffce 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	46020c00 	.word	0x46020c00
 8004558:	08008d80 	.word	0x08008d80

0800455c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004560:	f7ff ffba 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	46020c00 	.word	0x46020c00
 8004580:	08008d80 	.word	0x08008d80

08004584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800458c:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800458e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800459a:	f7fe fdaf 	bl	80030fc <HAL_PWREx_GetVoltageRange>
 800459e:	6178      	str	r0, [r7, #20]
 80045a0:	e019      	b.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80045a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a8:	4a37      	ldr	r2, [pc, #220]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80045b2:	4b35      	ldr	r3, [pc, #212]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80045b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045c0:	f7fe fd9c 	bl	80030fc <HAL_PWREx_GetVoltageRange>
 80045c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045cc:	4a2e      	ldr	r2, [pc, #184]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80045ce:	f023 0304 	bic.w	r3, r3, #4
 80045d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045dc:	d003      	beq.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045e4:	d109      	bne.n	80045fa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ec:	d202      	bcs.n	80045f4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80045ee:	2301      	movs	r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80045f2:	e033      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80045f8:	e030      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004600:	d208      	bcs.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d102      	bne.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800460a:	2303      	movs	r3, #3
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e025      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e035      	b.n	8004680 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461a:	d90f      	bls.n	800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004628:	d902      	bls.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	e015      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004630:	2301      	movs	r3, #1
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	e012      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e00f      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004642:	d109      	bne.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d102      	bne.n	8004652 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800464c:	2301      	movs	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	e004      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004652:	2302      	movs	r3, #2
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e001      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004658:	2301      	movs	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 020f 	bic.w	r2, r3, #15
 8004664:	4909      	ldr	r1, [pc, #36]	; (800468c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	46020c00 	.word	0x46020c00
 800468c:	40022000 	.word	0x40022000

08004690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004694:	b0ba      	sub	sp, #232	; 0xe8
 8004696:	af00      	add	r7, sp, #0
 8004698:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800469c:	2300      	movs	r3, #0
 800469e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f002 0401 	and.w	r4, r2, #1
 80046b4:	2500      	movs	r5, #0
 80046b6:	ea54 0305 	orrs.w	r3, r4, r5
 80046ba:	d00b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80046bc:	4bcb      	ldr	r3, [pc, #812]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c2:	f023 0103 	bic.w	r1, r3, #3
 80046c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046cc:	4ac7      	ldr	r2, [pc, #796]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	430b      	orrs	r3, r1
 80046d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 0802 	and.w	r8, r2, #2
 80046e0:	f04f 0900 	mov.w	r9, #0
 80046e4:	ea58 0309 	orrs.w	r3, r8, r9
 80046e8:	d00b      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80046ea:	4bc0      	ldr	r3, [pc, #768]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f0:	f023 010c 	bic.w	r1, r3, #12
 80046f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	4abc      	ldr	r2, [pc, #752]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f002 0a04 	and.w	sl, r2, #4
 800470e:	f04f 0b00 	mov.w	fp, #0
 8004712:	ea5a 030b 	orrs.w	r3, sl, fp
 8004716:	d00b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004718:	4bb4      	ldr	r3, [pc, #720]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4ab0      	ldr	r2, [pc, #704]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800472a:	430b      	orrs	r3, r1
 800472c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f002 0308 	and.w	r3, r2, #8
 800473c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004740:	2300      	movs	r3, #0
 8004742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004746:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d00b      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004750:	4ba6      	ldr	r3, [pc, #664]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800475a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	4aa2      	ldr	r2, [pc, #648]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004762:	430b      	orrs	r3, r1
 8004764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f002 0310 	and.w	r3, r2, #16
 8004774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800477e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d00b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004788:	4b98      	ldr	r3, [pc, #608]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800478e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	4a94      	ldr	r2, [pc, #592]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479a:	430b      	orrs	r3, r1
 800479c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 0320 	and.w	r3, r2, #32
 80047ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d00b      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80047c0:	4b8a      	ldr	r3, [pc, #552]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047c6:	f023 0107 	bic.w	r1, r3, #7
 80047ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d0:	4a86      	ldr	r2, [pc, #536]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4313      	orrs	r3, r2
 80047f6:	d00b      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80047f8:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047fe:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004808:	4a78      	ldr	r2, [pc, #480]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480a:	430b      	orrs	r3, r1
 800480c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800481c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004826:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	d00b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004830:	4b6e      	ldr	r3, [pc, #440]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004840:	4a6a      	ldr	r2, [pc, #424]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004842:	430b      	orrs	r3, r1
 8004844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004858:	2300      	movs	r3, #0
 800485a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800485e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004862:	460b      	mov	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	d00b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004868:	4b60      	ldr	r3, [pc, #384]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800486e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a5c      	ldr	r2, [pc, #368]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487a:	430b      	orrs	r3, r1
 800487c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800488c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004896:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d00b      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80048a0:	4b52      	ldr	r3, [pc, #328]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048a6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80048aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	4a4e      	ldr	r2, [pc, #312]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80048c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80048d8:	4b44      	ldr	r3, [pc, #272]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048de:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80048e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e8:	4a40      	ldr	r2, [pc, #256]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004900:	2300      	movs	r3, #0
 8004902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004906:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004916:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800491a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004920:	4a32      	ldr	r2, [pc, #200]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	430b      	orrs	r3, r1
 8004924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800493e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d00c      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800494e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495a:	4a24      	ldr	r2, [pc, #144]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495c:	430b      	orrs	r3, r1
 800495e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800496e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004970:	2300      	movs	r3, #0
 8004972:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004974:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d04f      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800497e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	2b80      	cmp	r3, #128	; 0x80
 8004988:	d02d      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d827      	bhi.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800498e:	2b60      	cmp	r3, #96	; 0x60
 8004990:	d02e      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004992:	2b60      	cmp	r3, #96	; 0x60
 8004994:	d823      	bhi.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d006      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d81f      	bhi.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80049a6:	e01a      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80049b4:	e01d      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ba:	3308      	adds	r3, #8
 80049bc:	4618      	mov	r0, r3
 80049be:	f002 f981 	bl	8006cc4 <RCCEx_PLL2_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80049c8:	e013      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ce:	332c      	adds	r3, #44	; 0x2c
 80049d0:	4618      	mov	r0, r3
 80049d2:	f002 fa0f 	bl	8006df4 <RCCEx_PLL3_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80049dc:	e009      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80049e4:	e005      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80049e6:	bf00      	nop
 80049e8:	e003      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80049ea:	bf00      	nop
 80049ec:	46020c00 	.word	0x46020c00
        break;
 80049f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80049fa:	4bb6      	ldr	r3, [pc, #728]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80049fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a00:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004a04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	4ab1      	ldr	r2, [pc, #708]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a14:	e003      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a1a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004a30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d053      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a46:	d033      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	d82c      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a52:	d02f      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a58:	d826      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a64:	d820      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6e:	d011      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a70:	e01a      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a72:	4b98      	ldr	r3, [pc, #608]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	4a97      	ldr	r2, [pc, #604]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004a7e:	e01a      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a84:	3308      	adds	r3, #8
 8004a86:	4618      	mov	r0, r3
 8004a88:	f002 f91c 	bl	8006cc4 <RCCEx_PLL2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004a92:	e010      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a98:	332c      	adds	r3, #44	; 0x2c
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f002 f9aa 	bl	8006df4 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004aa6:	e006      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004abe:	4b85      	ldr	r3, [pc, #532]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ac4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad0:	4a80      	ldr	r2, [pc, #512]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004ad8:	e003      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ade:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af0:	2300      	movs	r3, #0
 8004af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d046      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004b0a:	d028      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004b0c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004b10:	d821      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b16:	d022      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1c:	d81b      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b22:	d01c      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b28:	d815      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b34:	d80f      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d00e      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004b40:	e009      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b46:	3308      	adds	r3, #8
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 f8bb 	bl	8006cc4 <RCCEx_PLL2_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10d      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004b68:	4b5a      	ldr	r3, [pc, #360]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b6e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b7a:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b88:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b98:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b9e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	d03f      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d81e      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004bdf 	.word	0x08004bdf
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bd0:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bda:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004bdc:	e00e      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004be2:	332c      	adds	r3, #44	; 0x2c
 8004be4:	4618      	mov	r0, r3
 8004be6:	f002 f905 	bl	8006df4 <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004bf0:	e004      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004bf8:	e000      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004bfa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004bfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004c04:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c0a:	f023 0107 	bic.w	r1, r3, #7
 8004c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c1e:	e003      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c36:	2300      	movs	r3, #0
 8004c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d04d      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c50:	d028      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c56:	d821      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c5c:	d024      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004c5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c62:	d81b      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c68:	d00e      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c6e:	d815      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d110      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c7a:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004c86:	e012      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c8c:	332c      	adds	r3, #44	; 0x2c
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f002 f8b0 	bl	8006df4 <RCCEx_PLL3_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c9a:	e008      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ca2:	e004      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004cac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004cae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d110      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc8:	4a02      	ldr	r2, [pc, #8]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004cd2:	bf00      	nop
 8004cd4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cdc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004cec:	653b      	str	r3, [r7, #80]	; 0x50
 8004cee:	2300      	movs	r3, #0
 8004cf0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f000 80b5 	beq.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d04:	4b9d      	ldr	r3, [pc, #628]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d113      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	4b9a      	ldr	r3, [pc, #616]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d18:	4a98      	ldr	r2, [pc, #608]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d1a:	f043 0304 	orr.w	r3, r3, #4
 8004d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004d22:	4b96      	ldr	r3, [pc, #600]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004d3a:	4b91      	ldr	r3, [pc, #580]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	4a90      	ldr	r2, [pc, #576]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d46:	f7fc fefb 	bl	8001b40 <HAL_GetTick>
 8004d4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d50:	f7fc fef6 	bl	8001b40 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d903      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d66:	e005      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d68:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ed      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004d74:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d165      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d7c:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d023      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01b      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da2:	4b76      	ldr	r3, [pc, #472]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db0:	4b72      	ldr	r3, [pc, #456]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004db6:	4a71      	ldr	r2, [pc, #452]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc0:	4b6e      	ldr	r3, [pc, #440]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dc6:	4a6d      	ldr	r2, [pc, #436]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd0:	4a6a      	ldr	r2, [pc, #424]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d019      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fc feab 	bl	8001b40 <HAL_GetTick>
 8004dea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	e00d      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fc fea6 	bl	8001b40 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d903      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004e0a:	e006      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0c:	4b5b      	ldr	r3, [pc, #364]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0ea      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004e1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10d      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e34:	4a51      	ldr	r2, [pc, #324]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e3c:	e008      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e42:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e4c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e50:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	4a47      	ldr	r2, [pc, #284]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e76:	2300      	movs	r3, #0
 8004e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d042      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004e84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e90:	d022      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004e92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e96:	d81b      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9c:	d011      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8004e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea2:	d815      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d019      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eac:	d110      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 ff05 	bl	8006cc4 <RCCEx_PLL2_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ec0:	e00d      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	4a2d      	ldr	r2, [pc, #180]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ecc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004ece:	e006      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ed6:	e002      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004ed8:	bf00      	nop
 8004eda:	e000      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004edc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ede:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004ee6:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eec:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ef8:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f06:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f16:	643b      	str	r3, [r7, #64]	; 0x40
 8004f18:	2300      	movs	r3, #0
 8004f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d032      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f32:	d00b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d804      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d007      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004f4a:	e004      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004f4c:	bf00      	nop
 8004f4e:	e002      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004f54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f56:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f70:	4a02      	ldr	r2, [pc, #8]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f72:	430b      	orrs	r3, r1
 8004f74:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004f7a:	bf00      	nop
 8004f7c:	46020c00 	.word	0x46020c00
 8004f80:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f88:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d00c      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004fa8:	4b98      	ldr	r3, [pc, #608]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004faa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fae:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fba:	4a94      	ldr	r2, [pc, #592]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004fce:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	d019      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fec:	4b87      	ldr	r3, [pc, #540]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	4a86      	ldr	r2, [pc, #536]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004ff8:	4b84      	ldr	r3, [pc, #528]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ffa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ffe:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800500a:	4a80      	ldr	r2, [pc, #512]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800500c:	430b      	orrs	r3, r1
 800500e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005024:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d00c      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800503c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005040:	4972      	ldr	r1, [pc, #456]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	2300      	movs	r3, #0
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
 800505a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d00c      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005064:	4b69      	ldr	r3, [pc, #420]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800506a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005072:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005076:	4965      	ldr	r1, [pc, #404]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800507e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d00c      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800509a:	4b5c      	ldr	r3, [pc, #368]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800509c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050a0:	f023 0218 	bic.w	r2, r3, #24
 80050a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050ac:	4957      	ldr	r1, [pc, #348]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050ca:	460b      	mov	r3, r1
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d032      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80050d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050dc:	d105      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050de:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	4a4a      	ldr	r2, [pc, #296]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80050e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80050ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050f6:	d108      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050fc:	3308      	adds	r3, #8
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fde0 	bl	8006cc4 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800510a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10d      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005112:	4b3e      	ldr	r3, [pc, #248]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005114:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005124:	4939      	ldr	r1, [pc, #228]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800512c:	e003      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005132:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800514c:	460b      	mov	r3, r1
 800514e:	4313      	orrs	r3, r2
 8005150:	d03a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800515e:	d00e      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005164:	d815      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800516a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800516e:	d110      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	4a25      	ldr	r2, [pc, #148]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800517c:	e00e      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800517e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005182:	3308      	adds	r3, #8
 8005184:	4618      	mov	r0, r3
 8005186:	f001 fd9d 	bl	8006cc4 <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005198:	e000      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800519a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800519c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10d      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b6:	4915      	ldr	r1, [pc, #84]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80051c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80051c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051de:	460b      	mov	r3, r1
 80051e0:	4313      	orrs	r3, r2
 80051e2:	d00c      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051f6:	4905      	ldr	r1, [pc, #20]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80051fe:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005202:	4618      	mov	r0, r3
 8005204:	37e8      	adds	r7, #232	; 0xe8
 8005206:	46bd      	mov	sp, r7
 8005208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520c:	46020c00 	.word	0x46020c00

08005210 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	; 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005218:	4bac      	ldr	r3, [pc, #688]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005220:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005222:	4baa      	ldr	r3, [pc, #680]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800522c:	4ba7      	ldr	r3, [pc, #668]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	3301      	adds	r3, #1
 8005238:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800523a:	4ba4      	ldr	r3, [pc, #656]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005244:	4ba1      	ldr	r3, [pc, #644]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	08db      	lsrs	r3, r3, #3
 800524a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8123 	beq.w	80054ae <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d062      	beq.n	8005334 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b03      	cmp	r3, #3
 8005272:	f200 8081 	bhi.w	8005378 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d024      	beq.n	80052c6 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d17a      	bne.n	8005378 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80054d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005294:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	ee07 3a90 	vmov	s15, r3
 80052a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80054d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80052ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052c4:	e08f      	b.n	80053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80052c6:	4b81      	ldr	r3, [pc, #516]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80052d2:	4b7e      	ldr	r3, [pc, #504]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0f1b      	lsrs	r3, r3, #28
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	e006      	b.n	80052ec <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80052de:	4b7b      	ldr	r3, [pc, #492]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80052e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	0f1b      	lsrs	r3, r3, #28
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	4a7a      	ldr	r2, [pc, #488]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a02 	vldr	s12, [r7, #8]
 8005316:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80054d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005332:	e058      	b.n	80053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80054d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b61      	ldr	r3, [pc, #388]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005356:	ed97 6a02 	vldr	s12, [r7, #8]
 800535a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80054d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005376:	e036      	b.n	80053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005378:	4b54      	ldr	r3, [pc, #336]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005384:	4b51      	ldr	r3, [pc, #324]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	0f1b      	lsrs	r3, r3, #28
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	e006      	b.n	800539e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005390:	4b4e      	ldr	r3, [pc, #312]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	0f1b      	lsrs	r3, r3, #28
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80053a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80053c8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80054d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80053cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80053dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053e4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80053e6:	4b39      	ldr	r3, [pc, #228]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d017      	beq.n	8005422 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053f2:	4b36      	ldr	r3, [pc, #216]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80053f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f6:	0a5b      	lsrs	r3, r3, #9
 80053f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005408:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800540c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005418:	ee17 2a90 	vmov	r2, s15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005428:	4b28      	ldr	r3, [pc, #160]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d017      	beq.n	8005464 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800544a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800544e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545a:	ee17 2a90 	vmov	r2, s15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e002      	b.n	800546a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800546a:	4b18      	ldr	r3, [pc, #96]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d017      	beq.n	80054a6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	0e1b      	lsrs	r3, r3, #24
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005490:	edd7 6a07 	vldr	s13, [r7, #28]
 8005494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549c:	ee17 2a90 	vmov	r2, s15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054a4:	e00c      	b.n	80054c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	e008      	b.n	80054c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	3724      	adds	r7, #36	; 0x24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	46020c00 	.word	0x46020c00
 80054d0:	4b742400 	.word	0x4b742400
 80054d4:	46000000 	.word	0x46000000
 80054d8:	08008d88 	.word	0x08008d88

080054dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	; 0x24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80054e4:	4bac      	ldr	r3, [pc, #688]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ec:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80054ee:	4baa      	ldr	r3, [pc, #680]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80054f8:	4ba7      	ldr	r3, [pc, #668]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	3301      	adds	r3, #1
 8005504:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005506:	4ba4      	ldr	r3, [pc, #656]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005510:	4ba1      	ldr	r3, [pc, #644]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	ee07 3a90 	vmov	s15, r3
 8005524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005528:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8123 	beq.w	800577a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d062      	beq.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b03      	cmp	r3, #3
 800553e:	f200 8081 	bhi.w	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d024      	beq.n	8005592 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d17a      	bne.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005558:	eddf 6a90 	vldr	s13, [pc, #576]	; 800579c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800555c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005560:	4b8d      	ldr	r3, [pc, #564]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005570:	ed97 6a02 	vldr	s12, [r7, #8]
 8005574:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005578:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800557c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005584:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005590:	e08f      	b.n	80056b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005592:	4b81      	ldr	r3, [pc, #516]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800559e:	4b7e      	ldr	r3, [pc, #504]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0f1b      	lsrs	r3, r3, #28
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80055aa:	4b7b      	ldr	r3, [pc, #492]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80055ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055b0:	041b      	lsls	r3, r3, #16
 80055b2:	0f1b      	lsrs	r3, r3, #28
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	4a7a      	ldr	r2, [pc, #488]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80055ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fe:	e058      	b.n	80056b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800579c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005622:	ed97 6a02 	vldr	s12, [r7, #8]
 8005626:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005642:	e036      	b.n	80056b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005644:	4b54      	ldr	r3, [pc, #336]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005650:	4b51      	ldr	r3, [pc, #324]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	0f1b      	lsrs	r3, r3, #28
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	e006      	b.n	800566a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800565c:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800565e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	0f1b      	lsrs	r3, r3, #28
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	4a4e      	ldr	r2, [pc, #312]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005690:	ed97 6a02 	vldr	s12, [r7, #8]
 8005694:	eddf 5a42 	vldr	s11, [pc, #264]	; 80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80056a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056b0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80056b2:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	0a5b      	lsrs	r3, r3, #9
 80056c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80056d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056d4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80056d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e4:	ee17 2a90 	vmov	r2, s15
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e002      	b.n	80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005700:	4b25      	ldr	r3, [pc, #148]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005716:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800571a:	edd7 6a07 	vldr	s13, [r7, #28]
 800571e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005726:	ee17 2a90 	vmov	r2, s15
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e002      	b.n	8005736 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d017      	beq.n	8005772 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	0e1b      	lsrs	r3, r3, #24
 8005748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005758:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800575c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005768:	ee17 2a90 	vmov	r2, s15
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005770:	e00c      	b.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	e008      	b.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	3724      	adds	r7, #36	; 0x24
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	46020c00 	.word	0x46020c00
 800579c:	4b742400 	.word	0x4b742400
 80057a0:	46000000 	.word	0x46000000
 80057a4:	08008d88 	.word	0x08008d88

080057a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80057b0:	4bac      	ldr	r3, [pc, #688]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80057ba:	4baa      	ldr	r3, [pc, #680]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80057c4:	4ba7      	ldr	r3, [pc, #668]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3301      	adds	r3, #1
 80057d0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80057d2:	4ba4      	ldr	r3, [pc, #656]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80057dc:	4ba1      	ldr	r3, [pc, #644]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8123 	beq.w	8005a46 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d062      	beq.n	80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b03      	cmp	r3, #3
 800580a:	f200 8081 	bhi.w	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d024      	beq.n	800585e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d17a      	bne.n	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005824:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582c:	4b8d      	ldr	r3, [pc, #564]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800583c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005840:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005844:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005848:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800584c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005850:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800585c:	e08f      	b.n	800597e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800585e:	4b81      	ldr	r3, [pc, #516]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800586a:	4b7e      	ldr	r3, [pc, #504]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0f1b      	lsrs	r3, r3, #28
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	e006      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8005876:	4b7b      	ldr	r3, [pc, #492]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	0f1b      	lsrs	r3, r3, #28
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	4a7a      	ldr	r2, [pc, #488]	; (8005a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ae:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ca:	e058      	b.n	800597e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80058ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800590e:	e036      	b.n	800597e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005910:	4b54      	ldr	r3, [pc, #336]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800591c:	4b51      	ldr	r3, [pc, #324]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	0f1b      	lsrs	r3, r3, #28
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	e006      	b.n	8005936 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005928:	4b4e      	ldr	r3, [pc, #312]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800592a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	0f1b      	lsrs	r3, r3, #28
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	4a4e      	ldr	r2, [pc, #312]	; (8005a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005960:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005970:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800597c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800597e:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	0a5b      	lsrs	r3, r3, #9
 8005990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005994:	ee07 3a90 	vmov	s15, r3
 8005998:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800599c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80059a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b0:	ee17 2a90 	vmov	r2, s15
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d017      	beq.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80059de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80059e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f2:	ee17 2a90 	vmov	r2, s15
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	e002      	b.n	8005a02 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005a02:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d017      	beq.n	8005a3e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a0e:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	0e1b      	lsrs	r3, r3, #24
 8005a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a24:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	ee17 2a90 	vmov	r2, s15
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005a3c:	e00c      	b.n	8005a58 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	609a      	str	r2, [r3, #8]
}
 8005a44:	e008      	b.n	8005a58 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	609a      	str	r2, [r3, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	3724      	adds	r7, #36	; 0x24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	46020c00 	.word	0x46020c00
 8005a68:	4b742400 	.word	0x4b742400
 8005a6c:	46000000 	.word	0x46000000
 8005a70:	08008d88 	.word	0x08008d88

08005a74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	; 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a82:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005a86:	430b      	orrs	r3, r1
 8005a88:	d145      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a8a:	4ba7      	ldr	r3, [pc, #668]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005a96:	4ba4      	ldr	r3, [pc, #656]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d108      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aaa:	d104      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	f001 b8fc 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ab6:	4b9c      	ldr	r3, [pc, #624]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac4:	d114      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d110      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ace:	4b96      	ldr	r3, [pc, #600]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005adc:	d103      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005ade:	23fa      	movs	r3, #250	; 0xfa
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ae2:	f001 b8e4 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ae6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aec:	f001 b8df 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005af0:	4b8d      	ldr	r3, [pc, #564]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005afc:	d107      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b04:	d103      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005b06:	4b89      	ldr	r3, [pc, #548]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0a:	f001 b8d0 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
 8005b12:	f001 b8cc 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	d151      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005b22:	4b81      	ldr	r3, [pc, #516]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b28:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d035      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d841      	bhi.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d02a      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	2b60      	cmp	r3, #96	; 0x60
 8005b44:	d83b      	bhi.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d009      	beq.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d835      	bhi.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d012      	beq.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005b5e:	e02e      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fb53 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b6e:	f001 b89e 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b72:	f107 0318 	add.w	r3, r7, #24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fcb0 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b80:	f001 b895 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fe0d 	bl	80057a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b92:	f001 b88c 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b9c:	f001 b887 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ba0:	4b61      	ldr	r3, [pc, #388]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bac:	d103      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005bae:	4b60      	ldr	r3, [pc, #384]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bb2:	f001 b87c 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bba:	f001 b878 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc2:	f001 b874 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bca:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	d158      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005bd2:	4b55      	ldr	r3, [pc, #340]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005bd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d03b      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d846      	bhi.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf4:	d02e      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfc:	d83e      	bhi.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c04:	d00b      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0c:	d836      	bhi.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1a:	d012      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005c1c:	e02e      	b.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff faf4 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c2c:	f001 b83f 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c30:	f107 0318 	add.w	r3, r7, #24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff fc51 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c3e:	f001 b836 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c42:	f107 030c 	add.w	r3, r7, #12
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fdae 	bl	80057a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c50:	f001 b82d 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c54:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c5a:	f001 b828 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c5e:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c6a:	d103      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005c6c:	4b30      	ldr	r3, [pc, #192]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c70:	f001 b81d 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c78:	f001 b819 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c80:	f001 b815 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c88:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	d126      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005c90:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005c9c:	4b22      	ldr	r3, [pc, #136]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005cb0:	4b1f      	ldr	r3, [pc, #124]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb4:	f000 bffb 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ccc:	d103      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005cce:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd2:	f000 bfec 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cda:	f000 bfe8 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	d164      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cf0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005cfc:	d03d      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d04:	d852      	bhi.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d0c:	d014      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d14:	d84a      	bhi.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01f      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d22:	d012      	beq.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005d24:	e042      	b.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005d26:	bf00      	nop
 8005d28:	46020c00 	.word	0x46020c00
 8005d2c:	0007a120 	.word	0x0007a120
 8005d30:	00f42400 	.word	0x00f42400
 8005d34:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fa67 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d46:	f000 bfb2 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d4a:	f107 0318 	add.w	r3, r7, #24
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fbc4 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d58:	f000 bfa9 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005d5c:	4bab      	ldr	r3, [pc, #684]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d68:	d103      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005d6a:	4ba9      	ldr	r3, [pc, #676]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d6e:	f000 bf9e 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d76:	f000 bf9a 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d7a:	4ba4      	ldr	r3, [pc, #656]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005d86:	4ba1      	ldr	r3, [pc, #644]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	0e1b      	lsrs	r3, r3, #24
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	e006      	b.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005d92:	4b9e      	ldr	r3, [pc, #632]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	0e1b      	lsrs	r3, r3, #24
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	4a9c      	ldr	r2, [pc, #624]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005da8:	f000 bf81 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db0:	f000 bf7d 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	d175      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005dc0:	4b92      	ldr	r3, [pc, #584]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005dc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d15b      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005dd2:	4b8e      	ldr	r3, [pc, #568]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dd8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005de4:	d034      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005dec:	d849      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df4:	d00b      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dfc:	d841      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d016      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005e0c:	e039      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f9fc 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005e1c:	f000 bf47 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e20:	f107 0318 	add.w	r3, r7, #24
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fb59 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005e2e:	f000 bf3e 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005e32:	4b76      	ldr	r3, [pc, #472]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3e:	d103      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8005e40:	4b73      	ldr	r3, [pc, #460]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005e44:	f000 bf33 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005e4c:	f000 bf2f 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e50:	4b6e      	ldr	r3, [pc, #440]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8005e5c:	4b6b      	ldr	r3, [pc, #428]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	0e1b      	lsrs	r3, r3, #24
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005e68:	4b68      	ldr	r3, [pc, #416]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	0e1b      	lsrs	r3, r3, #24
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	4a67      	ldr	r2, [pc, #412]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005e7e:	f000 bf16 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005e86:	f000 bf12 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e90:	d108      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff f9ba 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea0:	f000 bf05 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea8:	f000 bf01 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb0:	1e51      	subs	r1, r2, #1
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	d136      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005eb6:	4b55      	ldr	r3, [pc, #340]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005ec8:	f7fe fb34 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	6378      	str	r0, [r7, #52]	; 0x34
 8005ece:	f000 beee 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d104      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ed8:	f7fe f9f6 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8005edc:	6378      	str	r0, [r7, #52]	; 0x34
 8005ede:	f000 bee6 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d106      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d103      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8005ef6:	4b48      	ldr	r3, [pc, #288]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8005efa:	f000 bed8 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005efe:	4b43      	ldr	r3, [pc, #268]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d104      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
 8005f18:	f000 bec9 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f20:	f000 bec5 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f28:	1e91      	subs	r1, r2, #2
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	d136      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f2e:	4b37      	ldr	r3, [pc, #220]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005f40:	f7fe fae4 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005f44:	6378      	str	r0, [r7, #52]	; 0x34
 8005f46:	f000 beb2 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f50:	f7fe f9ba 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8005f54:	6378      	str	r0, [r7, #52]	; 0x34
 8005f56:	f000 beaa 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005f5a:	4b2c      	ldr	r3, [pc, #176]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f66:	d106      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d103      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8005f6e:	4b2a      	ldr	r3, [pc, #168]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
 8005f72:	f000 be9c 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005f76:	4b25      	ldr	r3, [pc, #148]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d107      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2b0c      	cmp	r3, #12
 8005f88:	d104      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f90:	f000 be8d 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
 8005f98:	f000 be89 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa0:	1f11      	subs	r1, r2, #4
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	d13e      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005fa6:	4b19      	ldr	r3, [pc, #100]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f7fe faa8 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005fbc:	6378      	str	r0, [r7, #52]	; 0x34
 8005fbe:	f000 be76 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d104      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005fc8:	f7fe f97e 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8005fcc:	6378      	str	r0, [r7, #52]	; 0x34
 8005fce:	f000 be6e 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d106      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d103      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fea:	f000 be60 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d10f      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	2b30      	cmp	r3, #48	; 0x30
 8006000:	d10c      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
 8006008:	f000 be51 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800600c:	46020c00 	.word	0x46020c00
 8006010:	02dc6c00 	.word	0x02dc6c00
 8006014:	08008d88 	.word	0x08008d88
 8006018:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	f000 be45 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006028:	f1a2 0108 	sub.w	r1, r2, #8
 800602c:	430b      	orrs	r3, r1
 800602e:	d136      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006030:	4b9f      	ldr	r3, [pc, #636]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800603a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2b00      	cmp	r3, #0
 8006040:	d104      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006042:	f7fe fa63 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8006046:	6378      	str	r0, [r7, #52]	; 0x34
 8006048:	f000 be31 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d104      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006052:	f7fe f939 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006056:	6378      	str	r0, [r7, #52]	; 0x34
 8006058:	f000 be29 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800605c:	4b94      	ldr	r3, [pc, #592]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006068:	d106      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d103      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8006070:	4b90      	ldr	r3, [pc, #576]	; (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
 8006074:	f000 be1b 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006078:	4b8d      	ldr	r3, [pc, #564]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800607a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b02      	cmp	r3, #2
 8006084:	d107      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	2bc0      	cmp	r3, #192	; 0xc0
 800608a:	d104      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800608c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
 8006092:	f000 be0c 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	f000 be08 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800609e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a2:	f1a2 0110 	sub.w	r1, r2, #16
 80060a6:	430b      	orrs	r3, r1
 80060a8:	d139      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80060aa:	4b81      	ldr	r3, [pc, #516]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fe fa26 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 80060c0:	6378      	str	r0, [r7, #52]	; 0x34
 80060c2:	f000 bdf4 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060cc:	d104      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060ce:	f7fe f8fb 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80060d2:	6378      	str	r0, [r7, #52]	; 0x34
 80060d4:	f000 bdeb 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80060d8:	4b75      	ldr	r3, [pc, #468]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e4:	d107      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ec:	d103      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80060ee:	4b71      	ldr	r3, [pc, #452]	; (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
 80060f2:	f000 bddc 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80060f6:	4b6e      	ldr	r3, [pc, #440]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d108      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800610a:	d104      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800610c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
 8006112:	f000 bdcc 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	637b      	str	r3, [r7, #52]	; 0x34
 800611a:	f000 bdc8 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800611e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006122:	f1a2 0120 	sub.w	r1, r2, #32
 8006126:	430b      	orrs	r3, r1
 8006128:	d158      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800612a:	4b61      	ldr	r3, [pc, #388]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800612c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	2b00      	cmp	r3, #0
 800613a:	d104      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800613c:	f7fe fa0e 	bl	800455c <HAL_RCC_GetPCLK3Freq>
 8006140:	6378      	str	r0, [r7, #52]	; 0x34
 8006142:	f000 bdb4 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	2b01      	cmp	r3, #1
 800614a:	d104      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800614c:	f7fe f8bc 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006150:	6378      	str	r0, [r7, #52]	; 0x34
 8006152:	f000 bdac 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006156:	4b56      	ldr	r3, [pc, #344]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006162:	d106      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	2b02      	cmp	r3, #2
 8006168:	d103      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800616a:	4b52      	ldr	r3, [pc, #328]	; (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
 800616e:	f000 bd9e 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006172:	4b4f      	ldr	r3, [pc, #316]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d107      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2b03      	cmp	r3, #3
 8006184:	d104      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8006186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	f000 bd8f 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006190:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b20      	cmp	r3, #32
 800619a:	d11b      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d118      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061a2:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80061ae:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	0e1b      	lsrs	r3, r3, #24
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	e006      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80061ba:	4b3d      	ldr	r3, [pc, #244]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	0e1b      	lsrs	r3, r3, #24
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	4a3b      	ldr	r2, [pc, #236]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80061ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
 80061d0:	f000 bd6d 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	f000 bd69 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80061dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80061e4:	430b      	orrs	r3, r1
 80061e6:	d169      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80061e8:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	d104      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061fc:	f7fe f864 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006200:	6378      	str	r0, [r7, #52]	; 0x34
 8006202:	f000 bd54 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620c:	d108      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800620e:	f107 0318 	add.w	r3, r7, #24
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f962 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	f000 bd47 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006226:	f7fe f957 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800622a:	6378      	str	r0, [r7, #52]	; 0x34
 800622c:	f000 bd3f 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006236:	d118      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006244:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	0f1b      	lsrs	r3, r3, #28
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	e006      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006250:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	0f1b      	lsrs	r3, r3, #28
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
 8006266:	f000 bd22 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006276:	d107      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800627e:	d103      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006280:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
 8006284:	f000 bd13 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d107      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629c:	d103      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	f000 bd04 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
 80062aa:	f000 bd00 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80062ae:	bf00      	nop
 80062b0:	46020c00 	.word	0x46020c00
 80062b4:	00f42400 	.word	0x00f42400
 80062b8:	08008d88 	.word	0x08008d88
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80062bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80062c4:	430b      	orrs	r3, r1
 80062c6:	d14e      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80062c8:	4ba8      	ldr	r3, [pc, #672]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d841      	bhi.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006319 	.word	0x08006319
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	08006307 	.word	0x08006307
 80062ec:	08006323 	.word	0x08006323
 80062f0:	0800632d 	.word	0x0800632d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe ff89 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006302:	f000 bcd4 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006306:	f107 030c 	add.w	r3, r7, #12
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fa4c 	bl	80057a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006314:	f000 bccb 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006318:	f7fe f8de 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800631c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800631e:	f000 bcc6 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006322:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006328:	f000 bcc1 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800632c:	4b8f      	ldr	r3, [pc, #572]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006338:	4b8c      	ldr	r3, [pc, #560]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	0e1b      	lsrs	r3, r3, #24
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	e006      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	0e1b      	lsrs	r3, r3, #24
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	4a87      	ldr	r2, [pc, #540]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800635a:	f000 bca8 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006362:	f000 bca4 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800636e:	430b      	orrs	r3, r1
 8006370:	d15d      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006372:	4b7e      	ldr	r3, [pc, #504]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006378:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800637c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006384:	d036      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800638c:	d84b      	bhi.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006394:	d029      	beq.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800639c:	d843      	bhi.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a4:	d013      	beq.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ac:	d83b      	bhi.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d015      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ba:	d134      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe ff25 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ca:	f000 bc70 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ce:	f107 030c 	add.w	r3, r7, #12
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff f9e8 	bl	80057a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063dc:	f000 bc67 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80063e0:	f7fe f87a 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80063e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063e6:	f000 bc62 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80063ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f0:	f000 bc5d 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063f4:	4b5d      	ldr	r3, [pc, #372]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006400:	4b5a      	ldr	r3, [pc, #360]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0e1b      	lsrs	r3, r3, #24
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	e006      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800640c:	4b57      	ldr	r3, [pc, #348]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800640e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	0e1b      	lsrs	r3, r3, #24
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	4a55      	ldr	r2, [pc, #340]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800641c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006422:	f000 bc44 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800642a:	f000 bc40 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800642e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006432:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006436:	430b      	orrs	r3, r1
 8006438:	d14a      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800643a:	4b4c      	ldr	r3, [pc, #304]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800643c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006444:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fe f85e 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8006450:	6378      	str	r0, [r7, #52]	; 0x34
 8006452:	f000 bc2c 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645c:	d104      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800645e:	f7fd ff33 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006462:	6378      	str	r0, [r7, #52]	; 0x34
 8006464:	f000 bc23 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006468:	4b40      	ldr	r3, [pc, #256]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006474:	d107      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647c:	d103      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800647e:	4b3d      	ldr	r3, [pc, #244]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
 8006482:	f000 bc14 	b.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006486:	4b39      	ldr	r3, [pc, #228]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b20      	cmp	r3, #32
 8006490:	d11b      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006498:	d117      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800649a:	4b34      	ldr	r3, [pc, #208]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80064a6:	4b31      	ldr	r3, [pc, #196]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	0e1b      	lsrs	r3, r3, #24
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	e006      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80064b2:	4b2e      	ldr	r3, [pc, #184]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	0e1b      	lsrs	r3, r3, #24
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	4a2b      	ldr	r2, [pc, #172]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
 80064c8:	e3f1      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	e3ee      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80064d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80064d8:	430b      	orrs	r3, r1
 80064da:	d14d      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80064dc:	4b23      	ldr	r3, [pc, #140]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064ee:	f7fe f80d 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 80064f2:	6378      	str	r0, [r7, #52]	; 0x34
 80064f4:	e3db      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fc:	d103      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fd fee3 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006502:	6378      	str	r0, [r7, #52]	; 0x34
 8006504:	e3d3      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006506:	4b19      	ldr	r3, [pc, #100]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	d102      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
 8006520:	e3c5      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d11b      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006534:	d117      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	0e1b      	lsrs	r3, r3, #24
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	e006      	b.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800654e:	4b07      	ldr	r3, [pc, #28]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	0e1b      	lsrs	r3, r3, #24
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	4a04      	ldr	r2, [pc, #16]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800655e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	e3a3      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
 800656a:	e3a0      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800656c:	46020c00 	.word	0x46020c00
 8006570:	08008d88 	.word	0x08008d88
 8006574:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006580:	430b      	orrs	r3, r1
 8006582:	d148      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006584:	4b9d      	ldr	r3, [pc, #628]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800658a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800658e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d024      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2bc0      	cmp	r3, #192	; 0xc0
 800659a:	d839      	bhi.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d00d      	beq.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b80      	cmp	r3, #128	; 0x80
 80065a6:	d833      	bhi.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d011      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80065b4:	e02c      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80065b6:	f7fd ffd1 	bl	800455c <HAL_RCC_GetPCLK3Freq>
 80065ba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80065bc:	e377      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065be:	4b8f      	ldr	r3, [pc, #572]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ca:	d102      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80065cc:	4b8c      	ldr	r3, [pc, #560]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065d0:	e36d      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d6:	e36a      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80065d8:	f7fd fe76 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80065dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80065de:	e366      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80065e0:	4b86      	ldr	r3, [pc, #536]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80065ec:	4b83      	ldr	r3, [pc, #524]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	0f1b      	lsrs	r3, r3, #28
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	e006      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80065f8:	4b80      	ldr	r3, [pc, #512]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065fe:	041b      	lsls	r3, r3, #16
 8006600:	0f1b      	lsrs	r3, r3, #28
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	4a7f      	ldr	r2, [pc, #508]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800660e:	e34e      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006614:	e34b      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800661e:	430b      	orrs	r3, r1
 8006620:	d147      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006622:	4b76      	ldr	r3, [pc, #472]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800662c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fd ff6a 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8006638:	6378      	str	r0, [r7, #52]	; 0x34
 800663a:	e338      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006642:	d103      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006644:	f7fd fe40 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006648:	6378      	str	r0, [r7, #52]	; 0x34
 800664a:	e330      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800664c:	4b6b      	ldr	r3, [pc, #428]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006658:	d106      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	e322      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006668:	4b64      	ldr	r3, [pc, #400]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d11b      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800667a:	d117      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800667c:	4b5f      	ldr	r3, [pc, #380]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006688:	4b5c      	ldr	r3, [pc, #368]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	0e1b      	lsrs	r3, r3, #24
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	e006      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8006694:	4b59      	ldr	r3, [pc, #356]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	4a58      	ldr	r2, [pc, #352]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80066a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
 80066aa:	e300      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
 80066b0:	e2fd      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80066b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80066ba:	430b      	orrs	r3, r1
 80066bc:	d15b      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80066be:	4b4f      	ldr	r3, [pc, #316]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d117      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066d0:	4b4a      	ldr	r3, [pc, #296]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80066dc:	4b47      	ldr	r3, [pc, #284]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	0e1b      	lsrs	r3, r3, #24
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	e006      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80066e8:	4b44      	ldr	r3, [pc, #272]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	0e1b      	lsrs	r3, r3, #24
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	4a43      	ldr	r2, [pc, #268]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80066f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
 80066fe:	e2d6      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006700:	4b3e      	ldr	r3, [pc, #248]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670e:	d112      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	d10e      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006718:	4b38      	ldr	r3, [pc, #224]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800671a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800671e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006726:	d102      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006728:	23fa      	movs	r3, #250	; 0xfa
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800672c:	e2bf      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800672e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006734:	e2bb      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006736:	4b31      	ldr	r3, [pc, #196]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006742:	d106      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674a:	d102      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800674c:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
 8006750:	e2ad      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006752:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006766:	d103      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
 800676e:	e29e      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	637b      	str	r3, [r7, #52]	; 0x34
 8006774:	e29b      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800677e:	430b      	orrs	r3, r1
 8006780:	d162      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006782:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800678c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b00      	cmp	r3, #0
 8006792:	d117      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006794:	4b19      	ldr	r3, [pc, #100]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	0e1b      	lsrs	r3, r3, #24
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	e006      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80067ac:	4b13      	ldr	r3, [pc, #76]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	0e1b      	lsrs	r3, r3, #24
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	4a12      	ldr	r2, [pc, #72]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80067bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
 80067c2:	e274      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80067c4:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d2:	d119      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d115      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067dc:	4b07      	ldr	r3, [pc, #28]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ea:	d102      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80067ec:	23fa      	movs	r3, #250	; 0xfa
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067f0:	e25d      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80067f2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067f8:	e259      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80067fa:	bf00      	nop
 80067fc:	46020c00 	.word	0x46020c00
 8006800:	00f42400 	.word	0x00f42400
 8006804:	08008d88 	.word	0x08008d88
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006808:	4b9d      	ldr	r3, [pc, #628]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006814:	d106      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681c:	d102      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800681e:	4b99      	ldr	r3, [pc, #612]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
 8006822:	e244      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006824:	4b96      	ldr	r3, [pc, #600]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d107      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006838:	d103      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800683a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
 8006840:	e235      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
 8006846:	e232      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006850:	430b      	orrs	r3, r1
 8006852:	d147      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006854:	4b8a      	ldr	r3, [pc, #552]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800685a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800685e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006866:	f7fd fe51 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 800686a:	6378      	str	r0, [r7, #52]	; 0x34
 800686c:	e21f      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800686e:	4b84      	ldr	r3, [pc, #528]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687c:	d112      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006884:	d10e      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006886:	4b7e      	ldr	r3, [pc, #504]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800688c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006894:	d102      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8006896:	23fa      	movs	r3, #250	; 0xfa
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800689a:	e208      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800689c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068a2:	e204      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80068a4:	4b76      	ldr	r3, [pc, #472]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b0:	d106      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068b8:	d102      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80068ba:	4b72      	ldr	r3, [pc, #456]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
 80068be:	e1f6      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80068c0:	4b6f      	ldr	r3, [pc, #444]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80068c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d107      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80068d4:	d103      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	e1e7      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
 80068e2:	e1e4      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80068e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80068ec:	430b      	orrs	r3, r1
 80068ee:	d12d      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80068f0:	4b63      	ldr	r3, [pc, #396]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80068f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068f6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80068fc:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006908:	d105      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006910:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
 8006914:	e1cb      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800691c:	d107      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800691e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fc74 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
 800692c:	e1bf      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006934:	d107      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006936:	f107 0318 	add.w	r3, r7, #24
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fdce 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	e1b3      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
 800694a:	e1b0      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800694c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006950:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006954:	430b      	orrs	r3, r1
 8006956:	d14d      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006958:	4b49      	ldr	r3, [pc, #292]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800695a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800695e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006962:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800696a:	d028      	beq.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006972:	d83c      	bhi.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800697a:	d013      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006982:	d834      	bhi.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006990:	d004      	beq.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006992:	e02c      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006994:	f7fd fdce 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 8006998:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800699a:	e188      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800699c:	f7fd fc94 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80069a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069a2:	e184      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069a4:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b0:	d102      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80069b2:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069b6:	e17a      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069bc:	e177      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069be:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80069ca:	4b2d      	ldr	r3, [pc, #180]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	0e1b      	lsrs	r3, r3, #24
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	e006      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80069d6:	4b2a      	ldr	r3, [pc, #168]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	0e1b      	lsrs	r3, r3, #24
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80069e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ec:	e15f      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069f2:	e15c      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80069f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f8:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80069fc:	430b      	orrs	r3, r1
 80069fe:	d154      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006a00:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a12:	d028      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a1a:	d843      	bhi.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a22:	d013      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a2a:	d83b      	bhi.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d004      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006a3a:	e033      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006a3c:	f7fd fd66 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8006a40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006a42:	e134      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006a44:	f7fd fc40 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006a48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006a4a:	e130      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a58:	d102      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a5e:	e126      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a64:	e123      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00c      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	0e1b      	lsrs	r3, r3, #24
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	e00d      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006a7e:	bf00      	nop
 8006a80:	46020c00 	.word	0x46020c00
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	08008d88 	.word	0x08008d88
 8006a8c:	4b8a      	ldr	r3, [pc, #552]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	0e1b      	lsrs	r3, r3, #24
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	4a88      	ldr	r2, [pc, #544]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aa2:	e104      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aa8:	e101      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aae:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	d16e      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006ab6:	4b80      	ldr	r3, [pc, #512]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006abc:	f003 0318 	and.w	r3, r3, #24
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	2b18      	cmp	r3, #24
 8006ac6:	d862      	bhi.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006b8f 	.word	0x08006b8f
 8006ad8:	08006b8f 	.word	0x08006b8f
 8006adc:	08006b8f 	.word	0x08006b8f
 8006ae0:	08006b8f 	.word	0x08006b8f
 8006ae4:	08006b8f 	.word	0x08006b8f
 8006ae8:	08006b8f 	.word	0x08006b8f
 8006aec:	08006b8f 	.word	0x08006b8f
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b8f 	.word	0x08006b8f
 8006af8:	08006b8f 	.word	0x08006b8f
 8006afc:	08006b8f 	.word	0x08006b8f
 8006b00:	08006b8f 	.word	0x08006b8f
 8006b04:	08006b8f 	.word	0x08006b8f
 8006b08:	08006b8f 	.word	0x08006b8f
 8006b0c:	08006b8f 	.word	0x08006b8f
 8006b10:	08006b45 	.word	0x08006b45
 8006b14:	08006b8f 	.word	0x08006b8f
 8006b18:	08006b8f 	.word	0x08006b8f
 8006b1c:	08006b8f 	.word	0x08006b8f
 8006b20:	08006b8f 	.word	0x08006b8f
 8006b24:	08006b8f 	.word	0x08006b8f
 8006b28:	08006b8f 	.word	0x08006b8f
 8006b2c:	08006b8f 	.word	0x08006b8f
 8006b30:	08006b5f 	.word	0x08006b5f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006b34:	f7fd fd12 	bl	800455c <HAL_RCC_GetPCLK3Freq>
 8006b38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b3a:	e0b8      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006b3c:	f7fd fbc4 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006b40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b42:	e0b4      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b44:	4b5c      	ldr	r3, [pc, #368]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d102      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8006b52:	4b5b      	ldr	r3, [pc, #364]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b56:	e0aa      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b5c:	e0a7      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b5e:	4b56      	ldr	r3, [pc, #344]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006b6a:	4b53      	ldr	r3, [pc, #332]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	0e1b      	lsrs	r3, r3, #24
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	e006      	b.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8006b76:	4b50      	ldr	r3, [pc, #320]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	0e1b      	lsrs	r3, r3, #24
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	4a4d      	ldr	r2, [pc, #308]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b8c:	e08f      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b92:	e08c      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b98:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	d14c      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006ba0:	4b45      	ldr	r3, [pc, #276]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006ba2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ba6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006baa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bb2:	d013      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bba:	d83b      	bhi.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc2:	d013      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bca:	d833      	bhi.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d014      	beq.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd8:	d014      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006bda:	e02b      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bdc:	f107 0318 	add.w	r3, r7, #24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fc7b 	bl	80054dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bea:	e060      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe fb0d 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bfa:	e058      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006bfc:	f7fd fb64 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006c00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c02:	e054      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c04:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8006c10:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	0e1b      	lsrs	r3, r3, #24
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	e006      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8006c1c:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c32:	e03c      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c38:	e039      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006c42:	430b      	orrs	r3, r1
 8006c44:	d131      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c50:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006c52:	4b19      	ldr	r3, [pc, #100]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6c:	e01f      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7c:	d112      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c84:	d10e      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c94:	d102      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8006c96:	23fa      	movs	r3, #250	; 0xfa
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c9a:	e008      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ca2:	e004      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca8:	e001      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3738      	adds	r7, #56	; 0x38
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	46020c00 	.word	0x46020c00
 8006cbc:	08008d88 	.word	0x08008d88
 8006cc0:	00f42400 	.word	0x00f42400

08006cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006ccc:	4b47      	ldr	r3, [pc, #284]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a46      	ldr	r2, [pc, #280]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cd8:	f7fa ff32 	bl	8001b40 <HAL_GetTick>
 8006cdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cde:	e008      	b.n	8006cf2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ce0:	f7fa ff2e 	bl	8001b40 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e077      	b.n	8006de2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cf2:	4b3e      	ldr	r3, [pc, #248]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f0      	bne.n	8006ce0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006cfe:	4b3b      	ldr	r3, [pc, #236]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6811      	ldr	r1, [r2, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6852      	ldr	r2, [r2, #4]
 8006d12:	3a01      	subs	r2, #1
 8006d14:	0212      	lsls	r2, r2, #8
 8006d16:	430a      	orrs	r2, r1
 8006d18:	4934      	ldr	r1, [pc, #208]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006d1e:	4b33      	ldr	r3, [pc, #204]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d22:	4b33      	ldr	r3, [pc, #204]	; (8006df0 <RCCEx_PLL2_Config+0x12c>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68d2      	ldr	r2, [r2, #12]
 8006d34:	3a01      	subs	r2, #1
 8006d36:	0252      	lsls	r2, r2, #9
 8006d38:	b292      	uxth	r2, r2
 8006d3a:	4311      	orrs	r1, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6912      	ldr	r2, [r2, #16]
 8006d40:	3a01      	subs	r2, #1
 8006d42:	0412      	lsls	r2, r2, #16
 8006d44:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006d48:	4311      	orrs	r1, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6952      	ldr	r2, [r2, #20]
 8006d4e:	3a01      	subs	r2, #1
 8006d50:	0612      	lsls	r2, r2, #24
 8006d52:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006d56:	430a      	orrs	r2, r1
 8006d58:	4924      	ldr	r1, [pc, #144]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006d5e:	4b23      	ldr	r3, [pc, #140]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	f023 020c 	bic.w	r2, r3, #12
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	4920      	ldr	r1, [pc, #128]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006d70:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	491c      	ldr	r1, [pc, #112]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d84:	f023 0310 	bic.w	r3, r3, #16
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d8a:	4b18      	ldr	r3, [pc, #96]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	69d2      	ldr	r2, [r2, #28]
 8006d9a:	00d2      	lsls	r2, r2, #3
 8006d9c:	4913      	ldr	r1, [pc, #76]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	4a11      	ldr	r2, [pc, #68]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006da8:	f043 0310 	orr.w	r3, r3, #16
 8006dac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006db4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006db8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006dba:	f7fa fec1 	bl	8001b40 <HAL_GetTick>
 8006dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dc0:	e008      	b.n	8006dd4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dc2:	f7fa febd 	bl	8001b40 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e006      	b.n	8006de2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <RCCEx_PLL2_Config+0x128>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0

}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	46020c00 	.word	0x46020c00
 8006df0:	80800000 	.word	0x80800000

08006df4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006dfc:	4b47      	ldr	r3, [pc, #284]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a46      	ldr	r2, [pc, #280]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e08:	f7fa fe9a 	bl	8001b40 <HAL_GetTick>
 8006e0c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e0e:	e008      	b.n	8006e22 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e10:	f7fa fe96 	bl	8001b40 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e077      	b.n	8006f12 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e22:	4b3e      	ldr	r3, [pc, #248]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006e2e:	4b3b      	ldr	r3, [pc, #236]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6811      	ldr	r1, [r2, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6852      	ldr	r2, [r2, #4]
 8006e42:	3a01      	subs	r2, #1
 8006e44:	0212      	lsls	r2, r2, #8
 8006e46:	430a      	orrs	r2, r1
 8006e48:	4934      	ldr	r1, [pc, #208]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	630b      	str	r3, [r1, #48]	; 0x30
 8006e4e:	4b33      	ldr	r3, [pc, #204]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e52:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <RCCEx_PLL3_Config+0x12c>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6892      	ldr	r2, [r2, #8]
 8006e5a:	3a01      	subs	r2, #1
 8006e5c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68d2      	ldr	r2, [r2, #12]
 8006e64:	3a01      	subs	r2, #1
 8006e66:	0252      	lsls	r2, r2, #9
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	4311      	orrs	r1, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6912      	ldr	r2, [r2, #16]
 8006e70:	3a01      	subs	r2, #1
 8006e72:	0412      	lsls	r2, r2, #16
 8006e74:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006e78:	4311      	orrs	r1, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6952      	ldr	r2, [r2, #20]
 8006e7e:	3a01      	subs	r2, #1
 8006e80:	0612      	lsls	r2, r2, #24
 8006e82:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006e86:	430a      	orrs	r2, r1
 8006e88:	4924      	ldr	r1, [pc, #144]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006e8e:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	f023 020c 	bic.w	r2, r3, #12
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	4920      	ldr	r1, [pc, #128]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006ea0:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	491c      	ldr	r1, [pc, #112]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006eae:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006eb4:	f023 0310 	bic.w	r3, r3, #16
 8006eb8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eba:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	69d2      	ldr	r2, [r2, #28]
 8006eca:	00d2      	lsls	r2, r2, #3
 8006ecc:	4913      	ldr	r1, [pc, #76]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ed8:	f043 0310 	orr.w	r3, r3, #16
 8006edc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a0e      	ldr	r2, [pc, #56]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006eea:	f7fa fe29 	bl	8001b40 <HAL_GetTick>
 8006eee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ef2:	f7fa fe25 	bl	8001b40 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e006      	b.n	8006f12 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <RCCEx_PLL3_Config+0x128>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	46020c00 	.word	0x46020c00
 8006f20:	80800000 	.word	0x80800000

08006f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e042      	b.n	8006fbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fa fcef 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2224      	movs	r2, #36	; 0x24
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8d2 	bl	8007110 <UART_SetConfig>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e022      	b.n	8006fbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa68 	bl	8007454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 faef 	bl	8007598 <UART_CheckIdleState>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	f040 8092 	bne.w	8007104 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_UART_Transmit+0x28>
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e08a      	b.n	8007106 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_UART_Transmit+0x3a>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e083      	b.n	8007106 <HAL_UART_Transmit+0x142>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007010:	2b80      	cmp	r3, #128	; 0x80
 8007012:	d107      	bne.n	8007024 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007022:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2221      	movs	r2, #33	; 0x21
 8007030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007034:	f7fa fd84 	bl	8001b40 <HAL_GetTick>
 8007038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	88fa      	ldrh	r2, [r7, #6]
 800703e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007052:	d108      	bne.n	8007066 <HAL_UART_Transmit+0xa2>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	e003      	b.n	800706e <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007076:	e02c      	b.n	80070d2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2200      	movs	r2, #0
 8007080:	2180      	movs	r1, #128	; 0x80
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fad3 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e039      	b.n	8007106 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	3302      	adds	r3, #2
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	e007      	b.n	80070c0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	3301      	adds	r3, #1
 80070be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1cc      	bne.n	8007078 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2140      	movs	r1, #64	; 0x40
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 faa0 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e006      	b.n	8007106 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b094      	sub	sp, #80	; 0x50
 8007116:	af00      	add	r7, sp, #0
 8007118:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b7e      	ldr	r3, [pc, #504]	; (8007320 <UART_SetConfig+0x210>)
 8007126:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	431a      	orrs	r2, r3
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4313      	orrs	r3, r2
 800713e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4977      	ldr	r1, [pc, #476]	; (8007324 <UART_SetConfig+0x214>)
 8007148:	4019      	ands	r1, r3
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	430b      	orrs	r3, r1
 8007152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	68d9      	ldr	r1, [r3, #12]
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	ea40 0301 	orr.w	r3, r0, r1
 800716a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b6a      	ldr	r3, [pc, #424]	; (8007320 <UART_SetConfig+0x210>)
 8007178:	429a      	cmp	r2, r3
 800717a:	d009      	beq.n	8007190 <UART_SetConfig+0x80>
 800717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b69      	ldr	r3, [pc, #420]	; (8007328 <UART_SetConfig+0x218>)
 8007182:	429a      	cmp	r2, r3
 8007184:	d004      	beq.n	8007190 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	6a1a      	ldr	r2, [r3, #32]
 800718a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718c:	4313      	orrs	r3, r2
 800718e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800719a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	f023 000f 	bic.w	r0, r3, #15
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	ea40 0301 	orr.w	r3, r0, r1
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4b59      	ldr	r3, [pc, #356]	; (800732c <UART_SetConfig+0x21c>)
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d102      	bne.n	80071d0 <UART_SetConfig+0xc0>
 80071ca:	2301      	movs	r3, #1
 80071cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ce:	e029      	b.n	8007224 <UART_SetConfig+0x114>
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	4b56      	ldr	r3, [pc, #344]	; (8007330 <UART_SetConfig+0x220>)
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d102      	bne.n	80071e0 <UART_SetConfig+0xd0>
 80071da:	2302      	movs	r3, #2
 80071dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071de:	e021      	b.n	8007224 <UART_SetConfig+0x114>
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4b53      	ldr	r3, [pc, #332]	; (8007334 <UART_SetConfig+0x224>)
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d102      	bne.n	80071f0 <UART_SetConfig+0xe0>
 80071ea:	2304      	movs	r3, #4
 80071ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ee:	e019      	b.n	8007224 <UART_SetConfig+0x114>
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	4b50      	ldr	r3, [pc, #320]	; (8007338 <UART_SetConfig+0x228>)
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d102      	bne.n	8007200 <UART_SetConfig+0xf0>
 80071fa:	2308      	movs	r3, #8
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071fe:	e011      	b.n	8007224 <UART_SetConfig+0x114>
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b4d      	ldr	r3, [pc, #308]	; (800733c <UART_SetConfig+0x22c>)
 8007206:	429a      	cmp	r2, r3
 8007208:	d102      	bne.n	8007210 <UART_SetConfig+0x100>
 800720a:	2310      	movs	r3, #16
 800720c:	64bb      	str	r3, [r7, #72]	; 0x48
 800720e:	e009      	b.n	8007224 <UART_SetConfig+0x114>
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b42      	ldr	r3, [pc, #264]	; (8007320 <UART_SetConfig+0x210>)
 8007216:	429a      	cmp	r2, r3
 8007218:	d102      	bne.n	8007220 <UART_SetConfig+0x110>
 800721a:	2320      	movs	r3, #32
 800721c:	64bb      	str	r3, [r7, #72]	; 0x48
 800721e:	e001      	b.n	8007224 <UART_SetConfig+0x114>
 8007220:	2300      	movs	r3, #0
 8007222:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b3d      	ldr	r3, [pc, #244]	; (8007320 <UART_SetConfig+0x210>)
 800722a:	429a      	cmp	r2, r3
 800722c:	d005      	beq.n	800723a <UART_SetConfig+0x12a>
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b3d      	ldr	r3, [pc, #244]	; (8007328 <UART_SetConfig+0x218>)
 8007234:	429a      	cmp	r2, r3
 8007236:	f040 8085 	bne.w	8007344 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800723a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723c:	2200      	movs	r2, #0
 800723e:	623b      	str	r3, [r7, #32]
 8007240:	627a      	str	r2, [r7, #36]	; 0x24
 8007242:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007246:	f7fe fc15 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 800724a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800724c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80e8 	beq.w	8007424 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	4a39      	ldr	r2, [pc, #228]	; (8007340 <UART_SetConfig+0x230>)
 800725a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725e:	461a      	mov	r2, r3
 8007260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007262:	fbb3 f3f2 	udiv	r3, r3, r2
 8007266:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	4413      	add	r3, r2
 8007272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007274:	429a      	cmp	r2, r3
 8007276:	d305      	bcc.n	8007284 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800727e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007280:	429a      	cmp	r2, r3
 8007282:	d903      	bls.n	800728c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800728a:	e048      	b.n	800731e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728e:	2200      	movs	r2, #0
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	61fa      	str	r2, [r7, #28]
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	4a29      	ldr	r2, [pc, #164]	; (8007340 <UART_SetConfig+0x230>)
 800729a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2200      	movs	r2, #0
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	617a      	str	r2, [r7, #20]
 80072a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072ae:	f7f9 fb17 	bl	80008e0 <__aeabi_uldivmod>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4610      	mov	r0, r2
 80072b8:	4619      	mov	r1, r3
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	020b      	lsls	r3, r1, #8
 80072c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072c8:	0202      	lsls	r2, r0, #8
 80072ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072cc:	6849      	ldr	r1, [r1, #4]
 80072ce:	0849      	lsrs	r1, r1, #1
 80072d0:	2000      	movs	r0, #0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4605      	mov	r5, r0
 80072d6:	eb12 0804 	adds.w	r8, r2, r4
 80072da:	eb43 0905 	adc.w	r9, r3, r5
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	60fa      	str	r2, [r7, #12]
 80072e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	f7f9 faf6 	bl	80008e0 <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4613      	mov	r3, r2
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007302:	d308      	bcc.n	8007316 <UART_SetConfig+0x206>
 8007304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730a:	d204      	bcs.n	8007316 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e003      	b.n	800731e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800731c:	e082      	b.n	8007424 <UART_SetConfig+0x314>
 800731e:	e081      	b.n	8007424 <UART_SetConfig+0x314>
 8007320:	46002400 	.word	0x46002400
 8007324:	cfff69f3 	.word	0xcfff69f3
 8007328:	56002400 	.word	0x56002400
 800732c:	40013800 	.word	0x40013800
 8007330:	40004400 	.word	0x40004400
 8007334:	40004800 	.word	0x40004800
 8007338:	40004c00 	.word	0x40004c00
 800733c:	40005000 	.word	0x40005000
 8007340:	08008e48 	.word	0x08008e48
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d13c      	bne.n	80073c8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800734e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007350:	2200      	movs	r2, #0
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800735a:	f7fe fb8b 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 800735e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d05e      	beq.n	8007424 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	4a39      	ldr	r2, [pc, #228]	; (8007450 <UART_SetConfig+0x340>)
 800736c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007370:	461a      	mov	r2, r3
 8007372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007374:	fbb3 f3f2 	udiv	r3, r3, r2
 8007378:	005a      	lsls	r2, r3, #1
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	441a      	add	r2, r3
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d916      	bls.n	80073c0 <UART_SetConfig+0x2b0>
 8007392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007398:	d212      	bcs.n	80073c0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800739a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739c:	b29b      	uxth	r3, r3
 800739e:	f023 030f 	bic.w	r3, r3, #15
 80073a2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073b2:	4313      	orrs	r3, r2
 80073b4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80073bc:	60da      	str	r2, [r3, #12]
 80073be:	e031      	b.n	8007424 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073c6:	e02d      	b.n	8007424 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ca:	2200      	movs	r2, #0
 80073cc:	469a      	mov	sl, r3
 80073ce:	4693      	mov	fp, r2
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7fe fb4e 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 80073d8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80073da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d021      	beq.n	8007424 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <UART_SetConfig+0x340>)
 80073e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ea:	461a      	mov	r2, r3
 80073ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	441a      	add	r2, r3
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d909      	bls.n	800741e <UART_SetConfig+0x30e>
 800740a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007410:	d205      	bcs.n	800741e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	b29a      	uxth	r2, r3
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60da      	str	r2, [r3, #12]
 800741c:	e002      	b.n	8007424 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	2201      	movs	r2, #1
 8007428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	2201      	movs	r2, #1
 8007430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	2200      	movs	r2, #0
 8007438:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	2200      	movs	r2, #0
 800743e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007444:	4618      	mov	r0, r3
 8007446:	3750      	adds	r7, #80	; 0x50
 8007448:	46bd      	mov	sp, r7
 800744a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800744e:	bf00      	nop
 8007450:	08008e48 	.word	0x08008e48

08007454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01a      	beq.n	800756a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007552:	d10a      	bne.n	800756a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af02      	add	r7, sp, #8
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075a8:	f7fa faca 	bl	8001b40 <HAL_GetTick>
 80075ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d10e      	bne.n	80075da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f82f 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e025      	b.n	8007626 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d10e      	bne.n	8007606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f819 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e00f      	b.n	8007626 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b09c      	sub	sp, #112	; 0x70
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763e:	e0a9      	b.n	8007794 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	f000 80a5 	beq.w	8007794 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fa fa79 	bl	8001b40 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <UART_WaitOnFlagUntilTimeout+0x32>
 800765a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800765c:	2b00      	cmp	r3, #0
 800765e:	d140      	bne.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800766e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007674:	667b      	str	r3, [r7, #100]	; 0x64
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800767e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007680:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800768c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	663b      	str	r3, [r7, #96]	; 0x60
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e069      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d051      	beq.n	8007794 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fe:	d149      	bne.n	8007794 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007708:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800771e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
 800772a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800772e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	613b      	str	r3, [r7, #16]
   return(result);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	66bb      	str	r3, [r7, #104]	; 0x68
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800775c:	623a      	str	r2, [r7, #32]
 800775e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	69f9      	ldr	r1, [r7, #28]
 8007762:	6a3a      	ldr	r2, [r7, #32]
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	61bb      	str	r3, [r7, #24]
   return(result);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e5      	bne.n	800773c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e010      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4013      	ands	r3, r2
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	f43f af46 	beq.w	8007640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3770      	adds	r7, #112	; 0x70
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e027      	b.n	8007824 <HAL_UARTEx_DisableFifoMode+0x66>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2224      	movs	r2, #36	; 0x24
 80077e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007802:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007844:	2302      	movs	r3, #2
 8007846:	e02d      	b.n	80078a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2224      	movs	r2, #36	; 0x24
 8007854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f84f 	bl	8007928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e02d      	b.n	8007920 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2224      	movs	r2, #36	; 0x24
 80078d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f811 	bl	8007928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007934:	2b00      	cmp	r3, #0
 8007936:	d108      	bne.n	800794a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007948:	e031      	b.n	80079ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800794a:	2308      	movs	r3, #8
 800794c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800794e:	2308      	movs	r3, #8
 8007950:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	0e5b      	lsrs	r3, r3, #25
 800795a:	b2db      	uxtb	r3, r3
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	0f5b      	lsrs	r3, r3, #29
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	7b3a      	ldrb	r2, [r7, #12]
 8007976:	4911      	ldr	r1, [pc, #68]	; (80079bc <UARTEx_SetNbDataToProcess+0x94>)
 8007978:	5c8a      	ldrb	r2, [r1, r2]
 800797a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800797e:	7b3a      	ldrb	r2, [r7, #12]
 8007980:	490f      	ldr	r1, [pc, #60]	; (80079c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007982:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007984:	fb93 f3f2 	sdiv	r3, r3, r2
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	7b7a      	ldrb	r2, [r7, #13]
 8007994:	4909      	ldr	r1, [pc, #36]	; (80079bc <UARTEx_SetNbDataToProcess+0x94>)
 8007996:	5c8a      	ldrb	r2, [r1, r2]
 8007998:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800799c:	7b7a      	ldrb	r2, [r7, #13]
 800799e:	4908      	ldr	r1, [pc, #32]	; (80079c0 <UARTEx_SetNbDataToProcess+0x98>)
 80079a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	08008e60 	.word	0x08008e60
 80079c0:	08008e68 	.word	0x08008e68

080079c4 <__errno>:
 80079c4:	4b01      	ldr	r3, [pc, #4]	; (80079cc <__errno+0x8>)
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000020 	.word	0x20000020

080079d0 <__libc_init_array>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4d0d      	ldr	r5, [pc, #52]	; (8007a08 <__libc_init_array+0x38>)
 80079d4:	2600      	movs	r6, #0
 80079d6:	4c0d      	ldr	r4, [pc, #52]	; (8007a0c <__libc_init_array+0x3c>)
 80079d8:	1b64      	subs	r4, r4, r5
 80079da:	10a4      	asrs	r4, r4, #2
 80079dc:	42a6      	cmp	r6, r4
 80079de:	d109      	bne.n	80079f4 <__libc_init_array+0x24>
 80079e0:	4d0b      	ldr	r5, [pc, #44]	; (8007a10 <__libc_init_array+0x40>)
 80079e2:	2600      	movs	r6, #0
 80079e4:	4c0b      	ldr	r4, [pc, #44]	; (8007a14 <__libc_init_array+0x44>)
 80079e6:	f001 f823 	bl	8008a30 <_init>
 80079ea:	1b64      	subs	r4, r4, r5
 80079ec:	10a4      	asrs	r4, r4, #2
 80079ee:	42a6      	cmp	r6, r4
 80079f0:	d105      	bne.n	80079fe <__libc_init_array+0x2e>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f8:	3601      	adds	r6, #1
 80079fa:	4798      	blx	r3
 80079fc:	e7ee      	b.n	80079dc <__libc_init_array+0xc>
 80079fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a02:	3601      	adds	r6, #1
 8007a04:	4798      	blx	r3
 8007a06:	e7f2      	b.n	80079ee <__libc_init_array+0x1e>
 8007a08:	08008f10 	.word	0x08008f10
 8007a0c:	08008f10 	.word	0x08008f10
 8007a10:	08008f10 	.word	0x08008f10
 8007a14:	08008f14 	.word	0x08008f14

08007a18 <memset>:
 8007a18:	4402      	add	r2, r0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <memset+0xa>
 8007a20:	4770      	bx	lr
 8007a22:	f803 1b01 	strb.w	r1, [r3], #1
 8007a26:	e7f9      	b.n	8007a1c <memset+0x4>

08007a28 <__sfputc_r>:
 8007a28:	6893      	ldr	r3, [r2, #8]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	6093      	str	r3, [r2, #8]
 8007a30:	b410      	push	{r4}
 8007a32:	da08      	bge.n	8007a46 <__sfputc_r+0x1e>
 8007a34:	6994      	ldr	r4, [r2, #24]
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	db01      	blt.n	8007a3e <__sfputc_r+0x16>
 8007a3a:	290a      	cmp	r1, #10
 8007a3c:	d103      	bne.n	8007a46 <__sfputc_r+0x1e>
 8007a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a42:	f000 bb19 	b.w	8008078 <__swbuf_r>
 8007a46:	6813      	ldr	r3, [r2, #0]
 8007a48:	1c58      	adds	r0, r3, #1
 8007a4a:	6010      	str	r0, [r2, #0]
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	7019      	strb	r1, [r3, #0]
 8007a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <__sfputs_r>:
 8007a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a58:	4606      	mov	r6, r0
 8007a5a:	460f      	mov	r7, r1
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	18d5      	adds	r5, r2, r3
 8007a60:	42ac      	cmp	r4, r5
 8007a62:	d101      	bne.n	8007a68 <__sfputs_r+0x12>
 8007a64:	2000      	movs	r0, #0
 8007a66:	e007      	b.n	8007a78 <__sfputs_r+0x22>
 8007a68:	463a      	mov	r2, r7
 8007a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7ff ffda 	bl	8007a28 <__sfputc_r>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d1f3      	bne.n	8007a60 <__sfputs_r+0xa>
 8007a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a7c <_vfiprintf_r>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	460d      	mov	r5, r1
 8007a82:	b09d      	sub	sp, #116	; 0x74
 8007a84:	4614      	mov	r4, r2
 8007a86:	4698      	mov	r8, r3
 8007a88:	4606      	mov	r6, r0
 8007a8a:	b118      	cbz	r0, 8007a94 <_vfiprintf_r+0x18>
 8007a8c:	6983      	ldr	r3, [r0, #24]
 8007a8e:	b90b      	cbnz	r3, 8007a94 <_vfiprintf_r+0x18>
 8007a90:	f000 fcca 	bl	8008428 <__sinit>
 8007a94:	4b89      	ldr	r3, [pc, #548]	; (8007cbc <_vfiprintf_r+0x240>)
 8007a96:	429d      	cmp	r5, r3
 8007a98:	d11b      	bne.n	8007ad2 <_vfiprintf_r+0x56>
 8007a9a:	6875      	ldr	r5, [r6, #4]
 8007a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a9e:	07d9      	lsls	r1, r3, #31
 8007aa0:	d405      	bmi.n	8007aae <_vfiprintf_r+0x32>
 8007aa2:	89ab      	ldrh	r3, [r5, #12]
 8007aa4:	059a      	lsls	r2, r3, #22
 8007aa6:	d402      	bmi.n	8007aae <_vfiprintf_r+0x32>
 8007aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aaa:	f000 fd5b 	bl	8008564 <__retarget_lock_acquire_recursive>
 8007aae:	89ab      	ldrh	r3, [r5, #12]
 8007ab0:	071b      	lsls	r3, r3, #28
 8007ab2:	d501      	bpl.n	8007ab8 <_vfiprintf_r+0x3c>
 8007ab4:	692b      	ldr	r3, [r5, #16]
 8007ab6:	b9eb      	cbnz	r3, 8007af4 <_vfiprintf_r+0x78>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f000 fb2e 	bl	800811c <__swsetup_r>
 8007ac0:	b1c0      	cbz	r0, 8007af4 <_vfiprintf_r+0x78>
 8007ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac4:	07dc      	lsls	r4, r3, #31
 8007ac6:	d50e      	bpl.n	8007ae6 <_vfiprintf_r+0x6a>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	b01d      	add	sp, #116	; 0x74
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	4b7b      	ldr	r3, [pc, #492]	; (8007cc0 <_vfiprintf_r+0x244>)
 8007ad4:	429d      	cmp	r5, r3
 8007ad6:	d101      	bne.n	8007adc <_vfiprintf_r+0x60>
 8007ad8:	68b5      	ldr	r5, [r6, #8]
 8007ada:	e7df      	b.n	8007a9c <_vfiprintf_r+0x20>
 8007adc:	4b79      	ldr	r3, [pc, #484]	; (8007cc4 <_vfiprintf_r+0x248>)
 8007ade:	429d      	cmp	r5, r3
 8007ae0:	bf08      	it	eq
 8007ae2:	68f5      	ldreq	r5, [r6, #12]
 8007ae4:	e7da      	b.n	8007a9c <_vfiprintf_r+0x20>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	0598      	lsls	r0, r3, #22
 8007aea:	d4ed      	bmi.n	8007ac8 <_vfiprintf_r+0x4c>
 8007aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aee:	f000 fd3a 	bl	8008566 <__retarget_lock_release_recursive>
 8007af2:	e7e9      	b.n	8007ac8 <_vfiprintf_r+0x4c>
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afa:	f04f 0901 	mov.w	r9, #1
 8007afe:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8007cc8 <_vfiprintf_r+0x24c>
 8007b02:	9309      	str	r3, [sp, #36]	; 0x24
 8007b04:	2320      	movs	r3, #32
 8007b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b0a:	2330      	movs	r3, #48	; 0x30
 8007b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b10:	4623      	mov	r3, r4
 8007b12:	469a      	mov	sl, r3
 8007b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b18:	b10a      	cbz	r2, 8007b1e <_vfiprintf_r+0xa2>
 8007b1a:	2a25      	cmp	r2, #37	; 0x25
 8007b1c:	d1f9      	bne.n	8007b12 <_vfiprintf_r+0x96>
 8007b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b22:	d00b      	beq.n	8007b3c <_vfiprintf_r+0xc0>
 8007b24:	465b      	mov	r3, fp
 8007b26:	4622      	mov	r2, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff ff93 	bl	8007a56 <__sfputs_r>
 8007b30:	3001      	adds	r0, #1
 8007b32:	f000 80aa 	beq.w	8007c8a <_vfiprintf_r+0x20e>
 8007b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b38:	445a      	add	r2, fp
 8007b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80a2 	beq.w	8007c8a <_vfiprintf_r+0x20e>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4c:	f10a 0a01 	add.w	sl, sl, #1
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	9307      	str	r3, [sp, #28]
 8007b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b58:	931a      	str	r3, [sp, #104]	; 0x68
 8007b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b5e:	4654      	mov	r4, sl
 8007b60:	2205      	movs	r2, #5
 8007b62:	4859      	ldr	r0, [pc, #356]	; (8007cc8 <_vfiprintf_r+0x24c>)
 8007b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b68:	f000 fd64 	bl	8008634 <memchr>
 8007b6c:	9a04      	ldr	r2, [sp, #16]
 8007b6e:	b9d8      	cbnz	r0, 8007ba8 <_vfiprintf_r+0x12c>
 8007b70:	06d1      	lsls	r1, r2, #27
 8007b72:	bf44      	itt	mi
 8007b74:	2320      	movmi	r3, #32
 8007b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b7a:	0713      	lsls	r3, r2, #28
 8007b7c:	bf44      	itt	mi
 8007b7e:	232b      	movmi	r3, #43	; 0x2b
 8007b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b84:	f89a 3000 	ldrb.w	r3, [sl]
 8007b88:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8a:	d015      	beq.n	8007bb8 <_vfiprintf_r+0x13c>
 8007b8c:	9a07      	ldr	r2, [sp, #28]
 8007b8e:	4654      	mov	r4, sl
 8007b90:	2000      	movs	r0, #0
 8007b92:	f04f 0c0a 	mov.w	ip, #10
 8007b96:	4621      	mov	r1, r4
 8007b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b9c:	3b30      	subs	r3, #48	; 0x30
 8007b9e:	2b09      	cmp	r3, #9
 8007ba0:	d94e      	bls.n	8007c40 <_vfiprintf_r+0x1c4>
 8007ba2:	b1b0      	cbz	r0, 8007bd2 <_vfiprintf_r+0x156>
 8007ba4:	9207      	str	r2, [sp, #28]
 8007ba6:	e014      	b.n	8007bd2 <_vfiprintf_r+0x156>
 8007ba8:	eba0 0308 	sub.w	r3, r0, r8
 8007bac:	46a2      	mov	sl, r4
 8007bae:	fa09 f303 	lsl.w	r3, r9, r3
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	e7d2      	b.n	8007b5e <_vfiprintf_r+0xe2>
 8007bb8:	9b03      	ldr	r3, [sp, #12]
 8007bba:	1d19      	adds	r1, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	9103      	str	r1, [sp, #12]
 8007bc2:	bfbb      	ittet	lt
 8007bc4:	425b      	neglt	r3, r3
 8007bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bca:	9307      	strge	r3, [sp, #28]
 8007bcc:	9307      	strlt	r3, [sp, #28]
 8007bce:	bfb8      	it	lt
 8007bd0:	9204      	strlt	r2, [sp, #16]
 8007bd2:	7823      	ldrb	r3, [r4, #0]
 8007bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8007bd6:	d10c      	bne.n	8007bf2 <_vfiprintf_r+0x176>
 8007bd8:	7863      	ldrb	r3, [r4, #1]
 8007bda:	2b2a      	cmp	r3, #42	; 0x2a
 8007bdc:	d135      	bne.n	8007c4a <_vfiprintf_r+0x1ce>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	3402      	adds	r4, #2
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	9203      	str	r2, [sp, #12]
 8007bea:	bfb8      	it	lt
 8007bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bf0:	9305      	str	r3, [sp, #20]
 8007bf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cd8 <_vfiprintf_r+0x25c>
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	f000 fd1a 	bl	8008634 <memchr>
 8007c00:	b140      	cbz	r0, 8007c14 <_vfiprintf_r+0x198>
 8007c02:	2340      	movs	r3, #64	; 0x40
 8007c04:	eba0 000a 	sub.w	r0, r0, sl
 8007c08:	3401      	adds	r4, #1
 8007c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	4303      	orrs	r3, r0
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	2206      	movs	r2, #6
 8007c1a:	482c      	ldr	r0, [pc, #176]	; (8007ccc <_vfiprintf_r+0x250>)
 8007c1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c20:	f000 fd08 	bl	8008634 <memchr>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d03f      	beq.n	8007ca8 <_vfiprintf_r+0x22c>
 8007c28:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <_vfiprintf_r+0x254>)
 8007c2a:	bb1b      	cbnz	r3, 8007c74 <_vfiprintf_r+0x1f8>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3307      	adds	r3, #7
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3a:	443b      	add	r3, r7
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	e767      	b.n	8007b10 <_vfiprintf_r+0x94>
 8007c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c44:	460c      	mov	r4, r1
 8007c46:	2001      	movs	r0, #1
 8007c48:	e7a5      	b.n	8007b96 <_vfiprintf_r+0x11a>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	f04f 0c0a 	mov.w	ip, #10
 8007c52:	4619      	mov	r1, r3
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	4620      	mov	r0, r4
 8007c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c5c:	3a30      	subs	r2, #48	; 0x30
 8007c5e:	2a09      	cmp	r2, #9
 8007c60:	d903      	bls.n	8007c6a <_vfiprintf_r+0x1ee>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0c5      	beq.n	8007bf2 <_vfiprintf_r+0x176>
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	e7c3      	b.n	8007bf2 <_vfiprintf_r+0x176>
 8007c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6e:	4604      	mov	r4, r0
 8007c70:	2301      	movs	r3, #1
 8007c72:	e7f0      	b.n	8007c56 <_vfiprintf_r+0x1da>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	462a      	mov	r2, r5
 8007c78:	a904      	add	r1, sp, #16
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <_vfiprintf_r+0x258>)
 8007c80:	e000      	b.n	8007c84 <_vfiprintf_r+0x208>
 8007c82:	bf00      	nop
 8007c84:	4607      	mov	r7, r0
 8007c86:	1c78      	adds	r0, r7, #1
 8007c88:	d1d6      	bne.n	8007c38 <_vfiprintf_r+0x1bc>
 8007c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c8c:	07d9      	lsls	r1, r3, #31
 8007c8e:	d405      	bmi.n	8007c9c <_vfiprintf_r+0x220>
 8007c90:	89ab      	ldrh	r3, [r5, #12]
 8007c92:	059a      	lsls	r2, r3, #22
 8007c94:	d402      	bmi.n	8007c9c <_vfiprintf_r+0x220>
 8007c96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c98:	f000 fc65 	bl	8008566 <__retarget_lock_release_recursive>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	f53f af12 	bmi.w	8007ac8 <_vfiprintf_r+0x4c>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	e711      	b.n	8007acc <_vfiprintf_r+0x50>
 8007ca8:	ab03      	add	r3, sp, #12
 8007caa:	462a      	mov	r2, r5
 8007cac:	a904      	add	r1, sp, #16
 8007cae:	4630      	mov	r0, r6
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <_vfiprintf_r+0x258>)
 8007cb4:	f000 f88c 	bl	8007dd0 <_printf_i>
 8007cb8:	e7e4      	b.n	8007c84 <_vfiprintf_r+0x208>
 8007cba:	bf00      	nop
 8007cbc:	08008ec8 	.word	0x08008ec8
 8007cc0:	08008ee8 	.word	0x08008ee8
 8007cc4:	08008ea8 	.word	0x08008ea8
 8007cc8:	08008e74 	.word	0x08008e74
 8007ccc:	08008e7e 	.word	0x08008e7e
 8007cd0:	00000000 	.word	0x00000000
 8007cd4:	08007a57 	.word	0x08007a57
 8007cd8:	08008e7a 	.word	0x08008e7a

08007cdc <vfiprintf>:
 8007cdc:	4613      	mov	r3, r2
 8007cde:	460a      	mov	r2, r1
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	4802      	ldr	r0, [pc, #8]	; (8007cec <vfiprintf+0x10>)
 8007ce4:	6800      	ldr	r0, [r0, #0]
 8007ce6:	f7ff bec9 	b.w	8007a7c <_vfiprintf_r>
 8007cea:	bf00      	nop
 8007cec:	20000020 	.word	0x20000020

08007cf0 <_printf_common>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	4699      	mov	r9, r3
 8007cf8:	688a      	ldr	r2, [r1, #8]
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	690b      	ldr	r3, [r1, #16]
 8007cfe:	460c      	mov	r4, r1
 8007d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	bfb8      	it	lt
 8007d08:	4613      	movlt	r3, r2
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d10:	b10a      	cbz	r2, 8007d16 <_printf_common+0x26>
 8007d12:	3301      	adds	r3, #1
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	0699      	lsls	r1, r3, #26
 8007d1a:	bf42      	ittt	mi
 8007d1c:	6833      	ldrmi	r3, [r6, #0]
 8007d1e:	3302      	addmi	r3, #2
 8007d20:	6033      	strmi	r3, [r6, #0]
 8007d22:	6825      	ldr	r5, [r4, #0]
 8007d24:	f015 0506 	ands.w	r5, r5, #6
 8007d28:	d106      	bne.n	8007d38 <_printf_common+0x48>
 8007d2a:	f104 0a19 	add.w	sl, r4, #25
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	6832      	ldr	r2, [r6, #0]
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dc29      	bgt.n	8007d8c <_printf_common+0x9c>
 8007d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d3c:	1e13      	subs	r3, r2, #0
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	bf18      	it	ne
 8007d42:	2301      	movne	r3, #1
 8007d44:	0692      	lsls	r2, r2, #26
 8007d46:	d42e      	bmi.n	8007da6 <_printf_common+0xb6>
 8007d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	3001      	adds	r0, #1
 8007d54:	d021      	beq.n	8007d9a <_printf_common+0xaa>
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	341a      	adds	r4, #26
 8007d5a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007d5e:	f003 0306 	and.w	r3, r3, #6
 8007d62:	6832      	ldr	r2, [r6, #0]
 8007d64:	2600      	movs	r6, #0
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007d6c:	bf08      	it	eq
 8007d6e:	1aad      	subeq	r5, r5, r2
 8007d70:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007d74:	bf14      	ite	ne
 8007d76:	2500      	movne	r5, #0
 8007d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bfc4      	itt	gt
 8007d80:	1a9b      	subgt	r3, r3, r2
 8007d82:	18ed      	addgt	r5, r5, r3
 8007d84:	42b5      	cmp	r5, r6
 8007d86:	d11a      	bne.n	8007dbe <_printf_common+0xce>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e008      	b.n	8007d9e <_printf_common+0xae>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4649      	mov	r1, r9
 8007d92:	4638      	mov	r0, r7
 8007d94:	47c0      	blx	r8
 8007d96:	3001      	adds	r0, #1
 8007d98:	d103      	bne.n	8007da2 <_printf_common+0xb2>
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da2:	3501      	adds	r5, #1
 8007da4:	e7c3      	b.n	8007d2e <_printf_common+0x3e>
 8007da6:	18e1      	adds	r1, r4, r3
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	2030      	movs	r0, #48	; 0x30
 8007dac:	3302      	adds	r3, #2
 8007dae:	4422      	add	r2, r4
 8007db0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dbc:	e7c4      	b.n	8007d48 <_printf_common+0x58>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	47c0      	blx	r8
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d0e6      	beq.n	8007d9a <_printf_common+0xaa>
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7d9      	b.n	8007d84 <_printf_common+0x94>

08007dd0 <_printf_i>:
 8007dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	7e0f      	ldrb	r7, [r1, #24]
 8007dd6:	4691      	mov	r9, r2
 8007dd8:	4680      	mov	r8, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	2f78      	cmp	r7, #120	; 0x78
 8007dde:	469a      	mov	sl, r3
 8007de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007de6:	d807      	bhi.n	8007df8 <_printf_i+0x28>
 8007de8:	2f62      	cmp	r7, #98	; 0x62
 8007dea:	d80a      	bhi.n	8007e02 <_printf_i+0x32>
 8007dec:	2f00      	cmp	r7, #0
 8007dee:	f000 80d8 	beq.w	8007fa2 <_printf_i+0x1d2>
 8007df2:	2f58      	cmp	r7, #88	; 0x58
 8007df4:	f000 80a3 	beq.w	8007f3e <_printf_i+0x16e>
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e00:	e03a      	b.n	8007e78 <_printf_i+0xa8>
 8007e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e06:	2b15      	cmp	r3, #21
 8007e08:	d8f6      	bhi.n	8007df8 <_printf_i+0x28>
 8007e0a:	a101      	add	r1, pc, #4	; (adr r1, 8007e10 <_printf_i+0x40>)
 8007e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e10:	08007e69 	.word	0x08007e69
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007df9 	.word	0x08007df9
 8007e1c:	08007df9 	.word	0x08007df9
 8007e20:	08007df9 	.word	0x08007df9
 8007e24:	08007df9 	.word	0x08007df9
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08007df9 	.word	0x08007df9
 8007e30:	08007df9 	.word	0x08007df9
 8007e34:	08007df9 	.word	0x08007df9
 8007e38:	08007df9 	.word	0x08007df9
 8007e3c:	08007f89 	.word	0x08007f89
 8007e40:	08007ead 	.word	0x08007ead
 8007e44:	08007f6b 	.word	0x08007f6b
 8007e48:	08007df9 	.word	0x08007df9
 8007e4c:	08007df9 	.word	0x08007df9
 8007e50:	08007fab 	.word	0x08007fab
 8007e54:	08007df9 	.word	0x08007df9
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08007df9 	.word	0x08007df9
 8007e60:	08007df9 	.word	0x08007df9
 8007e64:	08007f73 	.word	0x08007f73
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	1d1a      	adds	r2, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	602a      	str	r2, [r5, #0]
 8007e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0a3      	b.n	8007fc4 <_printf_i+0x1f4>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	6829      	ldr	r1, [r5, #0]
 8007e80:	0606      	lsls	r6, r0, #24
 8007e82:	f101 0304 	add.w	r3, r1, #4
 8007e86:	d50a      	bpl.n	8007e9e <_printf_i+0xce>
 8007e88:	680e      	ldr	r6, [r1, #0]
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	da03      	bge.n	8007e98 <_printf_i+0xc8>
 8007e90:	232d      	movs	r3, #45	; 0x2d
 8007e92:	4276      	negs	r6, r6
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e98:	485e      	ldr	r0, [pc, #376]	; (8008014 <_printf_i+0x244>)
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	e019      	b.n	8007ed2 <_printf_i+0x102>
 8007e9e:	680e      	ldr	r6, [r1, #0]
 8007ea0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	bf18      	it	ne
 8007ea8:	b236      	sxthne	r6, r6
 8007eaa:	e7ef      	b.n	8007e8c <_printf_i+0xbc>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	1d19      	adds	r1, r3, #4
 8007eb2:	6029      	str	r1, [r5, #0]
 8007eb4:	0601      	lsls	r1, r0, #24
 8007eb6:	d501      	bpl.n	8007ebc <_printf_i+0xec>
 8007eb8:	681e      	ldr	r6, [r3, #0]
 8007eba:	e002      	b.n	8007ec2 <_printf_i+0xf2>
 8007ebc:	0646      	lsls	r6, r0, #25
 8007ebe:	d5fb      	bpl.n	8007eb8 <_printf_i+0xe8>
 8007ec0:	881e      	ldrh	r6, [r3, #0]
 8007ec2:	2f6f      	cmp	r7, #111	; 0x6f
 8007ec4:	4853      	ldr	r0, [pc, #332]	; (8008014 <_printf_i+0x244>)
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2308      	moveq	r3, #8
 8007eca:	230a      	movne	r3, #10
 8007ecc:	2100      	movs	r1, #0
 8007ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ed2:	6865      	ldr	r5, [r4, #4]
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	60a5      	str	r5, [r4, #8]
 8007ed8:	bfa2      	ittt	ge
 8007eda:	6821      	ldrge	r1, [r4, #0]
 8007edc:	f021 0104 	bicge.w	r1, r1, #4
 8007ee0:	6021      	strge	r1, [r4, #0]
 8007ee2:	b90e      	cbnz	r6, 8007ee8 <_printf_i+0x118>
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	d04d      	beq.n	8007f84 <_printf_i+0x1b4>
 8007ee8:	4615      	mov	r5, r2
 8007eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eee:	fb03 6711 	mls	r7, r3, r1, r6
 8007ef2:	5dc7      	ldrb	r7, [r0, r7]
 8007ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ef8:	4637      	mov	r7, r6
 8007efa:	460e      	mov	r6, r1
 8007efc:	42bb      	cmp	r3, r7
 8007efe:	d9f4      	bls.n	8007eea <_printf_i+0x11a>
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d10b      	bne.n	8007f1c <_printf_i+0x14c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	07de      	lsls	r6, r3, #31
 8007f08:	d508      	bpl.n	8007f1c <_printf_i+0x14c>
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	bfde      	ittt	le
 8007f12:	2330      	movle	r3, #48	; 0x30
 8007f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f1c:	1b52      	subs	r2, r2, r5
 8007f1e:	6122      	str	r2, [r4, #16]
 8007f20:	464b      	mov	r3, r9
 8007f22:	aa03      	add	r2, sp, #12
 8007f24:	4621      	mov	r1, r4
 8007f26:	4640      	mov	r0, r8
 8007f28:	f8cd a000 	str.w	sl, [sp]
 8007f2c:	f7ff fee0 	bl	8007cf0 <_printf_common>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d14c      	bne.n	8007fce <_printf_i+0x1fe>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	b004      	add	sp, #16
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	4835      	ldr	r0, [pc, #212]	; (8008014 <_printf_i+0x244>)
 8007f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f44:	6829      	ldr	r1, [r5, #0]
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f4c:	6029      	str	r1, [r5, #0]
 8007f4e:	061d      	lsls	r5, r3, #24
 8007f50:	d514      	bpl.n	8007f7c <_printf_i+0x1ac>
 8007f52:	07df      	lsls	r7, r3, #31
 8007f54:	bf44      	itt	mi
 8007f56:	f043 0320 	orrmi.w	r3, r3, #32
 8007f5a:	6023      	strmi	r3, [r4, #0]
 8007f5c:	b91e      	cbnz	r6, 8007f66 <_printf_i+0x196>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f023 0320 	bic.w	r3, r3, #32
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2310      	movs	r3, #16
 8007f68:	e7b0      	b.n	8007ecc <_printf_i+0xfc>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f043 0320 	orr.w	r3, r3, #32
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	2378      	movs	r3, #120	; 0x78
 8007f74:	4828      	ldr	r0, [pc, #160]	; (8008018 <_printf_i+0x248>)
 8007f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f7a:	e7e3      	b.n	8007f44 <_printf_i+0x174>
 8007f7c:	0659      	lsls	r1, r3, #25
 8007f7e:	bf48      	it	mi
 8007f80:	b2b6      	uxthmi	r6, r6
 8007f82:	e7e6      	b.n	8007f52 <_printf_i+0x182>
 8007f84:	4615      	mov	r5, r2
 8007f86:	e7bb      	b.n	8007f00 <_printf_i+0x130>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6826      	ldr	r6, [r4, #0]
 8007f8c:	1d18      	adds	r0, r3, #4
 8007f8e:	6961      	ldr	r1, [r4, #20]
 8007f90:	6028      	str	r0, [r5, #0]
 8007f92:	0635      	lsls	r5, r6, #24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0x1cc>
 8007f98:	6019      	str	r1, [r3, #0]
 8007f9a:	e002      	b.n	8007fa2 <_printf_i+0x1d2>
 8007f9c:	0670      	lsls	r0, r6, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0x1c8>
 8007fa0:	8019      	strh	r1, [r3, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4615      	mov	r5, r2
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	e7ba      	b.n	8007f20 <_printf_i+0x150>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	2100      	movs	r1, #0
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	681d      	ldr	r5, [r3, #0]
 8007fb4:	6862      	ldr	r2, [r4, #4]
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 fb3c 	bl	8008634 <memchr>
 8007fbc:	b108      	cbz	r0, 8007fc2 <_printf_i+0x1f2>
 8007fbe:	1b40      	subs	r0, r0, r5
 8007fc0:	6060      	str	r0, [r4, #4]
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fcc:	e7a8      	b.n	8007f20 <_printf_i+0x150>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0ab      	beq.n	8007f34 <_printf_i+0x164>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	079b      	lsls	r3, r3, #30
 8007fe0:	d413      	bmi.n	800800a <_printf_i+0x23a>
 8007fe2:	68e0      	ldr	r0, [r4, #12]
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	bfb8      	it	lt
 8007fea:	4618      	movlt	r0, r3
 8007fec:	e7a4      	b.n	8007f38 <_printf_i+0x168>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	47d0      	blx	sl
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d09b      	beq.n	8007f34 <_printf_i+0x164>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	68e3      	ldr	r3, [r4, #12]
 8008000:	9903      	ldr	r1, [sp, #12]
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	42ab      	cmp	r3, r5
 8008006:	dcf2      	bgt.n	8007fee <_printf_i+0x21e>
 8008008:	e7eb      	b.n	8007fe2 <_printf_i+0x212>
 800800a:	2500      	movs	r5, #0
 800800c:	f104 0619 	add.w	r6, r4, #25
 8008010:	e7f5      	b.n	8007ffe <_printf_i+0x22e>
 8008012:	bf00      	nop
 8008014:	08008e85 	.word	0x08008e85
 8008018:	08008e96 	.word	0x08008e96

0800801c <iprintf>:
 800801c:	b40f      	push	{r0, r1, r2, r3}
 800801e:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <iprintf+0x2c>)
 8008020:	b513      	push	{r0, r1, r4, lr}
 8008022:	681c      	ldr	r4, [r3, #0]
 8008024:	b124      	cbz	r4, 8008030 <iprintf+0x14>
 8008026:	69a3      	ldr	r3, [r4, #24]
 8008028:	b913      	cbnz	r3, 8008030 <iprintf+0x14>
 800802a:	4620      	mov	r0, r4
 800802c:	f000 f9fc 	bl	8008428 <__sinit>
 8008030:	ab05      	add	r3, sp, #20
 8008032:	9a04      	ldr	r2, [sp, #16]
 8008034:	68a1      	ldr	r1, [r4, #8]
 8008036:	4620      	mov	r0, r4
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	f7ff fd1f 	bl	8007a7c <_vfiprintf_r>
 800803e:	b002      	add	sp, #8
 8008040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008044:	b004      	add	sp, #16
 8008046:	4770      	bx	lr
 8008048:	20000020 	.word	0x20000020

0800804c <putchar>:
 800804c:	4b09      	ldr	r3, [pc, #36]	; (8008074 <putchar+0x28>)
 800804e:	b513      	push	{r0, r1, r4, lr}
 8008050:	681c      	ldr	r4, [r3, #0]
 8008052:	4601      	mov	r1, r0
 8008054:	b134      	cbz	r4, 8008064 <putchar+0x18>
 8008056:	69a3      	ldr	r3, [r4, #24]
 8008058:	b923      	cbnz	r3, 8008064 <putchar+0x18>
 800805a:	9001      	str	r0, [sp, #4]
 800805c:	4620      	mov	r0, r4
 800805e:	f000 f9e3 	bl	8008428 <__sinit>
 8008062:	9901      	ldr	r1, [sp, #4]
 8008064:	68a2      	ldr	r2, [r4, #8]
 8008066:	4620      	mov	r0, r4
 8008068:	b002      	add	sp, #8
 800806a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800806e:	f000 bbcf 	b.w	8008810 <_putc_r>
 8008072:	bf00      	nop
 8008074:	20000020 	.word	0x20000020

08008078 <__swbuf_r>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	460e      	mov	r6, r1
 800807c:	4614      	mov	r4, r2
 800807e:	4605      	mov	r5, r0
 8008080:	b118      	cbz	r0, 800808a <__swbuf_r+0x12>
 8008082:	6983      	ldr	r3, [r0, #24]
 8008084:	b90b      	cbnz	r3, 800808a <__swbuf_r+0x12>
 8008086:	f000 f9cf 	bl	8008428 <__sinit>
 800808a:	4b21      	ldr	r3, [pc, #132]	; (8008110 <__swbuf_r+0x98>)
 800808c:	429c      	cmp	r4, r3
 800808e:	d12b      	bne.n	80080e8 <__swbuf_r+0x70>
 8008090:	686c      	ldr	r4, [r5, #4]
 8008092:	69a3      	ldr	r3, [r4, #24]
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	071a      	lsls	r2, r3, #28
 800809a:	d52f      	bpl.n	80080fc <__swbuf_r+0x84>
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	b36b      	cbz	r3, 80080fc <__swbuf_r+0x84>
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	b2f6      	uxtb	r6, r6
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	4637      	mov	r7, r6
 80080a8:	1ac0      	subs	r0, r0, r3
 80080aa:	6963      	ldr	r3, [r4, #20]
 80080ac:	4283      	cmp	r3, r0
 80080ae:	dc04      	bgt.n	80080ba <__swbuf_r+0x42>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f000 f924 	bl	8008300 <_fflush_r>
 80080b8:	bb30      	cbnz	r0, 8008108 <__swbuf_r+0x90>
 80080ba:	68a3      	ldr	r3, [r4, #8]
 80080bc:	3001      	adds	r0, #1
 80080be:	3b01      	subs	r3, #1
 80080c0:	60a3      	str	r3, [r4, #8]
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	701e      	strb	r6, [r3, #0]
 80080ca:	6963      	ldr	r3, [r4, #20]
 80080cc:	4283      	cmp	r3, r0
 80080ce:	d004      	beq.n	80080da <__swbuf_r+0x62>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d506      	bpl.n	80080e4 <__swbuf_r+0x6c>
 80080d6:	2e0a      	cmp	r6, #10
 80080d8:	d104      	bne.n	80080e4 <__swbuf_r+0x6c>
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f90f 	bl	8008300 <_fflush_r>
 80080e2:	b988      	cbnz	r0, 8008108 <__swbuf_r+0x90>
 80080e4:	4638      	mov	r0, r7
 80080e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <__swbuf_r+0x9c>)
 80080ea:	429c      	cmp	r4, r3
 80080ec:	d101      	bne.n	80080f2 <__swbuf_r+0x7a>
 80080ee:	68ac      	ldr	r4, [r5, #8]
 80080f0:	e7cf      	b.n	8008092 <__swbuf_r+0x1a>
 80080f2:	4b09      	ldr	r3, [pc, #36]	; (8008118 <__swbuf_r+0xa0>)
 80080f4:	429c      	cmp	r4, r3
 80080f6:	bf08      	it	eq
 80080f8:	68ec      	ldreq	r4, [r5, #12]
 80080fa:	e7ca      	b.n	8008092 <__swbuf_r+0x1a>
 80080fc:	4621      	mov	r1, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 f80c 	bl	800811c <__swsetup_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	d0cb      	beq.n	80080a0 <__swbuf_r+0x28>
 8008108:	f04f 37ff 	mov.w	r7, #4294967295
 800810c:	e7ea      	b.n	80080e4 <__swbuf_r+0x6c>
 800810e:	bf00      	nop
 8008110:	08008ec8 	.word	0x08008ec8
 8008114:	08008ee8 	.word	0x08008ee8
 8008118:	08008ea8 	.word	0x08008ea8

0800811c <__swsetup_r>:
 800811c:	4b32      	ldr	r3, [pc, #200]	; (80081e8 <__swsetup_r+0xcc>)
 800811e:	b570      	push	{r4, r5, r6, lr}
 8008120:	681d      	ldr	r5, [r3, #0]
 8008122:	4606      	mov	r6, r0
 8008124:	460c      	mov	r4, r1
 8008126:	b125      	cbz	r5, 8008132 <__swsetup_r+0x16>
 8008128:	69ab      	ldr	r3, [r5, #24]
 800812a:	b913      	cbnz	r3, 8008132 <__swsetup_r+0x16>
 800812c:	4628      	mov	r0, r5
 800812e:	f000 f97b 	bl	8008428 <__sinit>
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <__swsetup_r+0xd0>)
 8008134:	429c      	cmp	r4, r3
 8008136:	d10f      	bne.n	8008158 <__swsetup_r+0x3c>
 8008138:	686c      	ldr	r4, [r5, #4]
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008140:	0719      	lsls	r1, r3, #28
 8008142:	d42c      	bmi.n	800819e <__swsetup_r+0x82>
 8008144:	06dd      	lsls	r5, r3, #27
 8008146:	d411      	bmi.n	800816c <__swsetup_r+0x50>
 8008148:	2309      	movs	r3, #9
 800814a:	6033      	str	r3, [r6, #0]
 800814c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	e03e      	b.n	80081d6 <__swsetup_r+0xba>
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <__swsetup_r+0xd4>)
 800815a:	429c      	cmp	r4, r3
 800815c:	d101      	bne.n	8008162 <__swsetup_r+0x46>
 800815e:	68ac      	ldr	r4, [r5, #8]
 8008160:	e7eb      	b.n	800813a <__swsetup_r+0x1e>
 8008162:	4b24      	ldr	r3, [pc, #144]	; (80081f4 <__swsetup_r+0xd8>)
 8008164:	429c      	cmp	r4, r3
 8008166:	bf08      	it	eq
 8008168:	68ec      	ldreq	r4, [r5, #12]
 800816a:	e7e6      	b.n	800813a <__swsetup_r+0x1e>
 800816c:	0758      	lsls	r0, r3, #29
 800816e:	d512      	bpl.n	8008196 <__swsetup_r+0x7a>
 8008170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008172:	b141      	cbz	r1, 8008186 <__swsetup_r+0x6a>
 8008174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008178:	4299      	cmp	r1, r3
 800817a:	d002      	beq.n	8008182 <__swsetup_r+0x66>
 800817c:	4630      	mov	r0, r6
 800817e:	f000 fa67 	bl	8008650 <_free_r>
 8008182:	2300      	movs	r3, #0
 8008184:	6363      	str	r3, [r4, #52]	; 0x34
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800818c:	81a3      	strh	r3, [r4, #12]
 800818e:	2300      	movs	r3, #0
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f043 0308 	orr.w	r3, r3, #8
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	b94b      	cbnz	r3, 80081b6 <__swsetup_r+0x9a>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ac:	d003      	beq.n	80081b6 <__swsetup_r+0x9a>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f9ff 	bl	80085b4 <__smakebuf_r>
 80081b6:	89a0      	ldrh	r0, [r4, #12]
 80081b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081bc:	f010 0301 	ands.w	r3, r0, #1
 80081c0:	d00a      	beq.n	80081d8 <__swsetup_r+0xbc>
 80081c2:	2300      	movs	r3, #0
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	6963      	ldr	r3, [r4, #20]
 80081c8:	425b      	negs	r3, r3
 80081ca:	61a3      	str	r3, [r4, #24]
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	b943      	cbnz	r3, 80081e2 <__swsetup_r+0xc6>
 80081d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081d4:	d1ba      	bne.n	800814c <__swsetup_r+0x30>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	0781      	lsls	r1, r0, #30
 80081da:	bf58      	it	pl
 80081dc:	6963      	ldrpl	r3, [r4, #20]
 80081de:	60a3      	str	r3, [r4, #8]
 80081e0:	e7f4      	b.n	80081cc <__swsetup_r+0xb0>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e7f7      	b.n	80081d6 <__swsetup_r+0xba>
 80081e6:	bf00      	nop
 80081e8:	20000020 	.word	0x20000020
 80081ec:	08008ec8 	.word	0x08008ec8
 80081f0:	08008ee8 	.word	0x08008ee8
 80081f4:	08008ea8 	.word	0x08008ea8

080081f8 <__sflush_r>:
 80081f8:	898a      	ldrh	r2, [r1, #12]
 80081fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fe:	4605      	mov	r5, r0
 8008200:	0710      	lsls	r0, r2, #28
 8008202:	460c      	mov	r4, r1
 8008204:	d458      	bmi.n	80082b8 <__sflush_r+0xc0>
 8008206:	684b      	ldr	r3, [r1, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	dc05      	bgt.n	8008218 <__sflush_r+0x20>
 800820c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	dc02      	bgt.n	8008218 <__sflush_r+0x20>
 8008212:	2000      	movs	r0, #0
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800821a:	2e00      	cmp	r6, #0
 800821c:	d0f9      	beq.n	8008212 <__sflush_r+0x1a>
 800821e:	2300      	movs	r3, #0
 8008220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008224:	682f      	ldr	r7, [r5, #0]
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	d032      	beq.n	8008290 <__sflush_r+0x98>
 800822a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	075a      	lsls	r2, r3, #29
 8008230:	d505      	bpl.n	800823e <__sflush_r+0x46>
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	1ac0      	subs	r0, r0, r3
 8008236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008238:	b10b      	cbz	r3, 800823e <__sflush_r+0x46>
 800823a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800823c:	1ac0      	subs	r0, r0, r3
 800823e:	2300      	movs	r3, #0
 8008240:	4602      	mov	r2, r0
 8008242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008244:	4628      	mov	r0, r5
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	47b0      	blx	r6
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	d106      	bne.n	800825e <__sflush_r+0x66>
 8008250:	6829      	ldr	r1, [r5, #0]
 8008252:	291d      	cmp	r1, #29
 8008254:	d82c      	bhi.n	80082b0 <__sflush_r+0xb8>
 8008256:	4a29      	ldr	r2, [pc, #164]	; (80082fc <__sflush_r+0x104>)
 8008258:	40ca      	lsrs	r2, r1
 800825a:	07d6      	lsls	r6, r2, #31
 800825c:	d528      	bpl.n	80082b0 <__sflush_r+0xb8>
 800825e:	2200      	movs	r2, #0
 8008260:	04d9      	lsls	r1, r3, #19
 8008262:	6062      	str	r2, [r4, #4]
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	6022      	str	r2, [r4, #0]
 8008268:	d504      	bpl.n	8008274 <__sflush_r+0x7c>
 800826a:	1c42      	adds	r2, r0, #1
 800826c:	d101      	bne.n	8008272 <__sflush_r+0x7a>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	b903      	cbnz	r3, 8008274 <__sflush_r+0x7c>
 8008272:	6560      	str	r0, [r4, #84]	; 0x54
 8008274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008276:	602f      	str	r7, [r5, #0]
 8008278:	2900      	cmp	r1, #0
 800827a:	d0ca      	beq.n	8008212 <__sflush_r+0x1a>
 800827c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008280:	4299      	cmp	r1, r3
 8008282:	d002      	beq.n	800828a <__sflush_r+0x92>
 8008284:	4628      	mov	r0, r5
 8008286:	f000 f9e3 	bl	8008650 <_free_r>
 800828a:	2000      	movs	r0, #0
 800828c:	6360      	str	r0, [r4, #52]	; 0x34
 800828e:	e7c1      	b.n	8008214 <__sflush_r+0x1c>
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	2301      	movs	r3, #1
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	1c41      	adds	r1, r0, #1
 800829a:	d1c7      	bne.n	800822c <__sflush_r+0x34>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c4      	beq.n	800822c <__sflush_r+0x34>
 80082a2:	2b1d      	cmp	r3, #29
 80082a4:	d001      	beq.n	80082aa <__sflush_r+0xb2>
 80082a6:	2b16      	cmp	r3, #22
 80082a8:	d101      	bne.n	80082ae <__sflush_r+0xb6>
 80082aa:	602f      	str	r7, [r5, #0]
 80082ac:	e7b1      	b.n	8008212 <__sflush_r+0x1a>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e7ad      	b.n	8008214 <__sflush_r+0x1c>
 80082b8:	690f      	ldr	r7, [r1, #16]
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d0a9      	beq.n	8008212 <__sflush_r+0x1a>
 80082be:	0793      	lsls	r3, r2, #30
 80082c0:	680e      	ldr	r6, [r1, #0]
 80082c2:	600f      	str	r7, [r1, #0]
 80082c4:	bf0c      	ite	eq
 80082c6:	694b      	ldreq	r3, [r1, #20]
 80082c8:	2300      	movne	r3, #0
 80082ca:	eba6 0807 	sub.w	r8, r6, r7
 80082ce:	608b      	str	r3, [r1, #8]
 80082d0:	f1b8 0f00 	cmp.w	r8, #0
 80082d4:	dd9d      	ble.n	8008212 <__sflush_r+0x1a>
 80082d6:	4643      	mov	r3, r8
 80082d8:	463a      	mov	r2, r7
 80082da:	6a21      	ldr	r1, [r4, #32]
 80082dc:	4628      	mov	r0, r5
 80082de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082e0:	47b0      	blx	r6
 80082e2:	2800      	cmp	r0, #0
 80082e4:	dc06      	bgt.n	80082f4 <__sflush_r+0xfc>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	e78f      	b.n	8008214 <__sflush_r+0x1c>
 80082f4:	4407      	add	r7, r0
 80082f6:	eba8 0800 	sub.w	r8, r8, r0
 80082fa:	e7e9      	b.n	80082d0 <__sflush_r+0xd8>
 80082fc:	20400001 	.word	0x20400001

08008300 <_fflush_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	690b      	ldr	r3, [r1, #16]
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	b913      	cbnz	r3, 8008310 <_fflush_r+0x10>
 800830a:	2500      	movs	r5, #0
 800830c:	4628      	mov	r0, r5
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	b118      	cbz	r0, 800831a <_fflush_r+0x1a>
 8008312:	6983      	ldr	r3, [r0, #24]
 8008314:	b90b      	cbnz	r3, 800831a <_fflush_r+0x1a>
 8008316:	f000 f887 	bl	8008428 <__sinit>
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <_fflush_r+0x6c>)
 800831c:	429c      	cmp	r4, r3
 800831e:	d11b      	bne.n	8008358 <_fflush_r+0x58>
 8008320:	686c      	ldr	r4, [r5, #4]
 8008322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0ef      	beq.n	800830a <_fflush_r+0xa>
 800832a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800832c:	07d0      	lsls	r0, r2, #31
 800832e:	d404      	bmi.n	800833a <_fflush_r+0x3a>
 8008330:	0599      	lsls	r1, r3, #22
 8008332:	d402      	bmi.n	800833a <_fflush_r+0x3a>
 8008334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008336:	f000 f915 	bl	8008564 <__retarget_lock_acquire_recursive>
 800833a:	4628      	mov	r0, r5
 800833c:	4621      	mov	r1, r4
 800833e:	f7ff ff5b 	bl	80081f8 <__sflush_r>
 8008342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008344:	4605      	mov	r5, r0
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d4e0      	bmi.n	800830c <_fflush_r+0xc>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	059b      	lsls	r3, r3, #22
 800834e:	d4dd      	bmi.n	800830c <_fflush_r+0xc>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f000 f908 	bl	8008566 <__retarget_lock_release_recursive>
 8008356:	e7d9      	b.n	800830c <_fflush_r+0xc>
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <_fflush_r+0x70>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <_fflush_r+0x62>
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	e7df      	b.n	8008322 <_fflush_r+0x22>
 8008362:	4b04      	ldr	r3, [pc, #16]	; (8008374 <_fflush_r+0x74>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68ec      	ldreq	r4, [r5, #12]
 800836a:	e7da      	b.n	8008322 <_fflush_r+0x22>
 800836c:	08008ec8 	.word	0x08008ec8
 8008370:	08008ee8 	.word	0x08008ee8
 8008374:	08008ea8 	.word	0x08008ea8

08008378 <std>:
 8008378:	2300      	movs	r3, #0
 800837a:	b510      	push	{r4, lr}
 800837c:	4604      	mov	r4, r0
 800837e:	6083      	str	r3, [r0, #8]
 8008380:	8181      	strh	r1, [r0, #12]
 8008382:	4619      	mov	r1, r3
 8008384:	6643      	str	r3, [r0, #100]	; 0x64
 8008386:	81c2      	strh	r2, [r0, #14]
 8008388:	2208      	movs	r2, #8
 800838a:	6183      	str	r3, [r0, #24]
 800838c:	e9c0 3300 	strd	r3, r3, [r0]
 8008390:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008394:	305c      	adds	r0, #92	; 0x5c
 8008396:	f7ff fb3f 	bl	8007a18 <memset>
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <std+0x38>)
 800839c:	6224      	str	r4, [r4, #32]
 800839e:	6263      	str	r3, [r4, #36]	; 0x24
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <std+0x3c>)
 80083a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a4:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <std+0x40>)
 80083a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <std+0x44>)
 80083aa:	6323      	str	r3, [r4, #48]	; 0x30
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	080088c1 	.word	0x080088c1
 80083b4:	080088e3 	.word	0x080088e3
 80083b8:	0800891b 	.word	0x0800891b
 80083bc:	0800893f 	.word	0x0800893f

080083c0 <_cleanup_r>:
 80083c0:	4901      	ldr	r1, [pc, #4]	; (80083c8 <_cleanup_r+0x8>)
 80083c2:	f000 b8af 	b.w	8008524 <_fwalk_reent>
 80083c6:	bf00      	nop
 80083c8:	08008301 	.word	0x08008301

080083cc <__sfmoreglue>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	2268      	movs	r2, #104	; 0x68
 80083d0:	1e4d      	subs	r5, r1, #1
 80083d2:	460e      	mov	r6, r1
 80083d4:	4355      	muls	r5, r2
 80083d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083da:	f000 f9a5 	bl	8008728 <_malloc_r>
 80083de:	4604      	mov	r4, r0
 80083e0:	b140      	cbz	r0, 80083f4 <__sfmoreglue+0x28>
 80083e2:	2100      	movs	r1, #0
 80083e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083e8:	e9c0 1600 	strd	r1, r6, [r0]
 80083ec:	300c      	adds	r0, #12
 80083ee:	60a0      	str	r0, [r4, #8]
 80083f0:	f7ff fb12 	bl	8007a18 <memset>
 80083f4:	4620      	mov	r0, r4
 80083f6:	bd70      	pop	{r4, r5, r6, pc}

080083f8 <__sfp_lock_acquire>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__sfp_lock_acquire+0x8>)
 80083fa:	f000 b8b3 	b.w	8008564 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20001919 	.word	0x20001919

08008404 <__sfp_lock_release>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__sfp_lock_release+0x8>)
 8008406:	f000 b8ae 	b.w	8008566 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20001919 	.word	0x20001919

08008410 <__sinit_lock_acquire>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__sinit_lock_acquire+0x8>)
 8008412:	f000 b8a7 	b.w	8008564 <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	2000191a 	.word	0x2000191a

0800841c <__sinit_lock_release>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__sinit_lock_release+0x8>)
 800841e:	f000 b8a2 	b.w	8008566 <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	2000191a 	.word	0x2000191a

08008428 <__sinit>:
 8008428:	b510      	push	{r4, lr}
 800842a:	4604      	mov	r4, r0
 800842c:	f7ff fff0 	bl	8008410 <__sinit_lock_acquire>
 8008430:	69a3      	ldr	r3, [r4, #24]
 8008432:	b11b      	cbz	r3, 800843c <__sinit+0x14>
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f7ff bff0 	b.w	800841c <__sinit_lock_release>
 800843c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008440:	6523      	str	r3, [r4, #80]	; 0x50
 8008442:	4620      	mov	r0, r4
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <__sinit+0x68>)
 8008446:	4a13      	ldr	r2, [pc, #76]	; (8008494 <__sinit+0x6c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	62a2      	str	r2, [r4, #40]	; 0x28
 800844c:	42a3      	cmp	r3, r4
 800844e:	bf04      	itt	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	61a3      	streq	r3, [r4, #24]
 8008454:	f000 f820 	bl	8008498 <__sfp>
 8008458:	6060      	str	r0, [r4, #4]
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f81c 	bl	8008498 <__sfp>
 8008460:	60a0      	str	r0, [r4, #8]
 8008462:	4620      	mov	r0, r4
 8008464:	f000 f818 	bl	8008498 <__sfp>
 8008468:	2200      	movs	r2, #0
 800846a:	2104      	movs	r1, #4
 800846c:	60e0      	str	r0, [r4, #12]
 800846e:	6860      	ldr	r0, [r4, #4]
 8008470:	f7ff ff82 	bl	8008378 <std>
 8008474:	2201      	movs	r2, #1
 8008476:	2109      	movs	r1, #9
 8008478:	68a0      	ldr	r0, [r4, #8]
 800847a:	f7ff ff7d 	bl	8008378 <std>
 800847e:	2202      	movs	r2, #2
 8008480:	2112      	movs	r1, #18
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	f7ff ff78 	bl	8008378 <std>
 8008488:	2301      	movs	r3, #1
 800848a:	61a3      	str	r3, [r4, #24]
 800848c:	e7d2      	b.n	8008434 <__sinit+0xc>
 800848e:	bf00      	nop
 8008490:	08008e70 	.word	0x08008e70
 8008494:	080083c1 	.word	0x080083c1

08008498 <__sfp>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	4607      	mov	r7, r0
 800849c:	f7ff ffac 	bl	80083f8 <__sfp_lock_acquire>
 80084a0:	4b1e      	ldr	r3, [pc, #120]	; (800851c <__sfp+0x84>)
 80084a2:	681e      	ldr	r6, [r3, #0]
 80084a4:	69b3      	ldr	r3, [r6, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__sfp+0x16>
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff ffbd 	bl	8008428 <__sinit>
 80084ae:	3648      	adds	r6, #72	; 0x48
 80084b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	d503      	bpl.n	80084c0 <__sfp+0x28>
 80084b8:	6833      	ldr	r3, [r6, #0]
 80084ba:	b30b      	cbz	r3, 8008500 <__sfp+0x68>
 80084bc:	6836      	ldr	r6, [r6, #0]
 80084be:	e7f7      	b.n	80084b0 <__sfp+0x18>
 80084c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084c4:	b9d5      	cbnz	r5, 80084fc <__sfp+0x64>
 80084c6:	4b16      	ldr	r3, [pc, #88]	; (8008520 <__sfp+0x88>)
 80084c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084cc:	6665      	str	r5, [r4, #100]	; 0x64
 80084ce:	60e3      	str	r3, [r4, #12]
 80084d0:	f000 f847 	bl	8008562 <__retarget_lock_init_recursive>
 80084d4:	f7ff ff96 	bl	8008404 <__sfp_lock_release>
 80084d8:	2208      	movs	r2, #8
 80084da:	4629      	mov	r1, r5
 80084dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084e0:	6025      	str	r5, [r4, #0]
 80084e2:	61a5      	str	r5, [r4, #24]
 80084e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084ec:	f7ff fa94 	bl	8007a18 <memset>
 80084f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084f8:	4620      	mov	r0, r4
 80084fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084fc:	3468      	adds	r4, #104	; 0x68
 80084fe:	e7d9      	b.n	80084b4 <__sfp+0x1c>
 8008500:	2104      	movs	r1, #4
 8008502:	4638      	mov	r0, r7
 8008504:	f7ff ff62 	bl	80083cc <__sfmoreglue>
 8008508:	4604      	mov	r4, r0
 800850a:	6030      	str	r0, [r6, #0]
 800850c:	2800      	cmp	r0, #0
 800850e:	d1d5      	bne.n	80084bc <__sfp+0x24>
 8008510:	f7ff ff78 	bl	8008404 <__sfp_lock_release>
 8008514:	230c      	movs	r3, #12
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	e7ee      	b.n	80084f8 <__sfp+0x60>
 800851a:	bf00      	nop
 800851c:	08008e70 	.word	0x08008e70
 8008520:	ffff0001 	.word	0xffff0001

08008524 <_fwalk_reent>:
 8008524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008528:	4606      	mov	r6, r0
 800852a:	4688      	mov	r8, r1
 800852c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008530:	2700      	movs	r7, #0
 8008532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008536:	f1b9 0901 	subs.w	r9, r9, #1
 800853a:	d505      	bpl.n	8008548 <_fwalk_reent+0x24>
 800853c:	6824      	ldr	r4, [r4, #0]
 800853e:	2c00      	cmp	r4, #0
 8008540:	d1f7      	bne.n	8008532 <_fwalk_reent+0xe>
 8008542:	4638      	mov	r0, r7
 8008544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008548:	89ab      	ldrh	r3, [r5, #12]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d907      	bls.n	800855e <_fwalk_reent+0x3a>
 800854e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008552:	3301      	adds	r3, #1
 8008554:	d003      	beq.n	800855e <_fwalk_reent+0x3a>
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	47c0      	blx	r8
 800855c:	4307      	orrs	r7, r0
 800855e:	3568      	adds	r5, #104	; 0x68
 8008560:	e7e9      	b.n	8008536 <_fwalk_reent+0x12>

08008562 <__retarget_lock_init_recursive>:
 8008562:	4770      	bx	lr

08008564 <__retarget_lock_acquire_recursive>:
 8008564:	4770      	bx	lr

08008566 <__retarget_lock_release_recursive>:
 8008566:	4770      	bx	lr

08008568 <__swhatbuf_r>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	460e      	mov	r6, r1
 800856c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008570:	b096      	sub	sp, #88	; 0x58
 8008572:	4614      	mov	r4, r2
 8008574:	2900      	cmp	r1, #0
 8008576:	461d      	mov	r5, r3
 8008578:	da08      	bge.n	800858c <__swhatbuf_r+0x24>
 800857a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	602a      	str	r2, [r5, #0]
 8008582:	061a      	lsls	r2, r3, #24
 8008584:	d410      	bmi.n	80085a8 <__swhatbuf_r+0x40>
 8008586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800858a:	e00e      	b.n	80085aa <__swhatbuf_r+0x42>
 800858c:	466a      	mov	r2, sp
 800858e:	f000 f9fd 	bl	800898c <_fstat_r>
 8008592:	2800      	cmp	r0, #0
 8008594:	dbf1      	blt.n	800857a <__swhatbuf_r+0x12>
 8008596:	9a01      	ldr	r2, [sp, #4]
 8008598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800859c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085a0:	425a      	negs	r2, r3
 80085a2:	415a      	adcs	r2, r3
 80085a4:	602a      	str	r2, [r5, #0]
 80085a6:	e7ee      	b.n	8008586 <__swhatbuf_r+0x1e>
 80085a8:	2340      	movs	r3, #64	; 0x40
 80085aa:	2000      	movs	r0, #0
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	b016      	add	sp, #88	; 0x58
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080085b4 <__smakebuf_r>:
 80085b4:	898b      	ldrh	r3, [r1, #12]
 80085b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085b8:	079d      	lsls	r5, r3, #30
 80085ba:	4606      	mov	r6, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	d507      	bpl.n	80085d0 <__smakebuf_r+0x1c>
 80085c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	6123      	str	r3, [r4, #16]
 80085c8:	2301      	movs	r3, #1
 80085ca:	6163      	str	r3, [r4, #20]
 80085cc:	b002      	add	sp, #8
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	ab01      	add	r3, sp, #4
 80085d2:	466a      	mov	r2, sp
 80085d4:	f7ff ffc8 	bl	8008568 <__swhatbuf_r>
 80085d8:	9900      	ldr	r1, [sp, #0]
 80085da:	4605      	mov	r5, r0
 80085dc:	4630      	mov	r0, r6
 80085de:	f000 f8a3 	bl	8008728 <_malloc_r>
 80085e2:	b948      	cbnz	r0, 80085f8 <__smakebuf_r+0x44>
 80085e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e8:	059a      	lsls	r2, r3, #22
 80085ea:	d4ef      	bmi.n	80085cc <__smakebuf_r+0x18>
 80085ec:	f023 0303 	bic.w	r3, r3, #3
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	e7e3      	b.n	80085c0 <__smakebuf_r+0xc>
 80085f8:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <__smakebuf_r+0x7c>)
 80085fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	6020      	str	r0, [r4, #0]
 8008600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008604:	6120      	str	r0, [r4, #16]
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	9b00      	ldr	r3, [sp, #0]
 800860a:	6163      	str	r3, [r4, #20]
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	b15b      	cbz	r3, 8008628 <__smakebuf_r+0x74>
 8008610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008614:	4630      	mov	r0, r6
 8008616:	f000 f9cb 	bl	80089b0 <_isatty_r>
 800861a:	b128      	cbz	r0, 8008628 <__smakebuf_r+0x74>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	89a0      	ldrh	r0, [r4, #12]
 800862a:	4305      	orrs	r5, r0
 800862c:	81a5      	strh	r5, [r4, #12]
 800862e:	e7cd      	b.n	80085cc <__smakebuf_r+0x18>
 8008630:	080083c1 	.word	0x080083c1

08008634 <memchr>:
 8008634:	b2c9      	uxtb	r1, r1
 8008636:	4402      	add	r2, r0
 8008638:	b510      	push	{r4, lr}
 800863a:	4290      	cmp	r0, r2
 800863c:	4603      	mov	r3, r0
 800863e:	d101      	bne.n	8008644 <memchr+0x10>
 8008640:	2300      	movs	r3, #0
 8008642:	e003      	b.n	800864c <memchr+0x18>
 8008644:	781c      	ldrb	r4, [r3, #0]
 8008646:	3001      	adds	r0, #1
 8008648:	428c      	cmp	r4, r1
 800864a:	d1f6      	bne.n	800863a <memchr+0x6>
 800864c:	4618      	mov	r0, r3
 800864e:	bd10      	pop	{r4, pc}

08008650 <_free_r>:
 8008650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008652:	2900      	cmp	r1, #0
 8008654:	d043      	beq.n	80086de <_free_r+0x8e>
 8008656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865a:	1f0c      	subs	r4, r1, #4
 800865c:	9001      	str	r0, [sp, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfb8      	it	lt
 8008662:	18e4      	addlt	r4, r4, r3
 8008664:	f000 f9c6 	bl	80089f4 <__malloc_lock>
 8008668:	4a1e      	ldr	r2, [pc, #120]	; (80086e4 <_free_r+0x94>)
 800866a:	9801      	ldr	r0, [sp, #4]
 800866c:	6813      	ldr	r3, [r2, #0]
 800866e:	b933      	cbnz	r3, 800867e <_free_r+0x2e>
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	6014      	str	r4, [r2, #0]
 8008674:	b003      	add	sp, #12
 8008676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800867a:	f000 b9c1 	b.w	8008a00 <__malloc_unlock>
 800867e:	42a3      	cmp	r3, r4
 8008680:	d908      	bls.n	8008694 <_free_r+0x44>
 8008682:	6825      	ldr	r5, [r4, #0]
 8008684:	1961      	adds	r1, r4, r5
 8008686:	428b      	cmp	r3, r1
 8008688:	bf01      	itttt	eq
 800868a:	6819      	ldreq	r1, [r3, #0]
 800868c:	685b      	ldreq	r3, [r3, #4]
 800868e:	1949      	addeq	r1, r1, r5
 8008690:	6021      	streq	r1, [r4, #0]
 8008692:	e7ed      	b.n	8008670 <_free_r+0x20>
 8008694:	461a      	mov	r2, r3
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	b10b      	cbz	r3, 800869e <_free_r+0x4e>
 800869a:	42a3      	cmp	r3, r4
 800869c:	d9fa      	bls.n	8008694 <_free_r+0x44>
 800869e:	6811      	ldr	r1, [r2, #0]
 80086a0:	1855      	adds	r5, r2, r1
 80086a2:	42a5      	cmp	r5, r4
 80086a4:	d10b      	bne.n	80086be <_free_r+0x6e>
 80086a6:	6824      	ldr	r4, [r4, #0]
 80086a8:	4421      	add	r1, r4
 80086aa:	1854      	adds	r4, r2, r1
 80086ac:	6011      	str	r1, [r2, #0]
 80086ae:	42a3      	cmp	r3, r4
 80086b0:	d1e0      	bne.n	8008674 <_free_r+0x24>
 80086b2:	681c      	ldr	r4, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	4421      	add	r1, r4
 80086b8:	6053      	str	r3, [r2, #4]
 80086ba:	6011      	str	r1, [r2, #0]
 80086bc:	e7da      	b.n	8008674 <_free_r+0x24>
 80086be:	d902      	bls.n	80086c6 <_free_r+0x76>
 80086c0:	230c      	movs	r3, #12
 80086c2:	6003      	str	r3, [r0, #0]
 80086c4:	e7d6      	b.n	8008674 <_free_r+0x24>
 80086c6:	6825      	ldr	r5, [r4, #0]
 80086c8:	1961      	adds	r1, r4, r5
 80086ca:	428b      	cmp	r3, r1
 80086cc:	bf02      	ittt	eq
 80086ce:	6819      	ldreq	r1, [r3, #0]
 80086d0:	685b      	ldreq	r3, [r3, #4]
 80086d2:	1949      	addeq	r1, r1, r5
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	bf08      	it	eq
 80086d8:	6021      	streq	r1, [r4, #0]
 80086da:	6054      	str	r4, [r2, #4]
 80086dc:	e7ca      	b.n	8008674 <_free_r+0x24>
 80086de:	b003      	add	sp, #12
 80086e0:	bd30      	pop	{r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	2000191c 	.word	0x2000191c

080086e8 <sbrk_aligned>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4e0e      	ldr	r6, [pc, #56]	; (8008724 <sbrk_aligned+0x3c>)
 80086ec:	460c      	mov	r4, r1
 80086ee:	4605      	mov	r5, r0
 80086f0:	6831      	ldr	r1, [r6, #0]
 80086f2:	b911      	cbnz	r1, 80086fa <sbrk_aligned+0x12>
 80086f4:	f000 f8d4 	bl	80088a0 <_sbrk_r>
 80086f8:	6030      	str	r0, [r6, #0]
 80086fa:	4621      	mov	r1, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 f8cf 	bl	80088a0 <_sbrk_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d00a      	beq.n	800871c <sbrk_aligned+0x34>
 8008706:	1cc4      	adds	r4, r0, #3
 8008708:	f024 0403 	bic.w	r4, r4, #3
 800870c:	42a0      	cmp	r0, r4
 800870e:	d007      	beq.n	8008720 <sbrk_aligned+0x38>
 8008710:	1a21      	subs	r1, r4, r0
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f8c4 	bl	80088a0 <_sbrk_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d101      	bne.n	8008720 <sbrk_aligned+0x38>
 800871c:	f04f 34ff 	mov.w	r4, #4294967295
 8008720:	4620      	mov	r0, r4
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	20001920 	.word	0x20001920

08008728 <_malloc_r>:
 8008728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872c:	1ccd      	adds	r5, r1, #3
 800872e:	4607      	mov	r7, r0
 8008730:	f025 0503 	bic.w	r5, r5, #3
 8008734:	3508      	adds	r5, #8
 8008736:	2d0c      	cmp	r5, #12
 8008738:	bf38      	it	cc
 800873a:	250c      	movcc	r5, #12
 800873c:	2d00      	cmp	r5, #0
 800873e:	db01      	blt.n	8008744 <_malloc_r+0x1c>
 8008740:	42a9      	cmp	r1, r5
 8008742:	d905      	bls.n	8008750 <_malloc_r+0x28>
 8008744:	230c      	movs	r3, #12
 8008746:	2600      	movs	r6, #0
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	4630      	mov	r0, r6
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	4e2e      	ldr	r6, [pc, #184]	; (800880c <_malloc_r+0xe4>)
 8008752:	f000 f94f 	bl	80089f4 <__malloc_lock>
 8008756:	6833      	ldr	r3, [r6, #0]
 8008758:	461c      	mov	r4, r3
 800875a:	bb34      	cbnz	r4, 80087aa <_malloc_r+0x82>
 800875c:	4629      	mov	r1, r5
 800875e:	4638      	mov	r0, r7
 8008760:	f7ff ffc2 	bl	80086e8 <sbrk_aligned>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	4604      	mov	r4, r0
 8008768:	d14d      	bne.n	8008806 <_malloc_r+0xde>
 800876a:	6834      	ldr	r4, [r6, #0]
 800876c:	4626      	mov	r6, r4
 800876e:	2e00      	cmp	r6, #0
 8008770:	d140      	bne.n	80087f4 <_malloc_r+0xcc>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	4631      	mov	r1, r6
 8008776:	4638      	mov	r0, r7
 8008778:	eb04 0803 	add.w	r8, r4, r3
 800877c:	f000 f890 	bl	80088a0 <_sbrk_r>
 8008780:	4580      	cmp	r8, r0
 8008782:	d13a      	bne.n	80087fa <_malloc_r+0xd2>
 8008784:	6821      	ldr	r1, [r4, #0]
 8008786:	3503      	adds	r5, #3
 8008788:	4638      	mov	r0, r7
 800878a:	1a6d      	subs	r5, r5, r1
 800878c:	f025 0503 	bic.w	r5, r5, #3
 8008790:	3508      	adds	r5, #8
 8008792:	2d0c      	cmp	r5, #12
 8008794:	bf38      	it	cc
 8008796:	250c      	movcc	r5, #12
 8008798:	4629      	mov	r1, r5
 800879a:	f7ff ffa5 	bl	80086e8 <sbrk_aligned>
 800879e:	3001      	adds	r0, #1
 80087a0:	d02b      	beq.n	80087fa <_malloc_r+0xd2>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	442b      	add	r3, r5
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	e00e      	b.n	80087c8 <_malloc_r+0xa0>
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	1b52      	subs	r2, r2, r5
 80087ae:	d41e      	bmi.n	80087ee <_malloc_r+0xc6>
 80087b0:	2a0b      	cmp	r2, #11
 80087b2:	d916      	bls.n	80087e2 <_malloc_r+0xba>
 80087b4:	1961      	adds	r1, r4, r5
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	6025      	str	r5, [r4, #0]
 80087ba:	bf18      	it	ne
 80087bc:	6059      	strne	r1, [r3, #4]
 80087be:	6863      	ldr	r3, [r4, #4]
 80087c0:	bf08      	it	eq
 80087c2:	6031      	streq	r1, [r6, #0]
 80087c4:	5162      	str	r2, [r4, r5]
 80087c6:	604b      	str	r3, [r1, #4]
 80087c8:	f104 060b 	add.w	r6, r4, #11
 80087cc:	4638      	mov	r0, r7
 80087ce:	f000 f917 	bl	8008a00 <__malloc_unlock>
 80087d2:	1d23      	adds	r3, r4, #4
 80087d4:	f026 0607 	bic.w	r6, r6, #7
 80087d8:	1af2      	subs	r2, r6, r3
 80087da:	d0b6      	beq.n	800874a <_malloc_r+0x22>
 80087dc:	1b9b      	subs	r3, r3, r6
 80087de:	50a3      	str	r3, [r4, r2]
 80087e0:	e7b3      	b.n	800874a <_malloc_r+0x22>
 80087e2:	6862      	ldr	r2, [r4, #4]
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	bf0c      	ite	eq
 80087e8:	6032      	streq	r2, [r6, #0]
 80087ea:	605a      	strne	r2, [r3, #4]
 80087ec:	e7ec      	b.n	80087c8 <_malloc_r+0xa0>
 80087ee:	4623      	mov	r3, r4
 80087f0:	6864      	ldr	r4, [r4, #4]
 80087f2:	e7b2      	b.n	800875a <_malloc_r+0x32>
 80087f4:	4634      	mov	r4, r6
 80087f6:	6876      	ldr	r6, [r6, #4]
 80087f8:	e7b9      	b.n	800876e <_malloc_r+0x46>
 80087fa:	230c      	movs	r3, #12
 80087fc:	4638      	mov	r0, r7
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	f000 f8fe 	bl	8008a00 <__malloc_unlock>
 8008804:	e7a1      	b.n	800874a <_malloc_r+0x22>
 8008806:	6025      	str	r5, [r4, #0]
 8008808:	e7de      	b.n	80087c8 <_malloc_r+0xa0>
 800880a:	bf00      	nop
 800880c:	2000191c 	.word	0x2000191c

08008810 <_putc_r>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	460d      	mov	r5, r1
 8008814:	4614      	mov	r4, r2
 8008816:	4606      	mov	r6, r0
 8008818:	b118      	cbz	r0, 8008822 <_putc_r+0x12>
 800881a:	6983      	ldr	r3, [r0, #24]
 800881c:	b90b      	cbnz	r3, 8008822 <_putc_r+0x12>
 800881e:	f7ff fe03 	bl	8008428 <__sinit>
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <_putc_r+0x84>)
 8008824:	429c      	cmp	r4, r3
 8008826:	d124      	bne.n	8008872 <_putc_r+0x62>
 8008828:	6874      	ldr	r4, [r6, #4]
 800882a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800882c:	07d8      	lsls	r0, r3, #31
 800882e:	d405      	bmi.n	800883c <_putc_r+0x2c>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	0599      	lsls	r1, r3, #22
 8008834:	d402      	bmi.n	800883c <_putc_r+0x2c>
 8008836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008838:	f7ff fe94 	bl	8008564 <__retarget_lock_acquire_recursive>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	3b01      	subs	r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	da05      	bge.n	8008852 <_putc_r+0x42>
 8008846:	69a2      	ldr	r2, [r4, #24]
 8008848:	4293      	cmp	r3, r2
 800884a:	db1c      	blt.n	8008886 <_putc_r+0x76>
 800884c:	b2eb      	uxtb	r3, r5
 800884e:	2b0a      	cmp	r3, #10
 8008850:	d019      	beq.n	8008886 <_putc_r+0x76>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	701d      	strb	r5, [r3, #0]
 800885a:	b2ed      	uxtb	r5, r5
 800885c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800885e:	07da      	lsls	r2, r3, #31
 8008860:	d405      	bmi.n	800886e <_putc_r+0x5e>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	059b      	lsls	r3, r3, #22
 8008866:	d402      	bmi.n	800886e <_putc_r+0x5e>
 8008868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886a:	f7ff fe7c 	bl	8008566 <__retarget_lock_release_recursive>
 800886e:	4628      	mov	r0, r5
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	4b09      	ldr	r3, [pc, #36]	; (8008898 <_putc_r+0x88>)
 8008874:	429c      	cmp	r4, r3
 8008876:	d101      	bne.n	800887c <_putc_r+0x6c>
 8008878:	68b4      	ldr	r4, [r6, #8]
 800887a:	e7d6      	b.n	800882a <_putc_r+0x1a>
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <_putc_r+0x8c>)
 800887e:	429c      	cmp	r4, r3
 8008880:	bf08      	it	eq
 8008882:	68f4      	ldreq	r4, [r6, #12]
 8008884:	e7d1      	b.n	800882a <_putc_r+0x1a>
 8008886:	4629      	mov	r1, r5
 8008888:	4622      	mov	r2, r4
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff fbf4 	bl	8008078 <__swbuf_r>
 8008890:	4605      	mov	r5, r0
 8008892:	e7e3      	b.n	800885c <_putc_r+0x4c>
 8008894:	08008ec8 	.word	0x08008ec8
 8008898:	08008ee8 	.word	0x08008ee8
 800889c:	08008ea8 	.word	0x08008ea8

080088a0 <_sbrk_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	2300      	movs	r3, #0
 80088a4:	4d05      	ldr	r5, [pc, #20]	; (80088bc <_sbrk_r+0x1c>)
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	602b      	str	r3, [r5, #0]
 80088ac:	f7f8 ff84 	bl	80017b8 <_sbrk>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_sbrk_r+0x1a>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_sbrk_r+0x1a>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20001924 	.word	0x20001924

080088c0 <__sread>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	f000 f8a0 	bl	8008a0c <_read_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	bfab      	itete	ge
 80088d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088d2:	89a3      	ldrhlt	r3, [r4, #12]
 80088d4:	181b      	addge	r3, r3, r0
 80088d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088da:	bfac      	ite	ge
 80088dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088de:	81a3      	strhlt	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__swrite>:
 80088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	461f      	mov	r7, r3
 80088e8:	898b      	ldrh	r3, [r1, #12]
 80088ea:	4605      	mov	r5, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	05db      	lsls	r3, r3, #23
 80088f0:	4616      	mov	r6, r2
 80088f2:	d505      	bpl.n	8008900 <__swrite+0x1e>
 80088f4:	2302      	movs	r3, #2
 80088f6:	2200      	movs	r2, #0
 80088f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fc:	f000 f868 	bl	80089d0 <_lseek_r>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	4632      	mov	r2, r6
 8008904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008908:	4628      	mov	r0, r5
 800890a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	463b      	mov	r3, r7
 8008912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	f000 b817 	b.w	8008948 <_write_r>

0800891a <__sseek>:
 800891a:	b510      	push	{r4, lr}
 800891c:	460c      	mov	r4, r1
 800891e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008922:	f000 f855 	bl	80089d0 <_lseek_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	bf15      	itete	ne
 800892c:	6560      	strne	r0, [r4, #84]	; 0x54
 800892e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008936:	81a3      	strheq	r3, [r4, #12]
 8008938:	bf18      	it	ne
 800893a:	81a3      	strhne	r3, [r4, #12]
 800893c:	bd10      	pop	{r4, pc}

0800893e <__sclose>:
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 b813 	b.w	800896c <_close_r>
	...

08008948 <_write_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	4d06      	ldr	r5, [pc, #24]	; (8008968 <_write_r+0x20>)
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f8 fedd 	bl	8001716 <_write>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_write_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_write_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20001924 	.word	0x20001924

0800896c <_close_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	2300      	movs	r3, #0
 8008970:	4d05      	ldr	r5, [pc, #20]	; (8008988 <_close_r+0x1c>)
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	f7f8 fee9 	bl	800174e <_close>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_close_r+0x1a>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_close_r+0x1a>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20001924 	.word	0x20001924

0800898c <_fstat_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	2300      	movs	r3, #0
 8008990:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_fstat_r+0x20>)
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	f7f8 fee4 	bl	8001766 <_fstat>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d102      	bne.n	80089a8 <_fstat_r+0x1c>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	b103      	cbz	r3, 80089a8 <_fstat_r+0x1c>
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	bd38      	pop	{r3, r4, r5, pc}
 80089aa:	bf00      	nop
 80089ac:	20001924 	.word	0x20001924

080089b0 <_isatty_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	2300      	movs	r3, #0
 80089b4:	4d05      	ldr	r5, [pc, #20]	; (80089cc <_isatty_r+0x1c>)
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7f8 fee3 	bl	8001786 <_isatty>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_isatty_r+0x1a>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_isatty_r+0x1a>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20001924 	.word	0x20001924

080089d0 <_lseek_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4604      	mov	r4, r0
 80089d4:	4d06      	ldr	r5, [pc, #24]	; (80089f0 <_lseek_r+0x20>)
 80089d6:	4608      	mov	r0, r1
 80089d8:	4611      	mov	r1, r2
 80089da:	2200      	movs	r2, #0
 80089dc:	602a      	str	r2, [r5, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	f7f8 fedc 	bl	800179c <_lseek>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_lseek_r+0x1e>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_lseek_r+0x1e>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	20001924 	.word	0x20001924

080089f4 <__malloc_lock>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__malloc_lock+0x8>)
 80089f6:	f7ff bdb5 	b.w	8008564 <__retarget_lock_acquire_recursive>
 80089fa:	bf00      	nop
 80089fc:	20001918 	.word	0x20001918

08008a00 <__malloc_unlock>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__malloc_unlock+0x8>)
 8008a02:	f7ff bdb0 	b.w	8008566 <__retarget_lock_release_recursive>
 8008a06:	bf00      	nop
 8008a08:	20001918 	.word	0x20001918

08008a0c <_read_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4d06      	ldr	r5, [pc, #24]	; (8008a2c <_read_r+0x20>)
 8008a12:	4608      	mov	r0, r1
 8008a14:	4611      	mov	r1, r2
 8008a16:	2200      	movs	r2, #0
 8008a18:	602a      	str	r2, [r5, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f7f8 fe5e 	bl	80016dc <_read>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_read_r+0x1e>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_read_r+0x1e>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20001924 	.word	0x20001924

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
